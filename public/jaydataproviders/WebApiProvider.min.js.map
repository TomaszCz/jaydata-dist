{"version":3,"sources":["node_modules/browser-pack/_prelude.js","WebApiProvider.js","src/Types/StorageProviders/WebApi/WebApiConverter.js","src/Types/StorageProviders/WebApi/WebApiProvider.js","src/Types/StorageProviders/WebApi/index.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","$data","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","_dereq_","_interopRequireDefault","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_core","_core2","WebApiConverter","fromDb","$data.Byte","Container","proxyConverter","$data.SByte","$data.Decimal","$data.Float","$data.Int16","$data.Int64","$data.Integer","$data.Int32","$data.Number","$data.Date","dbData","Date","substring","parseInt","substr","indexOf","match","$data.DateTimeOffset","$data.Time","$data.String","$data.Boolean","$data.Blob","v","convertTo","atob","$data.Object","undefined","Object","JSON","parse","$data.Array","Array","$data.GeographyPoint","geo","isArray","coordinates","GeographyPoint","$data.Guid","guid","toString","toDb","$data.Entity","$data.ObjectID","toISOString","replace","Blob","toBase64","escape","stringify","date","text","bool","b","toHexString","GeographyBase","stringifyToUrl","jaydata/core","2","$C","Expressions","EntityExpressionVisitor","monitorDefinition","Visit","expression","context","methodName","result","canVisit","VisitExpressionNode","apply","arguments","getType","name","args","expressionTypeName","MonitorExpressionNode","MutateExpressionNode","ExpressionNode","walk","m","createExpressionWalker","dig","predicate","exp","value","push","StorageProviderBase","cfg","ctx","providerConfiguration","typeSystem","extend","dbCreation","storageProviders","DbCreationType","DropTableIfChanged","apiUrl","serviceUrl","maxDataServiceVersion","user","password","withCredentials","enableJSONP","_buildDbType_generateConvertToFunction","buildDbType_generateConvertToFunction","_buildDbType_modifyInstanceDefinition","buildDbType_modifyInstanceDefinition","initializeStore","callBack","PromiseHandlerBase","createCallbackSettings","success","storageModel","logicalEntity","convertedItems","dbInstance","PhysicalType","entityState","memberDefinitions","getPublicMappedProperties","forEach","property","initData","Associations","association","FromMultiplicity","ToMultiplicity","refValue","FromPropertyName","rv","contentId","Guard","raise","__metadata","uri","EntityState","Modified","sMod","_storageModel","getStorageModel","tblName","TableName","pk","storageProvider","getEntityKeysValue","data","entitySet","getEntitySetFromElementType","ComplexTypes","cmpType","executeQuery","query","checkForRead","ex","bincount","eqbins","SimpleBinaryExpression","nodeType","constExp","fieldExp","left","ConstantExpression","EntityFieldExpression","right","source","entityType","defaultType","selector","memberName","getKeyProperties","queryText","tableName","_compile","error","request","url","type","method","rawDataList","cnt","console","dir","appendBasicAuth","prepareRequest","ajax","queryable","params","compiler","webApi","webApiCompiler","compiled","compile","saveChanges","changedItems","independentBlocks","buildIndependentBlocks","saveInternal","index2","disableBatch","defaults","_saveRestMany","_saveBatch","_saveRest","convertedItem","index","headers","contentType","dataType","Unchanged","Added","save_getInitData","save_addConcurrencyHeader","Deleted","Exception","that","status","xhr","s","item","memDef","propType","resolveType","computed","key","isAssignableTo","inverseProperty","converter","fieldConverter","resolveName","response","body","message","batchRequests","Content-Id","requestUri","requestData","__batchRequests","__changeRequests","statusCode","__batchResponses","__changeResponses","errors","ETag","Etag","etag","filter","concurrencyMode","ConcurrencyMode","Fixed","OData","batchHandler","physicalData","serializableObject","asArray","memdef","kind","MemberTypes","navProperty","complexProperty","notMapped","getTraceString","supportedDataTypes","Integer","String","Number","Boolean","Guid","Byte","SByte","Decimal","Float","Int16","Int32","Int64","Time","DateTimeOffset","writable","supportedBinaryOperators","equal","mapTo","allowedIn","FilterExpression","OrderExpression","notEqual","equalTyped","notEqualTyped","greaterThan","greaterThanOrEqual","lessThan","lessThenOrEqual","or","and","add","divide","multiply","subtract","modulo","in","supportedUnaryOperators","not","supportedFieldOperations","contains","parameters","startsWith","endsWith","ProjectionExpression","strLength","baseIndex","optional","toLowerCase","toUpperCase","trim","concat","day","hour","minute","month","second","year","round","floor","ceiling","enumerable","supportedSetOperations","map","toArray","single","some","invokable","frameType","SomeExpression","every","EveryExpression","take","skip","orderBy","orderByDescending","first","include","batchDelete","entity","keyValue","memDefs","createNew","l","field","getName","originalType","hexDigits","join","Authorization","__encodeBase64","val","chr1","chr2","enc1","enc2","enc3","b64array","input","base64","chr3","enc4","charCodeAt","isNaN","charAt","registerProvider","webApiProvider","provider","includes","mainEntitySet","queryFragments","urlText","modelBinderConfig","modelBinder","createModelBinderConfigCompiler","addAmp","VisitOrderExpression","orderCompiler","createwebApiOrderCompiler","VisitPagingExpression","pagingCompiler","createwebApiPagingCompiler","VisitIncludeExpression","includeFragment","split","tempData","entityContext","ToType","VisitProjectionExpression","projectionCompiler","createwebApiProjectionCompiler","VisitFilterExpression","filterCompiler","createwebApiWhereCompiler","VisitEntitySetExpression","instance","VisitServiceOperationExpression","serviceName","VisitBatchDeleteExpression","VisitConstantExpression","typeName","Entity","fullName","VisitCountExpression","lambdaPrefix","VisitParametricQueryExpression","VisitUnaryExpression","resolution","operand","VisitSimpleBinaryExpression","requireType","paramValue","orResolution","eqResolution","idValue","idCheck","createSimpleBinaryExpression","ExpressionType","Equal","Or","temp","VisitEntityFieldExpression","ComplexTypeExpression","VisitAssociationInfoExpression","associationInfo","VisitMemberInfoExpression","VisitQueryParameterExpression","VisitEntityFieldOperationExpression","operation","MemberInfoExpression","opDef","memberDefinition","opName","paramCounter","arg","VisitEntityExpression","lambda","AssociationInfoExpression","VisitFrameOperationExpression","Queryable","frameExpression","preparator","createQueryExpressionCreator","prep_expression","webApiWhereCompiler","frameContext","orderContext","OrderByDescending","VisitComplexTypeExpression","pagingContext","amount","Skip","Take","hasObjectLiteral","ObjectLiteralPath","modelBinderMapping","mapping","EntityExpression","EntitySetExpression","pop","VisitObjectLiteralExpression","tempObjectLiteralPath","members","member","VisitObjectFieldExpression","fieldName","slice","3","defineProperty","_WebApiConverter","_WebApiProvider","./WebApiConverter.js","./WebApiProvider.js"],"mappings":"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","file":"WebApiProvider.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","﻿// JayData 1.5.13 \r\n// Dual licensed under MIT and GPL v2\r\n// Copyright JayStack Technologies (http://jaydata.org/licensing)\r\n//\r\n// JayData is a standards-based, cross-platform Javascript library and a set of\r\n// practices to access and manipulate data from various online and offline sources.\r\n//\r\n// Credits:\r\n//     Hajnalka Battancs, Dániel József, János Roden, László Horváth, Péter Nochta\r\n//     Péter Zentai, Róbert Bónay, Szabolcs Czinege, Viktor Borza, Viktor Lázár,\r\n//     Zoltán Gyebrovszki, Gábor Dolla\r\n//\r\n// More info: http://jaydata.org\r\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define(\"jaydata/webapi\",[\"jaydata/core\"],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.$data = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.WebApiConverter = {\n    fromDb: {\n        '$data.Byte': _core2.default.Container.proxyConverter,\n        '$data.SByte': _core2.default.Container.proxyConverter,\n        '$data.Decimal': _core2.default.Container.proxyConverter,\n        '$data.Float': _core2.default.Container.proxyConverter,\n        '$data.Int16': _core2.default.Container.proxyConverter,\n        '$data.Int64': _core2.default.Container.proxyConverter,\n\n        '$data.Integer': _core2.default.Container.proxyConverter, //function (number) { return (typeof number === 'string' && /^\\d+$/.test(number)) ? parseInt(number) : number; },\n        '$data.Int32': _core2.default.Container.proxyConverter,\n        '$data.Number': _core2.default.Container.proxyConverter,\n        '$data.Date': function $dataDate(dbData) {\n            if (dbData) {\n                if (dbData instanceof Date) {\n                    return dbData;\n                } else if (dbData.substring(0, 6) === '/Date(') {\n                    return new Date(parseInt(dbData.substr(6)));\n                } else {\n                    //ISODate without Z? Safari compatible with Z\n                    if (dbData.indexOf('Z') === -1 && !dbData.match('T.*[+-]')) dbData += 'Z';\n                    return new Date(dbData);\n                }\n            } else {\n                return dbData;\n            }\n        },\n        '$data.DateTimeOffset': function $dataDateTimeOffset(dbData) {\n            if (dbData) {\n                if (dbData instanceof Date) {\n                    return dbData;\n                } else if (dbData.substring(0, 6) === '/Date(') {\n                    return new Date(parseInt(dbData.substr(6)));\n                } else {\n                    //ISODate without Z? Safari compatible with Z\n                    if (dbData.indexOf('Z') === -1 && !dbData.match('T.*[+-]')) dbData += 'Z';\n                    return new Date(dbData);\n                }\n            } else {\n                return dbData;\n            }\n        },\n        '$data.Time': _core2.default.Container.proxyConverter,\n        '$data.String': _core2.default.Container.proxyConverter,\n        '$data.Boolean': _core2.default.Container.proxyConverter,\n        '$data.Blob': function $dataBlob(v) {\n            if (typeof v == 'string') {\n                try {\n                    return _core2.default.Container.convertTo(atob(v), '$data.Blob');\n                } catch (e) {\n                    return v;\n                }\n            } else return v;\n        },\n        '$data.Object': function $dataObject(o) {\n            if (o === undefined) {\n                return new _core2.default.Object();\n            } else if (typeof o === 'string') {\n                return JSON.parse(o);\n            }return o;\n        },\n        '$data.Array': function $dataArray(o) {\n            if (o === undefined) {\n                return new _core2.default.Array();\n            } else if (o instanceof _core2.default.Array) {\n                return o;\n            }return JSON.parse(o);\n        },\n        '$data.GeographyPoint': function $dataGeographyPoint(geo) {\n            if (geo && (typeof geo === 'undefined' ? 'undefined' : _typeof(geo)) === 'object' && Array.isArray(geo.coordinates)) {\n                return new _core2.default.GeographyPoint(geo.coordinates);\n            }\n            return geo;\n        },\n        '$data.Guid': function $dataGuid(guid) {\n            return guid ? guid.toString() : guid;\n        }\n    },\n    toDb: {\n        '$data.Entity': _core2.default.Container.proxyConverter,\n        '$data.Byte': _core2.default.Container.proxyConverter,\n        '$data.SByte': _core2.default.Container.proxyConverter,\n        '$data.Decimal': _core2.default.Container.proxyConverter,\n        '$data.Float': _core2.default.Container.proxyConverter,\n        '$data.Int16': _core2.default.Container.proxyConverter,\n        '$data.Int64': _core2.default.Container.proxyConverter,\n        '$data.ObjectID': _core2.default.Container.proxyConverter,\n        '$data.Integer': _core2.default.Container.proxyConverter,\n        '$data.Int32': _core2.default.Container.proxyConverter,\n        '$data.Number': _core2.default.Container.proxyConverter,\n        '$data.Date': function $dataDate(e) {\n            return e ? e.toISOString().replace('Z', '') : e;\n        },\n        '$data.Time': _core2.default.Container.proxyConverter,\n        '$data.DateTimeOffset': function $dataDateTimeOffset(v) {\n            return v ? v.toISOString() : v;\n        },\n        '$data.String': _core2.default.Container.proxyConverter,\n        '$data.Boolean': _core2.default.Container.proxyConverter,\n        '$data.Blob': function $dataBlob(v) {\n            return v ? _core2.default.Blob.toBase64(v) : v;\n        },\n        '$data.Object': _core2.default.Container.proxyConverter,\n        '$data.Array': _core2.default.Container.proxyConverter,\n        '$data.GeographyPoint': _core2.default.Container.proxyConverter,\n        '$data.Guid': _core2.default.Container.proxyConverter\n    },\n    escape: {\n        '$data.Entity': function $dataEntity(e) {\n            return JSON.stringify(e);\n        },\n        '$data.Integer': _core2.default.Container.proxyConverter,\n        '$data.Int32': _core2.default.Container.proxyConverter,\n        '$data.Number': _core2.default.Container.proxyConverter, // double: 13.5D\n        '$data.Int16': _core2.default.Container.proxyConverter,\n        '$data.Byte': _core2.default.Container.proxyConverter,\n        '$data.SByte': _core2.default.Container.proxyConverter,\n        '$data.Decimal': function $dataDecimal(v) {\n            return v ? v + 'm' : v;\n        },\n        '$data.Float': function $dataFloat(v) {\n            return v ? v + 'f' : v;\n        },\n        '$data.Int64': function $dataInt64(v) {\n            return v ? v + 'L' : v;\n        },\n        '$data.Time': function $dataTime(v) {\n            return v ? \"time'\" + v + \"'\" : v;\n        },\n        '$data.DateTimeOffset': function $dataDateTimeOffset(date) {\n            return date ? \"datetimeoffset'\" + date + \"'\" : date;\n        },\n        '$data.Date': function $dataDate(date) {\n            return date ? \"datetime'\" + date + \"'\" : date;\n        },\n        '$data.String': function $dataString(text) {\n            return typeof text === 'string' ? \"'\" + text.replace(/'/g, \"''\") + \"'\" : text;\n        },\n        '$data.ObjectID': function $dataObjectID(text) {\n            return typeof text === 'string' ? \"'\" + text.replace(/'/g, \"''\") + \"'\" : text;\n        },\n        '$data.Boolean': function $dataBoolean(bool) {\n            return typeof bool === 'boolean' ? bool.toString() : bool;\n        },\n        '$data.Blob': function $dataBlob(b) {\n            return b ? \"X'\" + _core2.default.Blob.toHexString(_core2.default.Container.convertTo(atob(b), _core2.default.Blob)) + \"'\" : b;\n        },\n        '$data.Object': function $dataObject(o) {\n            return JSON.stringify(o);\n        },\n        '$data.Array': function $dataArray(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeographyPoint': function $dataGeographyPoint(g) {\n            if (g) {\n                return _core2.default.GeographyBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.Guid': function $dataGuid(guid) {\n            return guid ? \"guid'\" + guid.toString() + \"'\" : guid;\n        }\n    }\n};\n\n},{\"jaydata/core\":\"jaydata/core\"}],2:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.Expressions.ExpressionWalker', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(monitorDefinition) {\n        this.Visit = function (expression, context) {\n\n            var result = expression;\n            var methodName;\n            if (this.canVisit(expression)) {\n\n                //if (monitorDefinition.FilterExpressionNode) {\n\n                //};\n\n                if (monitorDefinition.VisitExpressionNode) {\n                    monitorDefinition.VisitExpressionNode.apply(monitorDefinition, arguments);\n                };\n\n                methodName = \"Visit\" + expression.getType().name;\n                if (methodName in monitorDefinition) {\n                    result = monitorDefinition[methodName].apply(monitorDefinition, arguments);\n                }\n            }\n\n            //apply is about 3-4 times faster then call on webkit\n\n            var args = arguments;\n            if (result !== expression) args = [result, context];\n            result = _core2.default.Expressions.EntityExpressionVisitor.prototype.Visit.apply(this, args);\n\n            args = [result, context];\n\n            if (this.canVisit(result)) {\n                var expressionTypeName = result.getType().name;\n                if (monitorDefinition.MonitorExpressionNode) {\n                    monitorDefinition.MonitorExpressionNode.apply(monitorDefinition, args);\n                }\n                methodName = \"Monitor\" + expressionTypeName;\n                if (methodName in monitorDefinition) {\n                    monitorDefinition[methodName].apply(monitorDefinition, args);\n                }\n\n                if (monitorDefinition.MutateExpressionNode) {\n                    monitorDefinition.MutateExpressionNode.apply(monitorDefinition, args);\n                }\n                methodName = \"Mutate\" + expressionTypeName;\n                if (methodName in monitorDefinition) {\n                    result = monitorDefinition[methodName].apply(monitorDefinition, args);\n                }\n            }\n            return result;\n        };\n    }\n});\n_core2.default.Expressions.ExpressionNode.prototype.walk = function (monitorDefinition, context) {\n    var m = _core.Container.createExpressionWalker(monitorDefinition);\n    return m.Visit(this, context);\n};\n\n_core2.default.Expressions.ExpressionNode.prototype.dig = function (predicate) {\n    var result = [];\n    this.walk({\n        MonitorExpressionNode: function MonitorExpressionNode(exp) {\n            var value;\n            if (value = predicate(exp)) {\n                result.push(value);\n            }\n        }\n    });\n    return result;\n};\n\n(0, _core.$C)('$data.storageProviders.webApi.webApiProvider', _core2.default.StorageProviderBase, null, {\n    constructor: function constructor(cfg, ctx) {\n        this.context = ctx;\n        this.providerConfiguration = _core2.default.typeSystem.extend({\n            dbCreation: _core2.default.storageProviders.DbCreationType.DropTableIfChanged,\n            apiUrl: \"/odata.svc\",\n            serviceUrl: \"\",\n            maxDataServiceVersion: '2.0',\n            user: null,\n            password: null,\n            withCredentials: false,\n            enableJSONP: false\n            //disableBatch: undefined\n        }, cfg);\n        if (this.context && this.context._buildDbType_generateConvertToFunction && this.buildDbType_generateConvertToFunction) {\n            this.context._buildDbType_generateConvertToFunction = this.buildDbType_generateConvertToFunction;\n        }\n        if (this.context && this.context._buildDbType_modifyInstanceDefinition && this.buildDbType_modifyInstanceDefinition) {\n            this.context._buildDbType_modifyInstanceDefinition = this.buildDbType_modifyInstanceDefinition;\n        }\n    },\n    initializeStore: function initializeStore(callBack) {\n        callBack = _core2.default.PromiseHandlerBase.createCallbackSettings(callBack);\n        callBack.success(this.context);\n    },\n    buildDbType_generateConvertToFunction: function buildDbType_generateConvertToFunction(storageModel, context) {\n        return function (logicalEntity, convertedItems) {\n            var dbInstance = new storageModel.PhysicalType();\n            dbInstance.entityState = logicalEntity.entityState;\n\n            storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (property) {\n                dbInstance.initData[property.name] = logicalEntity[property.name];\n            }, this);\n\n            if (storageModel.Associations) {\n                storageModel.Associations.forEach(function (association) {\n                    if (association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\" || association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\" || association.FromMultiplicity == '$$unbound') {\n                        var refValue = logicalEntity[association.FromPropertyName];\n                        if (refValue !== null && refValue !== undefined) {\n                            if (refValue instanceof _core2.default.Array) {\n                                dbInstance.initData[association.FromPropertyName] = dbInstance[association.FromPropertyName] || [];\n                                refValue.forEach(function (rv) {\n                                    var contentId = convertedItems.indexOf(rv);\n                                    if (contentId < 0) {\n                                        _core.Guard.raise(\"Dependency graph error\");\n                                    }\n                                    dbInstance.initData[association.FromPropertyName].push({ __metadata: { uri: \"$\" + (contentId + 1) } });\n                                }, this);\n                            } else {\n                                if (refValue.entityState === _core2.default.EntityState.Modified) {\n                                    var sMod = context._storageModel.getStorageModel(refValue.getType());\n                                    var tblName = sMod.TableName;\n                                    var pk = '(' + context.storageProvider.getEntityKeysValue({ data: refValue, entitySet: context.getEntitySetFromElementType(refValue.getType()) }) + ')';\n                                    dbInstance.initData[association.FromPropertyName] = { __metadata: { uri: tblName + pk } };\n                                } else {\n                                    var contentId = convertedItems.indexOf(refValue);\n                                    if (contentId < 0) {\n                                        _core.Guard.raise(\"Dependency graph error\");\n                                    }\n                                    dbInstance.initData[association.FromPropertyName] = { __metadata: { uri: \"$\" + (contentId + 1) } };\n                                }\n                            }\n                        }\n                    }\n                }, this);\n            }\n            if (storageModel.ComplexTypes) {\n                storageModel.ComplexTypes.forEach(function (cmpType) {\n                    dbInstance.initData[cmpType.FromPropertyName] = logicalEntity[cmpType.FromPropertyName];\n                }, this);\n            }\n            return dbInstance;\n        };\n    },\n    buildDbType_modifyInstanceDefinition: function buildDbType_modifyInstanceDefinition() {\n        return;\n    },\n    executeQuery: function executeQuery(query, callBack) {\n        callBack = _core2.default.PromiseHandlerBase.createCallbackSettings(callBack);\n\n        var result;\n        try {\n            result = this._compile(query);\n        } catch (e) {\n            callBack.error(e);\n            return;\n        }\n        var schema = this.context;\n        //console.dir(expressionTree);\n        //console.log(query.expression.walk);\n        function checkForRead(query) {\n\n            var ex = _core2.default.Expressions;\n            var bincount = 0;\n            var eqbins = query.expression.dig(function (exp) {\n                if (exp instanceof ex.SimpleBinaryExpression) {\n                    bincount++;\n                }\n                if (exp.nodeType == \"equal\") {\n                    var constExp = null;\n                    var fieldExp = null;\n                    if (exp.left instanceof ex.ConstantExpression) constExp = exp.left;\n                    if (exp.left instanceof ex.EntityFieldExpression) fieldExp = exp.left;\n                    if (exp.right instanceof ex.ConstantExpression) constExp = exp.right;\n                    if (exp.right instanceof ex.EntityFieldExpression) fieldExp = exp.right;\n                    if (fieldExp && constExp) {\n\n                        if (fieldExp.source.entityType === query.defaultType && fieldExp.selector.memberName == query.defaultType.memberDefinitions.getKeyProperties()[0].name) {\n                            return constExp.value;\n                        }\n                    }\n                }\n            });\n            if (bincount == 1 && eqbins.length == 1) {\n                result.queryText = \"/\" + query.context.getEntitySetFromElementType(query.defaultType).tableName + \"/\" + eqbins[0].toString();\n            };\n            //query.w\n        }\n        checkForRead(query);\n\n        var request = {\n            url: this.providerConfiguration.apiUrl + result.queryText,\n            type: result.method,\n            success: function success(data) {\n                if (callBack.success) {\n                    query.rawDataList = typeof data === 'string' ? [{ cnt: data }] : data;\n                    callBack.success(query);\n                }\n            },\n            error: function error() {\n                console.dir(arguments);\n                callBack.error(arguments);\n                //callBack.error(errorThrow || new Exception('Request failed', 'RequestError', arguments));\n            }\n        };\n\n        this.appendBasicAuth(request, this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\n\n        this.context.prepareRequest.call(this, request);\n        _core2.default.ajax(request);\n    },\n    _compile: function _compile(queryable, params) {\n        var compiler = new _core2.default.storageProviders.webApi.webApiCompiler();\n        var compiled = compiler.compile(queryable);\n        return compiled;\n    },\n    saveChanges: function saveChanges(callBack, changedItems) {\n        if (changedItems.length > 0) {\n            var independentBlocks = this.buildIndependentBlocks(changedItems);\n            this.saveInternal(independentBlocks, 0, callBack);\n        } else {\n            callBack.success(0);\n        }\n    },\n    saveInternal: function saveInternal(independentBlocks, index2, callBack) {\n        if ((this.providerConfiguration.disableBatch === true || _typeof(_core2.default.defaults) === 'object' && _core2.default.defaults.disableBatch === true) && typeof this._saveRestMany === 'function') {\n            this._saveRestMany(independentBlocks, index2, callBack);\n        } else {\n            if (independentBlocks.length > 1 || independentBlocks.length == 1 && independentBlocks[0].length > 1) {\n                this._saveBatch(independentBlocks, index2, callBack);\n            } else {\n                this._saveRest(independentBlocks, index2, callBack);\n            }\n        }\n    },\n    _saveRest: function _saveRest(independentBlocks, index2, callBack) {\n        var batchRequests = [];\n        var convertedItem = [];\n        var request;\n        for (var index = 0; index < independentBlocks.length; index++) {\n            for (var i = 0; i < independentBlocks[index].length; i++) {\n                convertedItem.push(independentBlocks[index][i].data);\n                request = {\n                    url: this.providerConfiguration.apiUrl + '/',\n                    headers: {},\n                    contentType: \"application/json\",\n                    dataType: \"json\"\n                };\n\n                //request.headers = { \"Content-Id\": convertedItem.length };\n                switch (independentBlocks[index][i].data.entityState) {\n                    case _core2.default.EntityState.Unchanged:\n                        continue;break;\n                    case _core2.default.EntityState.Added:\n                        request.type = \"POST\";\n                        request.url += independentBlocks[index][i].entitySet.tableName;\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\n                        break;\n                    case _core2.default.EntityState.Modified:\n                        request.type = \"PUT\";\n                        request.url += independentBlocks[index][i].entitySet.tableName;\n                        request.url += \"/\" + this.getEntityKeysValue(independentBlocks[index][i]);\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\n                        break;\n                    case _core2.default.EntityState.Deleted:\n                        request.type = \"DELETE\";\n                        request.url += independentBlocks[index][i].entitySet.tableName;\n                        request.url += \"/\" + this.getEntityKeysValue(independentBlocks[index][i]);\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\n                        break;\n                    default:\n                        _core.Guard.raise(new _core.Exception(\"Not supported Entity state\"));\n                }\n                if (request.data) {\n                    request.data = JSON.stringify(request.data);\n                }\n                //batchRequests.push(request);\n            }\n        }\n        var that = this;\n\n        request.success = function (data, status, xhr) {\n            var arg = arguments;\n            var s = xhr.status;\n            if (s >= 200 && s < 300) {\n\n                if (data) {\n                    var item = convertedItem[0];\n                    item.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n                        var propType = _core.Container.resolveType(memDef.type);\n                        if (memDef.computed || memDef.key || !propType.isAssignableTo && !memDef.inverseProperty) {\n                            //if (memDef.concurrencyMode === $data.ConcurrencyMode.Fixed) {\n                            //    item[memDef.name] = response.headers.ETag || response.headers.Etag;\n                            //} else {\n                            var converter = that.fieldConverter.fromDb[_core.Container.resolveName(memDef.type)];\n                            item[memDef.name] = converter ? converter(data[memDef.name]) : data[memDef.name];\n                            //}\n                        }\n                    }, this);\n                }\n                //if (s == 204) {\n                //    //TODO versioning/ETag\n                //    if (response.headers.ETag || response.headers.Etag) {\n                //        var property = item.getType().memberDefinitions.getPublicMappedProperties().filter(function (memDef) { return memDef.concurrencyMode === $data.ConcurrencyMode.Fixed });\n                //        if (property && property[0]) {\n                //            item[property[0].name] = response.headers.ETag || response.headers.Etag;\n                //        }\n                //    }\n\n                //} else {\n                //    //its optional to send back content from webapi\n                //    if (data) {\n                //        //item.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n                //        //    if (memDef.computed || memDef.key) {\n                //        //        if (memDef.concurrencyMode === $data.ConcurrencyMode.Fixed) {\n                //        //            item[memDef.name] = response.headers.ETag || response.headers.Etag;\n                //        //        } else {\n                //        //            var converter = that.fieldConverter.fromDb[Container.resolveType(memDef.type)];\n                //        //            item[memDef.name] = converter ? converter(data[memDef.name]) : data[memDef.name];\n                //        //        }\n                //        //    }\n                //        //}, this);\n                //        //item.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n                //        //    var propType = Container.resolveType(memDef.type);\n                //        //    if (memDef.computed || memDef.key || (!propType.isAssignableTo && !memDef.inverseProperty)) {\n                //        //        if (memDef.concurrencyMode === $data.ConcurrencyMode.Fixed) {\n                //        //            item[memDef.name] = response.headers.ETag || response.headers.Etag;\n                //        //        } else {\n                //        //            var converter = that.fieldConverter.fromDb[Container.resolveName(memDef.type)];\n                //        //            item[memDef.name] = converter ? converter(data[memDef.name]) : data[memDef.name];\n                //        //        }\n                //        //    }\n                //        //}, this);\n                //    }\n                //}\n\n                if (callBack.success) {\n                    callBack.success(convertedItem.length);\n                }\n            } else {\n                callBack.error(response);\n            }\n        };\n        request.error = function (e) {\n            callBack.error(new _core.Exception((e.response || {}).body, e.message, e));\n        };\n\n        this.appendBasicAuth(request, this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\n        //if (this.providerConfiguration.user) {\n        //    requestData[0].user = this.providerConfiguration.user;\n        //    requestData[0].password = this.providerConfiguration.password || \"\";\n        //}\n\n        this.context.prepareRequest.call(this, request);\n        _core2.default.ajax(request);\n        //OData.request.apply(this, requestData);\n    },\n    _saveBatch: function _saveBatch(independentBlocks, index2, callBack) {\n        var batchRequests = [];\n        var convertedItem = [];\n        for (var index = 0; index < independentBlocks.length; index++) {\n            for (var i = 0; i < independentBlocks[index].length; i++) {\n                convertedItem.push(independentBlocks[index][i].data);\n                var request = {};\n                request.headers = { \"Content-Id\": convertedItem.length };\n                switch (independentBlocks[index][i].data.entityState) {\n                    case _core2.default.EntityState.Unchanged:\n                        continue;break;\n                    case _core2.default.EntityState.Added:\n                        request.method = \"POST\";\n                        request.requestUri = independentBlocks[index][i].entitySet.tableName;\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\n                        break;\n                    case _core2.default.EntityState.Modified:\n                        request.method = \"MERGE\";\n                        request.requestUri = independentBlocks[index][i].entitySet.tableName;\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\n                        break;\n                    case _core2.default.EntityState.Deleted:\n                        request.method = \"DELETE\";\n                        request.requestUri = independentBlocks[index][i].entitySet.tableName;\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\n                        break;\n                    default:\n                        _core.Guard.raise(new _core.Exception(\"Not supported Entity state\"));\n                }\n                batchRequests.push(request);\n            }\n        }\n        var that = this;\n\n        var requestData = [{\n            requestUri: this.providerConfiguration.apiUrl + \"/$batch\",\n            method: \"POST\",\n            data: {\n                __batchRequests: [{ __changeRequests: batchRequests }]\n            }\n        }, function (data, response) {\n            if (response.statusCode == 202) {\n                var result = data.__batchResponses[0].__changeResponses;\n                var errors = [];\n\n                for (var i = 0; i < result.length; i++) {\n                    if (result[i].statusCode > 200 && result[i].statusCode < 300) {\n                        var item = convertedItem[i];\n                        if (result[i].statusCode == 204) {\n                            if (result[i].headers.ETag || result[i].headers.Etag || result[i].headers.etag) {\n                                var property = item.getType().memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\n                                    return memDef.concurrencyMode === _core2.default.ConcurrencyMode.Fixed;\n                                });\n                                if (property && property[0]) {\n                                    item[property[0].name] = result[i].headers.ETag || result[i].headers.Etag || result[i].headers.etag;\n                                }\n                            }\n                            continue;\n                        }\n\n                        item.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n                            //TODO: is this correct?\n                            if (memDef.computed || memDef.key) {\n                                if (memDef.concurrencyMode === _core2.default.ConcurrencyMode.Fixed) {\n                                    item[memDef.name] = result[i].headers.ETag || result[i].headers.Etag || result[i].headers.etag;\n                                } else {\n                                    var converter = that.fieldConverter.fromDb[_core.Container.resolveType(memDef.type)];\n                                    item[memDef.name] = converter ? converter(result[i].data[memDef.name]) : result[i].data[memDef.name];\n                                }\n                            }\n                        }, this);\n                    } else {\n                        errors.push(new _core.Exception((result[i].response || {}).body, result[i].message, result[i]));\n                    }\n                }\n                if (errors.length > 0) {\n                    callBack.error(new _core.Exception('See inner exceptions', 'Batch failed', errors));\n                } else if (callBack.success) {\n                    callBack.success(convertedItem.length);\n                }\n            } else {\n                callBack.error(response);\n            }\n        }, function (e) {\n            callBack.error(new _core.Exception((e.response || {}).body, e.message, e));\n        }, OData.batchHandler];\n\n        this.appendBasicAuth(requestData[0], this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\n        //if (this.providerConfiguration.user) {\n        //    requestData[0].user = this.providerConfiguration.user;\n        //    requestData[0].password = this.providerConfiguration.password || \"\";\n        //}\n\n        this.context.prepareRequest.call(this, requestData);\n        OData.request.apply(this, requestData);\n    },\n    save_getInitData: function save_getInitData(item, convertedItems) {\n        item.physicalData = this.context._storageModel.getStorageModel(item.data.getType()).PhysicalType.convertTo(item.data, convertedItems);\n        var serializableObject = {};\n        item.physicalData.getType().memberDefinitions.asArray().forEach(function (memdef) {\n            if (memdef.kind == _core2.default.MemberTypes.navProperty || memdef.kind == _core2.default.MemberTypes.complexProperty || memdef.kind == _core2.default.MemberTypes.property && !memdef.notMapped) {\n                //if (typeof memdef.concurrencyMode === 'undefined' &&\n                //    (memdef.key === true || item.data.entityState === $data.EntityState.Added ||\n                //    item.data.changedProperties.some(function (def) { return def.name === memdef.name; }))\n                //)\n                serializableObject[memdef.name] = item.physicalData[memdef.name];\n            }\n        }, this);\n        return serializableObject;\n    },\n    save_addConcurrencyHeader: function save_addConcurrencyHeader(item, headers) {\n        var property = item.data.getType().memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\n            return memDef.concurrencyMode === _core2.default.ConcurrencyMode.Fixed;\n        });\n        if (property && property[0]) {\n            headers['If-Match'] = item.data[property[0].name];\n            //item.data[property[0].name] = \"\";\n        }\n    },\n    getTraceString: function getTraceString(queryable) {\n        var sqlText = this._compile(queryable);\n        return queryable;\n    },\n    supportedDataTypes: { value: [_core2.default.Integer, _core2.default.String, _core2.default.Number, _core2.default.Blob, _core2.default.Boolean, _core2.default.Date, _core2.default.Object, _core2.default.GeographyPoint, _core2.default.Guid, _core2.default.Byte, _core2.default.SByte, _core2.default.Decimal, _core2.default.Float, _core2.default.Int16, _core2.default.Int32, _core2.default.Int64, _core2.default.Time, _core2.default.DateTimeOffset], writable: false },\n\n    supportedBinaryOperators: {\n        value: {\n            equal: { mapTo: 'eq', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            notEqual: { mapTo: 'ne', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            equalTyped: { mapTo: 'eq', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            notEqualTyped: { mapTo: 'ne', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            greaterThan: { mapTo: 'gt', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            greaterThanOrEqual: { mapTo: 'ge', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n\n            lessThan: { mapTo: 'lt', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            lessThenOrEqual: { mapTo: 'le', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            or: { mapTo: 'or', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            and: { mapTo: 'and', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n\n            add: { mapTo: 'add', dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            divide: { mapTo: 'div', allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            multiply: { mapTo: 'mul', allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            subtract: { mapTo: 'sub', allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            modulo: { mapTo: 'mod', allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n\n            \"in\": { mapTo: \"in\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] }\n        }\n    },\n\n    supportedUnaryOperators: {\n        value: {\n            not: { mapTo: 'not' }\n        }\n    },\n\n    supportedFieldOperations: {\n        value: {\n            /* string functions */\n\n            contains: {\n                mapTo: \"substringof\",\n                dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"substring\", dataType: \"string\" }, { name: \"@expression\" }]\n            },\n\n            startsWith: {\n                mapTo: \"startswith\",\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\n            },\n\n            endsWith: {\n                mapTo: \"endswith\",\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\n            },\n\n            length: {\n                dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.ProjectionExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\n            },\n            strLength: {\n                mapTo: \"length\",\n                dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.ProjectionExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\n            },\n\n            indexOf: {\n                dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                mapTo: \"indexof\",\n                baseIndex: 1,\n                parameters: [{ name: '@expression', dataType: \"string\" }, { name: 'strFragment', dataType: 'string' }]\n            },\n\n            replace: {\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: '@expression', dataType: \"string\" }, { name: 'strFrom', dataType: 'string' }, { name: 'strTo', dataType: 'string' }]\n            },\n\n            substr: {\n                mapTo: \"substring\",\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\", optional: \"true\" }]\n            },\n\n            toLowerCase: {\n                mapTo: \"tolower\",\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\n            },\n\n            toUpperCase: {\n                mapTo: \"toupper\",\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\n\n            },\n\n            trim: {\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\n            },\n\n            concat: {\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\n            },\n\n            /* data functions */\n\n            day: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            hour: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            minute: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            month: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            second: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            year: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n\n            /* number functions */\n            round: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            floor: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            ceiling: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            }\n        },\n        enumerable: true,\n        writable: true\n    },\n    supportedSetOperations: {\n        value: {\n            filter: {},\n            map: {},\n            length: {},\n            forEach: {},\n            toArray: {},\n            single: {},\n            some: {\n                invokable: false,\n                allowedIn: [_core2.default.Expressions.FilterExpression],\n                parameters: [{ name: \"filter\", dataType: \"$data.Queryable\" }],\n                mapTo: 'any',\n                frameType: _core2.default.Expressions.SomeExpression\n            },\n            every: {\n                invokable: false,\n                allowedIn: [_core2.default.Expressions.FilterExpression],\n                parameters: [{ name: \"filter\", dataType: \"$data.Queryable\" }],\n                mapTo: 'all',\n                frameType: _core2.default.Expressions.EveryExpression\n            },\n            take: {},\n            skip: {},\n            orderBy: {},\n            orderByDescending: {},\n            first: {},\n            include: {},\n            batchDelete: {}\n        },\n        enumerable: true,\n        writable: true\n    },\n    fieldConverter: { value: _core2.default.WebApiConverter },\n    getEntityKeysValue: function getEntityKeysValue(entity) {\n        var result = [];\n        var keyValue = undefined;\n\n        var memDefs = entity.entitySet.createNew.memberDefinitions.asArray();\n        for (var i = 0, l = memDefs.length; i < l; i++) {\n            var field = memDefs[i];\n            if (field.key) {\n                keyValue = entity.data[field.name];\n                switch (_core.Container.getName(field.originalType)) {\n                    case \"$data.Guid\":\n                    case \"Edm.Guid\":\n                        keyValue = \"guid'\" + (keyValue ? keyValue.value : keyValue) + \"'\";\n                        break;\n                    case \"$data.Blob\":\n                    case \"Edm.Binary\":\n                        keyValue = \"binary'\" + keyValue + \"'\";\n                        break;\n                    case \"Edm.Byte\":\n                        var hexDigits = '0123456789ABCDEF';\n                        keyValue = hexDigits[i >> 4 & 15] + hexDigits[i & 15];\n                        break;\n                    case \"$data.Date\":\n                    case \"Edm.DateTime\":\n                        keyValue = \"datetime'\" + keyValue.toISOString() + \"'\";\n                        break;\n                    case \"Edm.Decimal\":\n                        keyValue = keyValue + \"M\";\n                        break;\n                    case \"Edm.Single\":\n                        keyValue = keyValue + \"f\";\n                        break;\n                    case \"Edm.Int64\":\n                        keyValue = keyValue + \"L\";\n                        break;\n                    case 'Edm.String':\n                    case \"$data.String\":\n                        keyValue = \"'\" + keyValue + \"'\";\n                        break;\n                }\n                result.push(field.name + \"=\" + keyValue);\n            }\n        }\n        if (result.length > 1) {\n            return result.join(\",\");\n        }\n        return keyValue;\n    },\n    appendBasicAuth: function appendBasicAuth(request, user, password, withCredentials) {\n        request.headers = request.headers || {};\n        if (!request.headers.Authorization && user && password) {\n            request.headers.Authorization = \"Basic \" + this.__encodeBase64(user + \":\" + password);\n            request.withCredentials = withCredentials;\n        }\n    },\n    __encodeBase64: function __encodeBase64(val) {\n        var b64array = \"ABCDEFGHIJKLMNOP\" + \"QRSTUVWXYZabcdef\" + \"ghijklmnopqrstuv\" + \"wxyz0123456789+/\" + \"=\";\n\n        var input = val;\n        var base64 = \"\";\n        var hex = \"\";\n        var chr1,\n            chr2,\n            chr3 = \"\";\n        var enc1,\n            enc2,\n            enc3,\n            enc4 = \"\";\n        var i = 0;\n\n        do {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n            enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n                enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n                enc4 = 64;\n            }\n\n            base64 = base64 + b64array.charAt(enc1) + b64array.charAt(enc2) + b64array.charAt(enc3) + b64array.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return base64;\n    }\n}, null);\n\n_core2.default.StorageProviderBase.registerProvider(\"webApi\", _core2.default.storageProviders.webApi.webApiProvider);\n\n(0, _core.$C)('$data.storageProviders.webApi.webApiCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor() {\n        this.context = {};\n        this.provider = {};\n        //this.logicalType = null;\n        this.includes = null;\n        this.mainEntitySet = null;\n    },\n    compile: function compile(query) {\n\n        this.provider = query.context.storageProvider;\n        this.context = query.context;\n        this.mainEntitySet = query.context.getEntitySetFromElementType(query.defaultType);\n\n        var queryFragments = { urlText: \"\" };\n\n        this.Visit(query.expression, queryFragments);\n\n        query.modelBinderConfig = {};\n        var modelBinder = _core.Container.createModelBinderConfigCompiler(query, this.includes, true);\n        modelBinder.Visit(query.expression);\n\n        var queryText = queryFragments.urlText;\n        var addAmp = false;\n        for (var name in queryFragments) {\n            if (name != \"urlText\" && name != \"actionPack\" && name != \"data\" && name != \"lambda\" && name != \"method\" && queryFragments[name] != \"\") {\n                if (addAmp) {\n                    queryText += \"&\";\n                } else {\n                    queryText += \"?\";\n                }\n                addAmp = true;\n                if (name != \"$urlParams\") {\n                    queryText += name + '=' + queryFragments[name];\n                } else {\n                    queryText += queryFragments[name];\n                }\n            }\n        }\n        query.queryText = queryText;\n\n        return {\n            queryText: queryText,\n            method: queryFragments.method || 'GET',\n            params: []\n        };\n    },\n    VisitOrderExpression: function VisitOrderExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        var orderCompiler = _core.Container.createwebApiOrderCompiler(this.provider);\n        orderCompiler.compile(expression, context);\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        var pagingCompiler = _core.Container.createwebApiPagingCompiler();\n        pagingCompiler.compile(expression, context);\n    },\n    VisitIncludeExpression: function VisitIncludeExpression(expression, context) {\n        this.Visit(expression.source, context);\n        if (!context['$select']) {\n            if (context['$expand']) {\n                context['$expand'] += ',';\n            } else {\n                context['$expand'] = '';\n            }\n            context['$expand'] += expression.selector.value.replace(/\\./g, '/');\n\n            this.includes = this.includes || [];\n            var includeFragment = expression.selector.value.split('.');\n            var tempData = null;\n            var storageModel = this.mainEntitySet.entityContext._storageModel.getStorageModel(this.mainEntitySet.createNew);\n            for (var i = 0; i < includeFragment.length; i++) {\n                if (tempData) {\n                    tempData += '.' + includeFragment[i];\n                } else {\n                    tempData = includeFragment[i];\n                }\n                var association = storageModel.Associations[includeFragment[i]];\n                if (association) {\n                    if (!this.includes.some(function (include) {\n                        return include.name == tempData;\n                    }, this)) {\n                        this.includes.push({ name: tempData, type: association.ToType });\n                    }\n                } else {\n                    _core.Guard.raise(new _core.Exception(\"The given include path is invalid: \" + expression.selector.value + \", invalid point: \" + tempData));\n                }\n                storageModel = this.mainEntitySet.entityContext._storageModel.getStorageModel(association.ToType);\n            }\n        }\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        var projectionCompiler = _core.Container.createwebApiProjectionCompiler(this.context);\n        projectionCompiler.compile(expression, context);\n    },\n    VisitFilterExpression: function VisitFilterExpression(expression, context) {\n        ///<param name=\"expression\" type=\"$data.Expressions.FilterExpression\" />\n\n        this.Visit(expression.source, context);\n\n        var filterCompiler = _core.Container.createwebApiWhereCompiler(this.provider);\n        context.data = \"\";\n        filterCompiler.compile(expression.selector, context);\n        context[\"$filter\"] = context.data;\n        context.data = \"\";\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        context.urlText += \"/\" + expression.instance.tableName;\n        //this.logicalType = expression.instance.elementType;\n        if (expression.params) {\n            for (var i = 0; i < expression.params.length; i++) {\n                this.Visit(expression.params[i], context);\n            }\n        }\n    },\n    VisitServiceOperationExpression: function VisitServiceOperationExpression(expression, context) {\n        context.urlText += \"/\" + expression.cfg.serviceName;\n        //this.logicalType = expression.returnType;\n        if (expression.params) {\n            for (var i = 0; i < expression.params.length; i++) {\n                this.Visit(expression.params[i], context);\n            }\n        }\n    },\n    VisitBatchDeleteExpression: function VisitBatchDeleteExpression(expression, context) {\n        this.Visit(expression.source, context);\n        context.urlText += '/$batchDelete';\n        context.method = 'DELETE';\n    },\n\n    VisitConstantExpression: function VisitConstantExpression(expression, context) {\n        if (context['$urlParams']) {\n            context['$urlParams'] += '&';\n        } else {\n            context['$urlParams'] = '';\n        }\n\n        var typeName = _core.Container.resolveName(expression.type);\n        if (expression.value instanceof _core2.default.Entity) typeName = _core2.default.Entity.fullName;\n\n        var converter = this.provider.fieldConverter.toDb[typeName];\n        var value = converter ? converter(expression.value) : expression.value;\n\n        converter = this.provider.fieldConverter.escape[typeName];\n        value = converter ? converter(value) : value;\n\n        /*var value;\r\n        if (expression.value instanceof $data.Entity) {\r\n            value = this.provider.fieldConverter.toDb['$data.Entity'](expression.value);\r\n        } else {\r\n            //var valueType = Container.getTypeName(expression.value);\r\n            value = this.provider.fieldConverter.toDb[Container.resolveName(Container.resolveType(expression.type))](expression.value);\r\n        }*/\n        context['$urlParams'] += expression.name + '=' + value;\n    },\n    //    VisitConstantExpression: function (expression, context) {\n    //        if (context['$urlParams']) { context['$urlParams'] += '&'; } else { context['$urlParams'] = ''; }\n    //\n    //\n    //        var valueType = Container.getTypeName(expression.value);\n    //\n    //\n    //\n    //        context['$urlParams'] += expression.name + '=' + this.provider.fieldConverter.toDb[Container.resolveName(Container.resolveType(valueType))](expression.value);\n    //    },\n\n\n    VisitCountExpression: function VisitCountExpression(expression, context) {\n        this.Visit(expression.source, context);\n        context.urlText += '/$count';\n    }\n}, {});\n\n(0, _core.$C)('$data.storageProviders.webApi.webApiWhereCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(provider, lambdaPrefix) {\n        this.provider = provider;\n        this.lambdaPrefix = lambdaPrefix;\n    },\n\n    compile: function compile(expression, context) {\n        this.Visit(expression, context);\n    },\n\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, context) {\n        this.Visit(expression.expression, context);\n    },\n\n    VisitUnaryExpression: function VisitUnaryExpression(expression, context) {\n        context.data += expression.resolution.mapTo;\n        context.data += \"(\";\n        this.Visit(expression.operand, context);\n        context.data += \")\";\n    },\n\n    VisitSimpleBinaryExpression: function VisitSimpleBinaryExpression(expression, context) {\n        context.data += \"(\";\n        //TODO refactor!!!\n        if (expression.nodeType == \"in\") {\n            _core.Guard.requireType(\"expression.right\", expression.type, _core2.default.Expressions.ConstantExpression);\n            var paramValue = expression.right.value;\n            if (!(paramValue instanceof Array)) {\n                _core.Guard.raise(new _core.Exception(\"Right to the 'in' operator must be an array value\"));\n            }\n            var result = null;\n            var orResolution = { mapTo: \"or\", dataType: \"boolean\", name: \"or\" };\n            var eqResolution = { mapTo: \"eq\", dataType: \"boolean\", name: \"equal\" };\n\n            paramValue.forEach(function (item) {\n                var idValue = item;\n                var idCheck = _core.Container.createSimpleBinaryExpression(expression.left, idValue, _core2.default.Expressions.ExpressionType.Equal, \"==\", \"boolean\", eqResolution);\n                if (result) {\n                    result = _core.Container.createSimpleBinaryExpression(result, idCheck, _core2.default.Expressions.ExpressionType.Or, \"||\", \"boolean\", orResolution);\n                } else {\n                    result = idCheck;\n                };\n            });\n            var temp = context.data;\n            context.data = '';\n            this.Visit(result, context);\n            context.data = temp + context.data.replace(/\\(/g, '').replace(/\\)/g, '');\n        } else {\n            this.Visit(expression.left, context);\n            context.data += \" \";\n            context.data += expression.resolution.mapTo;\n            context.data += \" \";\n            this.Visit(expression.right, context);\n        };\n        context.data += \")\";\n    },\n\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, context) {\n        this.Visit(expression.source, context);\n        if (expression.source instanceof _core2.default.Expressions.ComplexTypeExpression) {\n            context.data += \"/\";\n        }\n        this.Visit(expression.selector, context);\n    },\n\n    VisitAssociationInfoExpression: function VisitAssociationInfoExpression(expression, context) {\n        context.data += expression.associationInfo.FromPropertyName;\n    },\n\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, context) {\n        context.data += expression.memberName;\n    },\n\n    VisitQueryParameterExpression: function VisitQueryParameterExpression(expression, context) {\n        //context.data += this.provider.fieldConverter.toDb[expression.type](expression.value);\n\n        var typeName = _core.Container.resolveName(expression.type);\n\n        var converter = this.provider.fieldConverter.toDb[typeName];\n        var value = converter ? converter(expression.value) : expression.value;\n\n        converter = this.provider.fieldConverter.escape[typeName];\n        context.data += converter ? converter(value) : value;\n    },\n\n    VisitEntityFieldOperationExpression: function VisitEntityFieldOperationExpression(expression, context) {\n        _core.Guard.requireType(\"expression.operation\", expression.operation, _core2.default.Expressions.MemberInfoExpression);\n\n        //TODO refactor!\n        var opDef = expression.operation.memberDefinition;\n        var opName = opDef.mapTo || opDef.name;\n        context.data += opName;\n        context.data += \"(\";\n        var paramCounter = 0;\n        var params = opDef.parameters || [{ name: \"@expression\" }];\n\n        var args = params.map(function (item, index) {\n            if (item.name === \"@expression\") {\n                return expression.source;\n            } else {\n                return expression.parameters[paramCounter++];\n            };\n        });\n\n        args.forEach(function (arg, index) {\n            if (index > 0) {\n                context.data += \",\";\n            };\n            this.Visit(arg, context);\n        }, this);\n        context.data += \")\";\n    },\n\n    VisitConstantExpression: function VisitConstantExpression(expression, context) {\n        //var valueType = Container.getTypeName(expression.value);\n        //context.data += this.provider.fieldConverter.toDb[Container.resolveName(Container.resolveType(expression.type))](expression.value);\n\n        var typeName = _core.Container.resolveName(expression.type);\n\n        var converter = this.provider.fieldConverter.toDb[typeName];\n        var value = converter ? converter(expression.value) : expression.value;\n\n        converter = this.provider.fieldConverter.escape[typeName];\n        context.data += converter ? converter(value) : value;\n    },\n\n    VisitEntityExpression: function VisitEntityExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        if (this.lambdaPrefix && expression.selector.lambda) {\n            context.lambda = expression.selector.lambda;\n            context.data += expression.selector.lambda + '/';\n        }\n\n        //if (expression.selector instanceof $data.Expressions.EntityExpression) {\n        //    this.Visit(expression.selector, context);\n        //}\n    },\n\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        this.Visit(expression.source, context);\n        if (expression.selector instanceof _core2.default.Expressions.AssociationInfoExpression) {\n            this.Visit(expression.selector, context);\n            context.data += \"/\";\n        }\n    },\n\n    VisitFrameOperationExpression: function VisitFrameOperationExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        _core.Guard.requireType(\"expression.operation\", expression.operation, _core2.default.Expressions.MemberInfoExpression);\n\n        //TODO refactor!\n        var opDef = expression.operation.memberDefinition;\n        var opName = opDef.mapTo || opDef.name;\n        context.data += opName;\n        context.data += \"(\";\n        var paramCounter = 0;\n        var params = opDef.parameters || [{ name: \"@expression\" }];\n\n        var args = params.map(function (item, index) {\n            if (item.name === \"@expression\") {\n                return expression.source;\n            } else {\n                return expression.parameters[paramCounter++];\n            };\n        });\n\n        for (var i = 0; i < args.length; i++) {\n            var arg = args[i];\n            if (arg && arg.value instanceof _core2.default.Queryable) {\n                var frameExpression = new opDef.frameType(arg.value.expression);\n                var preparator = _core.Container.createQueryExpressionCreator(arg.value.entityContext);\n                var prep_expression = preparator.Visit(frameExpression);\n\n                var compiler = new _core2.default.storageProviders.webApi.webApiWhereCompiler(this.provider, true);\n                var frameContext = { data: \"\" };\n                var compiled = compiler.compile(prep_expression, frameContext);\n\n                context.data += frameContext.lambda + ': ' + frameContext.data;\n            };\n        }\n        context.data += \")\";\n    }\n});\n\n(0, _core.$C)('$data.storageProviders.webApi.webApiOrderCompiler', _core2.default.storageProviders.webApi.webApiWhereCompiler, null, {\n    constructor: function constructor(provider) {\n        this.provider = provider;\n    },\n\n    compile: function compile(expression, context) {\n        this.Visit(expression, context);\n    },\n    VisitOrderExpression: function VisitOrderExpression(expression, context) {\n        var orderContext = { data: \"\" };\n        this.Visit(expression.selector, orderContext);\n        if (context['$orderby']) {\n            context['$orderby'] += ',';\n        } else {\n            context['$orderby'] = '';\n        }\n        context['$orderby'] += orderContext.data + (expression.nodeType == _core2.default.Expressions.ExpressionType.OrderByDescending ? \" desc\" : \"\");\n    },\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, context) {\n        this.Visit(expression.expression, context);\n    },\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, context) {\n        this.Visit(expression.source, context);\n        this.Visit(expression.selector, context);\n    },\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, context) {\n        this.Visit(expression.source, context);\n        this.Visit(expression.selector, context);\n        context.data += \"/\";\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        if (expression.selector instanceof _core2.default.Expressions.AssociationInfoExpression) {\n            this.Visit(expression.source, context);\n            this.Visit(expression.selector, context);\n        }\n    },\n    VisitAssociationInfoExpression: function VisitAssociationInfoExpression(expression, context) {\n        context.data += expression.associationInfo.FromPropertyName + '/';\n    },\n    VisitEntityExpression: function VisitEntityExpression(expression, context) {\n        this.Visit(expression.source, context);\n        this.Visit(expression.selector, context);\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, context) {\n        context.data += expression.memberName;\n    }\n});\n(0, _core.$C)('$data.storageProviders.webApi.webApiPagingCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(provider) {\n        this.provider = provider;\n    },\n\n    compile: function compile(expression, context) {\n        this.Visit(expression, context);\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, context) {\n        var pagingContext = { data: \"\" };\n        this.Visit(expression.amount, pagingContext);\n        switch (expression.nodeType) {\n            case _core2.default.Expressions.ExpressionType.Skip:\n                context['$skip'] = pagingContext.data;break;\n            case _core2.default.Expressions.ExpressionType.Take:\n                context['$top'] = pagingContext.data;break;\n            default:\n                _core.Guard.raise(\"Not supported nodeType\");break;\n        }\n    },\n    VisitConstantExpression: function VisitConstantExpression(expression, context) {\n        context.data += expression.value;\n    }\n});\n(0, _core.$C)('$data.storageProviders.webApi.webApiProjectionCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(entityContext) {\n        this.entityContext = entityContext;\n        this.hasObjectLiteral = false;\n        this.ObjectLiteralPath = \"\";\n        this.modelBinderMapping = [];\n    },\n\n    compile: function compile(expression, context) {\n        this.Visit(expression, context);\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, context) {\n        ///<summary></summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.ProjectionExpression\" mayBeNull=\"false\"></param>\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\n        context.data = \"\";\n        this.mapping = \"\";\n\n        this.Visit(expression.selector, context);\n        if (context['$select']) {\n            context['$select'] += ',';\n        } else {\n            context['$select'] = '';\n        }\n        context[\"$select\"] += context.data;\n        context.data = \"\";\n    },\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, context) {\n        this.Visit(expression.expression, context);\n        if (expression.expression instanceof _core2.default.Expressions.EntityExpression || expression.expression instanceof _core2.default.Expressions.EntitySetExpression) {\n            if (context['$expand']) {\n                context['$expand'] += ',';\n            } else {\n                context['$expand'] = '';\n            }\n            context['$expand'] += this.mapping.replace(/\\./g, '/');\n        }if (expression.expression instanceof _core2.default.Expressions.ComplexTypeExpression) {\n            var m = this.mapping.split('.');\n            m.pop();\n            if (m.length > 0) {\n                if (context['$expand']) {\n                    context['$expand'] += ',';\n                } else {\n                    context['$expand'] = '';\n                }\n                context['$expand'] += m.join('/');\n            }\n        } else {\n            var m = this.mapping.split('.');\n            m.pop();\n            if (m.length > 0) {\n                if (context['$expand']) {\n                    context['$expand'] += ',';\n                } else {\n                    context['$expand'] = '';\n                }\n                context['$expand'] += m.join('/');\n            }\n        }\n    },\n    VisitObjectLiteralExpression: function VisitObjectLiteralExpression(expression, context) {\n        ///<summary></summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.ObjectLiteralExpression\" mayBeNull=\"false\"></param>\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\n        var tempObjectLiteralPath = this.ObjectLiteralPath;\n        this.hasObjectLiteral = true;\n        expression.members.forEach(function (member, index) {\n            this.Visit(member, context);\n            if (index < expression.members.length - 1) {\n                context.data += ',';\n            }\n            this.mapping = '';\n        }, this);\n        this.ObjectLiteralPath = tempObjectLiteralPath;\n    },\n    VisitObjectFieldExpression: function VisitObjectFieldExpression(expression, context) {\n\n        if (this.ObjectLiteralPath) {\n            this.ObjectLiteralPath += '.' + expression.fieldName;\n        } else {\n            this.ObjectLiteralPath = expression.fieldName;\n        }\n        this.Visit(expression.expression, context);\n\n        if (expression.expression instanceof _core2.default.Expressions.EntityExpression || expression.expression instanceof _core2.default.Expressions.EntitySetExpression) {\n            if (context['$expand']) {\n                context['$expand'] += ',';\n            } else {\n                context['$expand'] = '';\n            }\n            context['$expand'] += this.mapping.replace(/\\./g, '/');\n        } else {\n            var m = this.mapping.split('.');\n            m.pop();\n            if (m.length > 0) {\n                if (context['$expand']) {\n                    context['$expand'] += ',';\n                } else {\n                    context['$expand'] = '';\n                }\n                context['$expand'] += m.join('/');\n            }\n        }\n    },\n\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, context) {\n        this.Visit(expression.source, context);\n        this.Visit(expression.selector, context);\n    },\n\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, context) {\n        this.Visit(expression.source, context);\n        this.Visit(expression.selector, context);\n    },\n    VisitEntityExpression: function VisitEntityExpression(expression, context) {\n        ///<summary></summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.EntityExpression\" mayBeNull=\"false\"></param>\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\n        this.Visit(expression.source, context);\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        ///<summary></summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.EntitySetExpression\" mayBeNull=\"false\"></param>\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\n        if (expression.source instanceof _core2.default.Expressions.EntityExpression) {\n            this.Visit(expression.source, context);\n        }\n        if (expression.selector instanceof _core2.default.Expressions.AssociationInfoExpression) {\n            this.Visit(expression.selector, context);\n        }\n    },\n    VisitAssociationInfoExpression: function VisitAssociationInfoExpression(expression, context) {\n        if (context.data && context.data.length > 0 && context.data[context.data.length - 1] != ',') {\n            context.data += '/';\n        }\n        context.data += expression.associationInfo.FromPropertyName;\n        if (this.mapping && this.mapping.length > 0) {\n            this.mapping += '.';\n        }\n        this.mapping += expression.associationInfo.FromPropertyName;\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, context) {\n        if (context.data && context.data.length > 0 && context.data[context.data.length - 1] != ',') {\n            context.data += '/';\n        }\n        context.data += expression.memberName;\n        if (this.mapping && this.mapping.length > 0) {\n            this.mapping += '.';\n        }\n        this.mapping += expression.memberName;\n    },\n    VisitConstantExpression: function VisitConstantExpression(expression, context) {\n        //Guard.raise(new Exception('Constant value is not supported in Projection.', 'Not supported!'));\n        //context.data += expression.value;\n        context.data = context.data.slice(0, context.data.length - 1);\n    }\n});\n\n},{\"jaydata/core\":\"jaydata/core\"}],3:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _WebApiConverter = _dereq_('./WebApiConverter.js');\n\nvar _WebApiConverter2 = _interopRequireDefault(_WebApiConverter);\n\nvar _WebApiProvider = _dereq_('./WebApiProvider.js');\n\nvar _WebApiProvider2 = _interopRequireDefault(_WebApiProvider);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _core2.default;\nmodule.exports = exports['default'];\n\n},{\"./WebApiConverter.js\":1,\"./WebApiProvider.js\":2,\"jaydata/core\":\"jaydata/core\"}]},{},[3])(3)\n});\n\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.WebApiConverter = {\r\n    fromDb: {\r\n        '$data.Byte': $data.Container.proxyConverter,\r\n        '$data.SByte': $data.Container.proxyConverter,\r\n        '$data.Decimal': $data.Container.proxyConverter,\r\n        '$data.Float': $data.Container.proxyConverter,\r\n        '$data.Int16': $data.Container.proxyConverter,\r\n        '$data.Int64': $data.Container.proxyConverter,\r\n\r\n        '$data.Integer': $data.Container.proxyConverter,//function (number) { return (typeof number === 'string' && /^\\d+$/.test(number)) ? parseInt(number) : number; },\r\n        '$data.Int32': $data.Container.proxyConverter,\r\n        '$data.Number': $data.Container.proxyConverter,\r\n        '$data.Date': function (dbData) {\r\n            if (dbData) {\r\n                if (dbData instanceof Date) {\r\n                    return dbData;\r\n                } else if (dbData.substring(0, 6) === '/Date(') {\r\n                    return new Date(parseInt(dbData.substr(6)));\r\n                } else {\r\n                    //ISODate without Z? Safari compatible with Z\r\n                    if (dbData.indexOf('Z') === -1 && !dbData.match('T.*[+-]'))\r\n                        dbData += 'Z';\r\n                    return new Date(dbData);\r\n                }\r\n            } else {\r\n                return dbData;\r\n            }\r\n        },\r\n        '$data.DateTimeOffset': function (dbData) {\r\n            if (dbData) {\r\n                if (dbData instanceof Date) {\r\n                    return dbData;\r\n                } else if (dbData.substring(0, 6) === '/Date(') {\r\n                    return new Date(parseInt(dbData.substr(6)));\r\n                } else {\r\n                    //ISODate without Z? Safari compatible with Z\r\n                    if (dbData.indexOf('Z') === -1 && !dbData.match('T.*[+-]'))\r\n                        dbData += 'Z';\r\n                    return new Date(dbData);\r\n                }\r\n            } else {\r\n                return dbData;\r\n            }\r\n        },\r\n        '$data.Time': $data.Container.proxyConverter,\r\n        '$data.String': $data.Container.proxyConverter,\r\n        '$data.Boolean': $data.Container.proxyConverter,\r\n        '$data.Blob': function (v) {\r\n            if (typeof v == 'string') {\r\n                try { return $data.Container.convertTo(atob(v), '$data.Blob'); }\r\n                catch (e) { return v; }\r\n            } else return v;\r\n        },\r\n        '$data.Object': function (o) { if (o === undefined) { return new $data.Object(); } else if (typeof o === 'string') { return JSON.parse(o); } return o; },\r\n        '$data.Array': function (o) { if (o === undefined) { return new $data.Array(); } else if (o instanceof $data.Array) { return o; } return JSON.parse(o); },\r\n        '$data.GeographyPoint': function (geo) {\r\n            if (geo && typeof geo === 'object' && Array.isArray(geo.coordinates)) {\r\n                return new $data.GeographyPoint(geo.coordinates);\r\n            }\r\n            return geo;\r\n        },\r\n        '$data.Guid': function (guid) { return guid ? guid.toString() : guid; }\r\n    },\r\n    toDb: {\r\n        '$data.Entity': $data.Container.proxyConverter,\r\n        '$data.Byte': $data.Container.proxyConverter,\r\n        '$data.SByte': $data.Container.proxyConverter,\r\n        '$data.Decimal': $data.Container.proxyConverter,\r\n        '$data.Float': $data.Container.proxyConverter,\r\n        '$data.Int16': $data.Container.proxyConverter,\r\n        '$data.Int64': $data.Container.proxyConverter,\r\n        '$data.ObjectID': $data.Container.proxyConverter,\r\n        '$data.Integer': $data.Container.proxyConverter,\r\n        '$data.Int32': $data.Container.proxyConverter,\r\n        '$data.Number': $data.Container.proxyConverter,\r\n        '$data.Date': function (e) { return e ? e.toISOString().replace('Z', '') : e; },\r\n        '$data.Time': $data.Container.proxyConverter,\r\n        '$data.DateTimeOffset': function (v) { return v ? v.toISOString() : v; },\r\n        '$data.String': $data.Container.proxyConverter,\r\n        '$data.Boolean': $data.Container.proxyConverter,\r\n        '$data.Blob': function (v) { return v ? $data.Blob.toBase64(v) : v; },\r\n        '$data.Object': $data.Container.proxyConverter,\r\n        '$data.Array': $data.Container.proxyConverter,\r\n        '$data.GeographyPoint': $data.Container.proxyConverter,\r\n        '$data.Guid': $data.Container.proxyConverter\r\n    },\r\n    escape: {\r\n        '$data.Entity': function (e) { return JSON.stringify(e); },\r\n        '$data.Integer': $data.Container.proxyConverter,\r\n        '$data.Int32': $data.Container.proxyConverter,\r\n        '$data.Number': $data.Container.proxyConverter, // double: 13.5D\r\n        '$data.Int16': $data.Container.proxyConverter,\r\n        '$data.Byte': $data.Container.proxyConverter,\r\n        '$data.SByte': $data.Container.proxyConverter,\r\n        '$data.Decimal': function (v) { return v ? v + 'm' : v; },\r\n        '$data.Float': function (v) { return v ? v + 'f' : v; },\r\n        '$data.Int64': function (v) { return v ? v + 'L' : v; },\r\n        '$data.Time': function (v) { return v ? \"time'\" + v + \"'\" : v; },\r\n        '$data.DateTimeOffset': function (date) { return date ? \"datetimeoffset'\" + date + \"'\" : date; },\r\n        '$data.Date': function (date) { return date ? \"datetime'\" + date + \"'\" : date; },\r\n        '$data.String': function (text) { return typeof text === 'string' ? \"'\" + text.replace(/'/g, \"''\") + \"'\" : text; },\r\n        '$data.ObjectID': function (text) { return typeof text === 'string' ? \"'\" + text.replace(/'/g, \"''\") + \"'\" : text; },\r\n        '$data.Boolean': function (bool) { return typeof bool === 'boolean' ? bool.toString() : bool; },\r\n        '$data.Blob': function (b) { return b ? \"X'\" + $data.Blob.toHexString($data.Container.convertTo(atob(b), $data.Blob)) + \"'\" : b; },\r\n        '$data.Object': function (o) { return JSON.stringify(o); },\r\n        '$data.Array': function (o) { return JSON.stringify(o); },\r\n        '$data.GeographyPoint': function (g) { if (g) { return $data.GeographyBase.stringifyToUrl(g); } return g; },\r\n        '$data.Guid': function (guid) { return guid ? (\"guid'\" + guid.toString() + \"'\") : guid; }\r\n    }\r\n};\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$C('$data.Expressions.ExpressionWalker', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (monitorDefinition) {\r\n        this.Visit = function (expression, context) {\r\n\r\n            var result = expression;\r\n            var methodName;\r\n            if (this.canVisit(expression)) {\r\n\r\n                //if (monitorDefinition.FilterExpressionNode) {\r\n\r\n                //};\r\n\r\n                if (monitorDefinition.VisitExpressionNode) {\r\n                    monitorDefinition.VisitExpressionNode.apply(monitorDefinition, arguments);\r\n                };\r\n\r\n                methodName = \"Visit\" + expression.getType().name;\r\n                if (methodName in monitorDefinition) {\r\n                    result = monitorDefinition[methodName].apply(monitorDefinition, arguments);\r\n                }\r\n            }\r\n\r\n\r\n            //apply is about 3-4 times faster then call on webkit\r\n\r\n            var args = arguments;\r\n            if (result !== expression) args = [result, context];\r\n            result = $data.Expressions.EntityExpressionVisitor.prototype.Visit.apply(this, args);\r\n\r\n            args = [result, context];\r\n\r\n            if (this.canVisit(result)) {\r\n                var expressionTypeName = result.getType().name;\r\n                if (monitorDefinition.MonitorExpressionNode) {\r\n                    monitorDefinition.MonitorExpressionNode.apply(monitorDefinition, args);\r\n                }\r\n                methodName = \"Monitor\" + expressionTypeName;\r\n                if (methodName in monitorDefinition) {\r\n                    monitorDefinition[methodName].apply(monitorDefinition, args);\r\n                }\r\n\r\n                if (monitorDefinition.MutateExpressionNode) {\r\n                    monitorDefinition.MutateExpressionNode.apply(monitorDefinition, args);\r\n                }\r\n                methodName = \"Mutate\" + expressionTypeName;\r\n                if (methodName in monitorDefinition) {\r\n                    result = monitorDefinition[methodName].apply(monitorDefinition, args);\r\n                }\r\n\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n});\r\n$data.Expressions.ExpressionNode.prototype.walk = function (monitorDefinition, context) {\r\n    var m = Container.createExpressionWalker(monitorDefinition);\r\n    return m.Visit(this, context);\r\n};\r\n\r\n$data.Expressions.ExpressionNode.prototype.dig = function (predicate) {\r\n    var result = [];\r\n    this.walk({\r\n        MonitorExpressionNode: function (exp) {\r\n            var value;\r\n            if (value = predicate(exp)) {\r\n                result.push(value);\r\n            }\r\n        }\r\n    });\r\n    return result;\r\n}\r\n\r\n$C('$data.storageProviders.webApi.webApiProvider', $data.StorageProviderBase, null,\r\n{\r\n    constructor: function (cfg, ctx) {\r\n        this.context = ctx;\r\n        this.providerConfiguration = $data.typeSystem.extend({\r\n            dbCreation: $data.storageProviders.DbCreationType.DropTableIfChanged,\r\n            apiUrl: \"/odata.svc\",\r\n            serviceUrl: \"\",\r\n            maxDataServiceVersion: '2.0',\r\n            user: null,\r\n            password: null,\r\n            withCredentials: false,\r\n            enableJSONP: false\r\n            //disableBatch: undefined\r\n        }, cfg);\r\n        if (this.context && this.context._buildDbType_generateConvertToFunction && this.buildDbType_generateConvertToFunction) {\r\n            this.context._buildDbType_generateConvertToFunction = this.buildDbType_generateConvertToFunction;\r\n        }\r\n        if (this.context && this.context._buildDbType_modifyInstanceDefinition && this.buildDbType_modifyInstanceDefinition) {\r\n            this.context._buildDbType_modifyInstanceDefinition = this.buildDbType_modifyInstanceDefinition;\r\n        }\r\n    },\r\n    initializeStore: function (callBack) {\r\n        callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\r\n        callBack.success(this.context);\r\n    },\r\n    buildDbType_generateConvertToFunction: function (storageModel, context) {\r\n        return function (logicalEntity, convertedItems) {\r\n            var dbInstance = new storageModel.PhysicalType();\r\n            dbInstance.entityState = logicalEntity.entityState;\r\n\r\n            storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (property) {\r\n                dbInstance.initData[property.name] = logicalEntity[property.name];\r\n            }, this);\r\n\r\n            if (storageModel.Associations) {\r\n                storageModel.Associations.forEach(function (association) {\r\n                    if ((association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\") ||\r\n                        (association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\") ||\r\n                        (association.FromMultiplicity == '$$unbound')) {\r\n                        var refValue = logicalEntity[association.FromPropertyName];\r\n                        if (refValue !== null && refValue !== undefined) {\r\n                            if (refValue instanceof $data.Array) {\r\n                                dbInstance.initData[association.FromPropertyName] = dbInstance[association.FromPropertyName] || [];\r\n                                refValue.forEach(function (rv) {\r\n                                    var contentId = convertedItems.indexOf(rv);\r\n                                    if (contentId < 0) { Guard.raise(\"Dependency graph error\"); }\r\n                                    dbInstance.initData[association.FromPropertyName].push({ __metadata: { uri: \"$\" + (contentId + 1) } });\r\n                                }, this);\r\n                            } else {\r\n                                if (refValue.entityState === $data.EntityState.Modified) {\r\n                                    var sMod = context._storageModel.getStorageModel(refValue.getType())\r\n                                    var tblName = sMod.TableName;\r\n                                    var pk = '(' + context.storageProvider.getEntityKeysValue({ data: refValue, entitySet: context.getEntitySetFromElementType(refValue.getType()) }) + ')';\r\n                                    dbInstance.initData[association.FromPropertyName] = { __metadata: { uri: tblName + pk } };\r\n                                } else {\r\n                                    var contentId = convertedItems.indexOf(refValue);\r\n                                    if (contentId < 0) { Guard.raise(\"Dependency graph error\"); }\r\n                                    dbInstance.initData[association.FromPropertyName] = { __metadata: { uri: \"$\" + (contentId + 1) } };\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }, this);\r\n            }\r\n            if (storageModel.ComplexTypes) {\r\n                storageModel.ComplexTypes.forEach(function (cmpType) {\r\n                    dbInstance.initData[cmpType.FromPropertyName] = logicalEntity[cmpType.FromPropertyName];\r\n                }, this);\r\n            }\r\n            return dbInstance;\r\n        };\r\n    },\r\n    buildDbType_modifyInstanceDefinition: function () { return; },\r\n    executeQuery: function (query, callBack) {\r\n        callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\r\n\r\n\r\n        var result;\r\n        try {\r\n            result = this._compile(query);\r\n        } catch (e) {\r\n            callBack.error(e);\r\n            return;\r\n        }\r\n        var schema = this.context;\r\n        //console.dir(expressionTree);\r\n        //console.log(query.expression.walk);\r\n        function checkForRead(query) {\r\n\r\n            var ex = $data.Expressions;\r\n            var bincount = 0;\r\n            var eqbins = query.expression.dig(function (exp) {\r\n                if (exp instanceof ex.SimpleBinaryExpression) {\r\n                    bincount++;\r\n                }\r\n                if (exp.nodeType == \"equal\") {\r\n                    var constExp = null;\r\n                    var fieldExp = null;\r\n                    if (exp.left instanceof ex.ConstantExpression) constExp = exp.left;\r\n                    if (exp.left instanceof ex.EntityFieldExpression) fieldExp = exp.left;\r\n                    if (exp.right instanceof ex.ConstantExpression) constExp = exp.right;\r\n                    if (exp.right instanceof ex.EntityFieldExpression) fieldExp = exp.right;\r\n                    if (fieldExp && constExp) {\r\n\r\n                        if (fieldExp.source.entityType === query.defaultType &&\r\n                            fieldExp.selector.memberName == query.defaultType.memberDefinitions.getKeyProperties()[0].name\r\n                            ) {\r\n                            return constExp.value;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            if (bincount == 1 && eqbins.length == 1) {\r\n                result.queryText = \"/\" + query.context.getEntitySetFromElementType(query.defaultType).tableName + \"/\" + eqbins[0].toString();\r\n            };\r\n            //query.w\r\n        }\r\n        checkForRead(query);\r\n\r\n        var request = {\r\n            url: this.providerConfiguration.apiUrl + result.queryText,\r\n            type: result.method,\r\n            success: function (data) {\r\n                if (callBack.success) {\r\n                    query.rawDataList = typeof data === 'string' ? [{ cnt: data }] : data;\r\n                    callBack.success(query);\r\n                }\r\n            },\r\n            error: function () {\r\n                console.dir(arguments);\r\n                callBack.error(arguments);\r\n                //callBack.error(errorThrow || new Exception('Request failed', 'RequestError', arguments));\r\n            }\r\n        };\r\n\r\n        this.appendBasicAuth(request, this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\r\n\r\n        this.context.prepareRequest.call(this, request);\r\n        $data.ajax(request);\r\n    },\r\n    _compile: function (queryable, params) {\r\n        var compiler = new $data.storageProviders.webApi.webApiCompiler();\r\n        var compiled = compiler.compile(queryable);\r\n        return compiled;\r\n    },\r\n    saveChanges: function (callBack, changedItems) {\r\n        if (changedItems.length > 0) {\r\n            var independentBlocks = this.buildIndependentBlocks(changedItems);\r\n            this.saveInternal(independentBlocks, 0, callBack);\r\n        }\r\n        else {\r\n            callBack.success(0);\r\n        }\r\n    },\r\n    saveInternal: function (independentBlocks, index2, callBack) {\r\n        if ((this.providerConfiguration.disableBatch === true || (typeof $data.defaults === 'object' && $data.defaults.disableBatch === true))\r\n            && typeof this._saveRestMany === 'function')\r\n        {\r\n            this._saveRestMany(independentBlocks, index2, callBack);\r\n        } else {\r\n            if (independentBlocks.length > 1 || (independentBlocks.length == 1 && independentBlocks[0].length > 1)) {\r\n                this._saveBatch(independentBlocks, index2, callBack);\r\n            } else {\r\n                this._saveRest(independentBlocks, index2, callBack);\r\n            }\r\n        }\r\n    },\r\n    _saveRest: function (independentBlocks, index2, callBack) {\r\n        var batchRequests = [];\r\n        var convertedItem = [];\r\n        var request;\r\n        for (var index = 0; index < independentBlocks.length; index++) {\r\n            for (var i = 0; i < independentBlocks[index].length; i++) {\r\n                convertedItem.push(independentBlocks[index][i].data);\r\n                request = {\r\n                    url: this.providerConfiguration.apiUrl + '/',\r\n                    headers: {},\r\n                    contentType: \"application/json\",\r\n                    dataType: \"json\"\r\n                };\r\n\r\n                //request.headers = { \"Content-Id\": convertedItem.length };\r\n                switch (independentBlocks[index][i].data.entityState) {\r\n                    case $data.EntityState.Unchanged: continue; break;\r\n                    case $data.EntityState.Added:\r\n                        request.type = \"POST\";\r\n                        request.url += independentBlocks[index][i].entitySet.tableName;\r\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\r\n                        break;\r\n                    case $data.EntityState.Modified:\r\n                        request.type = \"PUT\";\r\n                        request.url += independentBlocks[index][i].entitySet.tableName;\r\n                        request.url += \"/\" + this.getEntityKeysValue(independentBlocks[index][i]);\r\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\r\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\r\n                        break;\r\n                    case $data.EntityState.Deleted:\r\n                        request.type = \"DELETE\";\r\n                        request.url += independentBlocks[index][i].entitySet.tableName;\r\n                        request.url += \"/\" + this.getEntityKeysValue(independentBlocks[index][i]);\r\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\r\n                        break;\r\n                    default: Guard.raise(new Exception(\"Not supported Entity state\"));\r\n                }\r\n                if (request.data) {\r\n                    request.data = JSON.stringify(request.data);\r\n                }\r\n                //batchRequests.push(request);\r\n            }\r\n        }\r\n        var that = this;\r\n\r\n        request.success = function (data, status, xhr) {\r\n            var arg = arguments;\r\n            var s = xhr.status;\r\n            if (s >= 200 && s < 300) {\r\n\r\n                if (data) {\r\n                    var item = convertedItem[0];\r\n                    item.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n                        var propType = Container.resolveType(memDef.type);\r\n                        if (memDef.computed || memDef.key || (!propType.isAssignableTo && !memDef.inverseProperty)) {\r\n                            //if (memDef.concurrencyMode === $data.ConcurrencyMode.Fixed) {\r\n                            //    item[memDef.name] = response.headers.ETag || response.headers.Etag;\r\n                            //} else {\r\n                            var converter = that.fieldConverter.fromDb[Container.resolveName(memDef.type)];\r\n                            item[memDef.name] = converter ? converter(data[memDef.name]) : data[memDef.name];\r\n                            //}\r\n                        }\r\n                    }, this);\r\n                }\r\n                //if (s == 204) {\r\n                //    //TODO versioning/ETag\r\n                //    if (response.headers.ETag || response.headers.Etag) {\r\n                //        var property = item.getType().memberDefinitions.getPublicMappedProperties().filter(function (memDef) { return memDef.concurrencyMode === $data.ConcurrencyMode.Fixed });\r\n                //        if (property && property[0]) {\r\n                //            item[property[0].name] = response.headers.ETag || response.headers.Etag;\r\n                //        }\r\n                //    }\r\n\r\n                //} else {\r\n                //    //its optional to send back content from webapi\r\n                //    if (data) {\r\n                //        //item.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n                //        //    if (memDef.computed || memDef.key) {\r\n                //        //        if (memDef.concurrencyMode === $data.ConcurrencyMode.Fixed) {\r\n                //        //            item[memDef.name] = response.headers.ETag || response.headers.Etag;\r\n                //        //        } else {\r\n                //        //            var converter = that.fieldConverter.fromDb[Container.resolveType(memDef.type)];\r\n                //        //            item[memDef.name] = converter ? converter(data[memDef.name]) : data[memDef.name];\r\n                //        //        }\r\n                //        //    }\r\n                //        //}, this);\r\n                //        //item.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n                //        //    var propType = Container.resolveType(memDef.type);\r\n                //        //    if (memDef.computed || memDef.key || (!propType.isAssignableTo && !memDef.inverseProperty)) {\r\n                //        //        if (memDef.concurrencyMode === $data.ConcurrencyMode.Fixed) {\r\n                //        //            item[memDef.name] = response.headers.ETag || response.headers.Etag;\r\n                //        //        } else {\r\n                //        //            var converter = that.fieldConverter.fromDb[Container.resolveName(memDef.type)];\r\n                //        //            item[memDef.name] = converter ? converter(data[memDef.name]) : data[memDef.name];\r\n                //        //        }\r\n                //        //    }\r\n                //        //}, this);\r\n                //    }\r\n                //}\r\n\r\n                if (callBack.success) {\r\n                    callBack.success(convertedItem.length);\r\n                }\r\n            } else {\r\n                callBack.error(response);\r\n            }\r\n\r\n        }\r\n        request.error = function (e) {\r\n            callBack.error(new Exception((e.response || {}).body, e.message, e));\r\n        }\r\n\r\n        this.appendBasicAuth(request, this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\r\n        //if (this.providerConfiguration.user) {\r\n        //    requestData[0].user = this.providerConfiguration.user;\r\n        //    requestData[0].password = this.providerConfiguration.password || \"\";\r\n        //}\r\n\r\n        this.context.prepareRequest.call(this, request);\r\n        $data.ajax(request);\r\n        //OData.request.apply(this, requestData);\r\n    },\r\n    _saveBatch: function (independentBlocks, index2, callBack) {\r\n        var batchRequests = [];\r\n        var convertedItem = [];\r\n        for (var index = 0; index < independentBlocks.length; index++) {\r\n            for (var i = 0; i < independentBlocks[index].length; i++) {\r\n                convertedItem.push(independentBlocks[index][i].data);\r\n                var request = {};\r\n                request.headers = { \"Content-Id\": convertedItem.length };\r\n                switch (independentBlocks[index][i].data.entityState) {\r\n                    case $data.EntityState.Unchanged: continue; break;\r\n                    case $data.EntityState.Added:\r\n                        request.method = \"POST\";\r\n                        request.requestUri = independentBlocks[index][i].entitySet.tableName;\r\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\r\n                        break;\r\n                    case $data.EntityState.Modified:\r\n                        request.method = \"MERGE\";\r\n                        request.requestUri = independentBlocks[index][i].entitySet.tableName;\r\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\r\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\r\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\r\n                        break;\r\n                    case $data.EntityState.Deleted:\r\n                        request.method = \"DELETE\";\r\n                        request.requestUri = independentBlocks[index][i].entitySet.tableName;\r\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\r\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\r\n                        break;\r\n                    default: Guard.raise(new Exception(\"Not supported Entity state\"));\r\n                }\r\n                batchRequests.push(request);\r\n            }\r\n        }\r\n        var that = this;\r\n\r\n        var requestData = [{\r\n            requestUri: this.providerConfiguration.apiUrl + \"/$batch\",\r\n            method: \"POST\",\r\n            data: {\r\n                __batchRequests: [{ __changeRequests: batchRequests }]\r\n            }\r\n        }, function (data, response) {\r\n            if (response.statusCode == 202) {\r\n                var result = data.__batchResponses[0].__changeResponses;\r\n                var errors = [];\r\n\r\n                for (var i = 0; i < result.length; i++) {\r\n                    if (result[i].statusCode > 200 && result[i].statusCode < 300) {\r\n                        var item = convertedItem[i];\r\n                        if (result[i].statusCode == 204) {\r\n                            if (result[i].headers.ETag || result[i].headers.Etag || result[i].headers.etag) {\r\n                                var property = item.getType().memberDefinitions.getPublicMappedProperties().filter(function (memDef) { return memDef.concurrencyMode === $data.ConcurrencyMode.Fixed });\r\n                                if (property && property[0]) {\r\n                                    item[property[0].name] = result[i].headers.ETag || result[i].headers.Etag || result[i].headers.etag;\r\n                                }\r\n                            }\r\n                            continue;\r\n                        }\r\n\r\n                        item.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n                            //TODO: is this correct?\r\n                            if (memDef.computed || memDef.key) {\r\n                                if (memDef.concurrencyMode === $data.ConcurrencyMode.Fixed) {\r\n                                    item[memDef.name] = result[i].headers.ETag || result[i].headers.Etag || result[i].headers.etag;\r\n                                } else {\r\n                                    var converter = that.fieldConverter.fromDb[Container.resolveType(memDef.type)];\r\n                                    item[memDef.name] = converter ? converter(result[i].data[memDef.name]) : result[i].data[memDef.name];\r\n                                }\r\n                            }\r\n                        }, this);\r\n\r\n                    } else {\r\n                        errors.push(new Exception((result[i].response || {}).body, result[i].message, result[i]));\r\n                    }\r\n                }\r\n                if (errors.length > 0) {\r\n                    callBack.error(new Exception('See inner exceptions', 'Batch failed', errors));\r\n                } else if (callBack.success) {\r\n                    callBack.success(convertedItem.length);\r\n                }\r\n            } else {\r\n                callBack.error(response);\r\n            }\r\n\r\n        }, function (e) {\r\n            callBack.error(new Exception((e.response || {}).body, e.message, e));\r\n        }, OData.batchHandler];\r\n\r\n        this.appendBasicAuth(requestData[0], this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\r\n        //if (this.providerConfiguration.user) {\r\n        //    requestData[0].user = this.providerConfiguration.user;\r\n        //    requestData[0].password = this.providerConfiguration.password || \"\";\r\n        //}\r\n\r\n        this.context.prepareRequest.call(this, requestData);\r\n        OData.request.apply(this, requestData);\r\n    },\r\n    save_getInitData: function (item, convertedItems) {\r\n        item.physicalData = this.context._storageModel.getStorageModel(item.data.getType()).PhysicalType.convertTo(item.data, convertedItems);\r\n        var serializableObject = {}\r\n        item.physicalData.getType().memberDefinitions.asArray().forEach(function (memdef) {\r\n            if (memdef.kind == $data.MemberTypes.navProperty ||\r\n                memdef.kind == $data.MemberTypes.complexProperty ||\r\n\r\n                (memdef.kind == $data.MemberTypes.property && !memdef.notMapped)) {\r\n                //if (typeof memdef.concurrencyMode === 'undefined' &&\r\n                //    (memdef.key === true || item.data.entityState === $data.EntityState.Added ||\r\n                //    item.data.changedProperties.some(function (def) { return def.name === memdef.name; }))\r\n                //)\r\n                serializableObject[memdef.name] = item.physicalData[memdef.name];\r\n            }\r\n        }, this);\r\n        return serializableObject;\r\n    },\r\n    save_addConcurrencyHeader: function (item, headers) {\r\n        var property = item.data.getType().memberDefinitions.getPublicMappedProperties().filter(function (memDef) { return memDef.concurrencyMode === $data.ConcurrencyMode.Fixed });\r\n        if (property && property[0]) {\r\n            headers['If-Match'] = item.data[property[0].name];\r\n            //item.data[property[0].name] = \"\";\r\n        }\r\n    },\r\n    getTraceString: function (queryable) {\r\n        var sqlText = this._compile(queryable);\r\n        return queryable;\r\n    },\r\n    supportedDataTypes: { value: [$data.Integer, $data.String, $data.Number, $data.Blob, $data.Boolean, $data.Date, $data.Object, $data.GeographyPoint, $data.Guid,\r\n        $data.Byte, $data.SByte, $data.Decimal, $data.Float, $data.Int16, $data.Int32, $data.Int64, $data.Time, $data.DateTimeOffset], writable: false },\r\n\r\n    supportedBinaryOperators: {\r\n        value: {\r\n            equal: { mapTo: 'eq', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            notEqual: { mapTo: 'ne', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            equalTyped: { mapTo: 'eq', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            notEqualTyped: { mapTo: 'ne', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            greaterThan: { mapTo: 'gt', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            greaterThanOrEqual: { mapTo: 'ge', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n\r\n            lessThan: { mapTo: 'lt', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            lessThenOrEqual: { mapTo: 'le', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            or: { mapTo: 'or', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            and: { mapTo: 'and', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n\r\n            add: { mapTo: 'add', dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            divide: { mapTo: 'div', allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            multiply: { mapTo: 'mul', allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            subtract: { mapTo: 'sub', allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            modulo: { mapTo: 'mod', allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n\r\n            \"in\": { mapTo: \"in\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] }\r\n        }\r\n    },\r\n\r\n    supportedUnaryOperators: {\r\n        value: {\r\n            not: { mapTo: 'not' }\r\n        }\r\n    },\r\n\r\n    supportedFieldOperations: {\r\n        value: {\r\n            /* string functions */\r\n\r\n            contains: {\r\n                mapTo: \"substringof\",\r\n                dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"substring\", dataType: \"string\" }, { name: \"@expression\" }]\r\n            },\r\n\r\n            startsWith: {\r\n                mapTo: \"startswith\",\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\r\n            },\r\n\r\n            endsWith: {\r\n                mapTo: \"endswith\",\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\r\n            },\r\n\r\n            length: {\r\n                dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.ProjectionExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\r\n            },\r\n            strLength: {\r\n                mapTo: \"length\",\r\n                dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.ProjectionExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\r\n            },\r\n\r\n            indexOf: {\r\n                dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                mapTo: \"indexof\",\r\n                baseIndex: 1,\r\n                parameters: [{ name: '@expression', dataType: \"string\" }, { name: 'strFragment', dataType: 'string' }]\r\n            },\r\n\r\n            replace: {\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: '@expression', dataType: \"string\" }, { name: 'strFrom', dataType: 'string' }, { name: 'strTo', dataType: 'string' }]\r\n            },\r\n\r\n            substr: {\r\n                mapTo: \"substring\",\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\", optional: \"true\" }]\r\n            },\r\n\r\n            toLowerCase: {\r\n                mapTo: \"tolower\",\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\r\n            },\r\n\r\n            toUpperCase: {\r\n                mapTo: \"toupper\",\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\r\n\r\n            },\r\n\r\n            trim: {\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\r\n            },\r\n\r\n\r\n            concat: {\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\r\n            },\r\n\r\n\r\n            /* data functions */\r\n\r\n            day: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            hour: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            minute: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            month: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            second: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            year: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n\r\n            /* number functions */\r\n            round: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            floor: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            ceiling: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n    supportedSetOperations: {\r\n        value: {\r\n            filter: {},\r\n            map: {},\r\n            length: {},\r\n            forEach: {},\r\n            toArray: {},\r\n            single: {},\r\n            some: {\r\n                invokable: false,\r\n                allowedIn: [$data.Expressions.FilterExpression],\r\n                parameters: [{ name: \"filter\", dataType: \"$data.Queryable\" }],\r\n                mapTo: 'any',\r\n                frameType: $data.Expressions.SomeExpression\r\n            },\r\n            every: {\r\n                invokable: false,\r\n                allowedIn: [$data.Expressions.FilterExpression],\r\n                parameters: [{ name: \"filter\", dataType: \"$data.Queryable\" }],\r\n                mapTo: 'all',\r\n                frameType: $data.Expressions.EveryExpression\r\n            },\r\n            take: {},\r\n            skip: {},\r\n            orderBy: {},\r\n            orderByDescending: {},\r\n            first: {},\r\n            include: {},\r\n            batchDelete: {}\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n    fieldConverter: { value: $data.WebApiConverter },\r\n    getEntityKeysValue: function (entity) {\r\n        var result = [];\r\n        var keyValue = undefined;\r\n\r\n        var memDefs = entity.entitySet.createNew.memberDefinitions.asArray();\r\n        for (var i = 0, l = memDefs.length; i < l; i++) {\r\n            var field = memDefs[i];\r\n            if (field.key) {\r\n                keyValue = entity.data[field.name];\r\n                switch (Container.getName(field.originalType)) {\r\n                    case \"$data.Guid\":\r\n                    case \"Edm.Guid\":\r\n                        keyValue = (\"guid'\" + (keyValue ? keyValue.value : keyValue) + \"'\");\r\n                        break;\r\n                    case \"$data.Blob\":\r\n                    case \"Edm.Binary\":\r\n                        keyValue = (\"binary'\" + keyValue + \"'\");\r\n                        break;\r\n                    case \"Edm.Byte\":\r\n                        var hexDigits = '0123456789ABCDEF';\r\n                        keyValue = (hexDigits[(i >> 4) & 15] + hexDigits[i & 15]);\r\n                        break;\r\n                    case \"$data.Date\":\r\n                    case \"Edm.DateTime\":\r\n                        keyValue = (\"datetime'\" + keyValue.toISOString() + \"'\");\r\n                        break;\r\n                    case \"Edm.Decimal\":\r\n                        keyValue = (keyValue + \"M\");\r\n                        break;\r\n                    case \"Edm.Single\":\r\n                        keyValue = (keyValue + \"f\");\r\n                        break;\r\n                    case \"Edm.Int64\":\r\n                        keyValue = (keyValue + \"L\");\r\n                        break;\r\n                    case 'Edm.String':\r\n                    case \"$data.String\":\r\n                        keyValue = (\"'\" + keyValue + \"'\");\r\n                        break;\r\n                }\r\n                result.push(field.name + \"=\" + keyValue);\r\n            }\r\n        }\r\n        if (result.length > 1) {\r\n            return result.join(\",\");\r\n        }\r\n        return keyValue;\r\n    },\r\n    appendBasicAuth: function (request, user, password, withCredentials) {\r\n        request.headers = request.headers || {};\r\n        if (!request.headers.Authorization && user && password) {\r\n            request.headers.Authorization = \"Basic \" + this.__encodeBase64(user + \":\" + password);\r\n            request.withCredentials = withCredentials;\r\n        }\r\n    },\r\n    __encodeBase64: function (val) {\r\n        var b64array = \"ABCDEFGHIJKLMNOP\" +\r\n                           \"QRSTUVWXYZabcdef\" +\r\n                           \"ghijklmnopqrstuv\" +\r\n                           \"wxyz0123456789+/\" +\r\n                           \"=\";\r\n\r\n        var input = val;\r\n        var base64 = \"\";\r\n        var hex = \"\";\r\n        var chr1, chr2, chr3 = \"\";\r\n        var enc1, enc2, enc3, enc4 = \"\";\r\n        var i = 0;\r\n\r\n        do {\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n\r\n            base64 = base64 +\r\n                        b64array.charAt(enc1) +\r\n                        b64array.charAt(enc2) +\r\n                        b64array.charAt(enc3) +\r\n                        b64array.charAt(enc4);\r\n            chr1 = chr2 = chr3 = \"\";\r\n            enc1 = enc2 = enc3 = enc4 = \"\";\r\n        } while (i < input.length);\r\n\r\n        return base64;\r\n    }\r\n}, null);\r\n\r\n$data.StorageProviderBase.registerProvider(\"webApi\", $data.storageProviders.webApi.webApiProvider);\r\n\r\n$C('$data.storageProviders.webApi.webApiCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function () {\r\n        this.context = {};\r\n        this.provider = {};\r\n        //this.logicalType = null;\r\n        this.includes = null;\r\n        this.mainEntitySet = null;\r\n    },\r\n    compile: function (query) {\r\n\r\n        this.provider = query.context.storageProvider;\r\n        this.context = query.context;\r\n        this.mainEntitySet = query.context.getEntitySetFromElementType(query.defaultType);\r\n\r\n        var queryFragments = { urlText: \"\" };\r\n\r\n        this.Visit(query.expression, queryFragments);\r\n\r\n        query.modelBinderConfig = {};\r\n        var modelBinder = Container.createModelBinderConfigCompiler(query, this.includes, true);\r\n        modelBinder.Visit(query.expression);\r\n\r\n\r\n        var queryText = queryFragments.urlText;\r\n        var addAmp = false;\r\n        for (var name in queryFragments) {\r\n            if (name != \"urlText\" && name != \"actionPack\" && name != \"data\" && name != \"lambda\" && name != \"method\" && queryFragments[name] != \"\") {\r\n                if (addAmp) { queryText += \"&\"; } else { queryText += \"?\"; }\r\n                addAmp = true;\r\n                if (name != \"$urlParams\") {\r\n                    queryText += name + '=' + queryFragments[name];\r\n                } else {\r\n                    queryText += queryFragments[name];\r\n                }\r\n            }\r\n        }\r\n        query.queryText = queryText;\r\n\r\n        return {\r\n            queryText: queryText,\r\n            method: queryFragments.method || 'GET',\r\n            params: []\r\n        };\r\n    },\r\n    VisitOrderExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n\r\n        var orderCompiler = Container.createwebApiOrderCompiler(this.provider);\r\n        orderCompiler.compile(expression, context);\r\n    },\r\n    VisitPagingExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n\r\n        var pagingCompiler = Container.createwebApiPagingCompiler();\r\n        pagingCompiler.compile(expression, context);\r\n    },\r\n    VisitIncludeExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        if (!context['$select']) {\r\n            if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n            context['$expand'] += expression.selector.value.replace(/\\./g, '/');\r\n\r\n            this.includes = this.includes || [];\r\n            var includeFragment = expression.selector.value.split('.');\r\n            var tempData = null;\r\n            var storageModel = this.mainEntitySet.entityContext._storageModel.getStorageModel(this.mainEntitySet.createNew);\r\n            for (var i = 0; i < includeFragment.length; i++) {\r\n                if (tempData) { tempData += '.' + includeFragment[i]; } else { tempData = includeFragment[i]; }\r\n                var association = storageModel.Associations[includeFragment[i]];\r\n                if (association) {\r\n                    if (!this.includes.some(function (include) { return include.name == tempData }, this)) {\r\n                        this.includes.push({ name: tempData, type: association.ToType });\r\n                    }\r\n                }\r\n                else {\r\n                    Guard.raise(new Exception(\"The given include path is invalid: \" + expression.selector.value + \", invalid point: \" + tempData));\r\n                }\r\n                storageModel = this.mainEntitySet.entityContext._storageModel.getStorageModel(association.ToType);\r\n            }\r\n        }\r\n    },\r\n    VisitProjectionExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n\r\n        var projectionCompiler = Container.createwebApiProjectionCompiler(this.context);\r\n        projectionCompiler.compile(expression, context);\r\n    },\r\n    VisitFilterExpression: function (expression, context) {\r\n        ///<param name=\"expression\" type=\"$data.Expressions.FilterExpression\" />\r\n\r\n        this.Visit(expression.source, context);\r\n\r\n        var filterCompiler = Container.createwebApiWhereCompiler(this.provider);\r\n        context.data = \"\";\r\n        filterCompiler.compile(expression.selector, context);\r\n        context[\"$filter\"] = context.data;\r\n        context.data = \"\";\r\n\r\n    },\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        context.urlText += \"/\" + expression.instance.tableName;\r\n        //this.logicalType = expression.instance.elementType;\r\n        if (expression.params) {\r\n            for (var i = 0; i < expression.params.length; i++) {\r\n                this.Visit(expression.params[i], context);\r\n            }\r\n        }\r\n    },\r\n    VisitServiceOperationExpression: function (expression, context) {\r\n        context.urlText += \"/\" + expression.cfg.serviceName;\r\n        //this.logicalType = expression.returnType;\r\n        if (expression.params) {\r\n            for (var i = 0; i < expression.params.length; i++) {\r\n                this.Visit(expression.params[i], context);\r\n            }\r\n        }\r\n    },\r\n    VisitBatchDeleteExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        context.urlText += '/$batchDelete';\r\n        context.method = 'DELETE';\r\n    },\r\n\r\n    VisitConstantExpression: function (expression, context) {\r\n        if (context['$urlParams']) { context['$urlParams'] += '&'; } else { context['$urlParams'] = ''; }\r\n\r\n        var typeName = Container.resolveName(expression.type);\r\n        if (expression.value instanceof $data.Entity)\r\n            typeName = $data.Entity.fullName;\r\n\r\n        var converter = this.provider.fieldConverter.toDb[typeName];\r\n        var value = converter ? converter(expression.value) : expression.value;\r\n\r\n        converter = this.provider.fieldConverter.escape[typeName];\r\n        value = converter ? converter(value) : value;\r\n\r\n        /*var value;\r\n        if (expression.value instanceof $data.Entity) {\r\n            value = this.provider.fieldConverter.toDb['$data.Entity'](expression.value);\r\n        } else {\r\n            //var valueType = Container.getTypeName(expression.value);\r\n            value = this.provider.fieldConverter.toDb[Container.resolveName(Container.resolveType(expression.type))](expression.value);\r\n        }*/\r\n        context['$urlParams'] += expression.name + '=' + value;\r\n    },\r\n    //    VisitConstantExpression: function (expression, context) {\r\n    //        if (context['$urlParams']) { context['$urlParams'] += '&'; } else { context['$urlParams'] = ''; }\r\n    //\r\n    //\r\n    //        var valueType = Container.getTypeName(expression.value);\r\n    //\r\n    //\r\n    //\r\n    //        context['$urlParams'] += expression.name + '=' + this.provider.fieldConverter.toDb[Container.resolveName(Container.resolveType(valueType))](expression.value);\r\n    //    },\r\n\r\n\r\n    VisitCountExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        context.urlText += '/$count';\r\n    }\r\n}, {});\r\n\r\n$C('$data.storageProviders.webApi.webApiWhereCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (provider, lambdaPrefix) {\r\n        this.provider = provider;\r\n        this.lambdaPrefix = lambdaPrefix;\r\n    },\r\n\r\n    compile: function (expression, context) {\r\n        this.Visit(expression, context);\r\n    },\r\n\r\n    VisitParametricQueryExpression: function (expression, context) {\r\n        this.Visit(expression.expression, context);\r\n    },\r\n\r\n    VisitUnaryExpression: function (expression, context) {\r\n        context.data += expression.resolution.mapTo;\r\n        context.data += \"(\";\r\n        this.Visit(expression.operand, context);\r\n        context.data += \")\";\r\n    },\r\n\r\n\r\n    VisitSimpleBinaryExpression: function (expression, context) {\r\n        context.data += \"(\";\r\n        //TODO refactor!!!\r\n        if (expression.nodeType == \"in\") {\r\n            Guard.requireType(\"expression.right\", expression.type, $data.Expressions.ConstantExpression);\r\n            var paramValue = expression.right.value;\r\n            if (!(paramValue instanceof Array)) { Guard.raise(new Exception(\"Right to the 'in' operator must be an array value\")); }\r\n            var result = null;\r\n            var orResolution = { mapTo: \"or\", dataType: \"boolean\", name: \"or\" };\r\n            var eqResolution = { mapTo: \"eq\", dataType: \"boolean\", name: \"equal\" };\r\n\r\n            paramValue.forEach(function (item) {\r\n                var idValue = item;\r\n                var idCheck = Container.createSimpleBinaryExpression(expression.left, idValue,\r\n                    $data.Expressions.ExpressionType.Equal, \"==\", \"boolean\", eqResolution);\r\n                if (result) {\r\n                    result = Container.createSimpleBinaryExpression(result, idCheck,\r\n                    $data.Expressions.ExpressionType.Or, \"||\", \"boolean\", orResolution);\r\n                } else {\r\n                    result = idCheck;\r\n                };\r\n\r\n            });\r\n            var temp = context.data;\r\n            context.data = '';\r\n            this.Visit(result, context);\r\n            context.data = temp + context.data.replace(/\\(/g, '').replace(/\\)/g, '');\r\n        } else {\r\n            this.Visit(expression.left, context);\r\n            context.data += \" \";\r\n            context.data += expression.resolution.mapTo;\r\n            context.data += \" \";\r\n            this.Visit(expression.right, context);\r\n        };\r\n        context.data += \")\";\r\n\r\n    },\r\n\r\n    VisitEntityFieldExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        if (expression.source instanceof $data.Expressions.ComplexTypeExpression) {\r\n            context.data += \"/\";\r\n        }\r\n        this.Visit(expression.selector, context);\r\n    },\r\n\r\n    VisitAssociationInfoExpression: function (expression, context) {\r\n        context.data += expression.associationInfo.FromPropertyName;\r\n    },\r\n\r\n    VisitMemberInfoExpression: function (expression, context) {\r\n        context.data += expression.memberName;\r\n    },\r\n\r\n    VisitQueryParameterExpression: function (expression, context) {\r\n        //context.data += this.provider.fieldConverter.toDb[expression.type](expression.value);\r\n\r\n        var typeName = Container.resolveName(expression.type);\r\n\r\n        var converter = this.provider.fieldConverter.toDb[typeName];\r\n        var value = converter ? converter(expression.value) : expression.value;\r\n\r\n        converter = this.provider.fieldConverter.escape[typeName];\r\n        context.data += converter ? converter(value) : value;\r\n    },\r\n\r\n    VisitEntityFieldOperationExpression: function (expression, context) {\r\n        Guard.requireType(\"expression.operation\", expression.operation, $data.Expressions.MemberInfoExpression);\r\n\r\n        //TODO refactor!\r\n        var opDef = expression.operation.memberDefinition;\r\n        var opName = opDef.mapTo || opDef.name;\r\n        context.data += opName;\r\n        context.data += \"(\";\r\n        var paramCounter = 0;\r\n        var params = opDef.parameters || [{ name: \"@expression\" }];\r\n\r\n        var args = params.map(function (item, index) {\r\n            if (item.name === \"@expression\") {\r\n                return expression.source;\r\n            } else {\r\n                return expression.parameters[paramCounter++]\r\n            };\r\n        });\r\n\r\n        args.forEach(function (arg, index) {\r\n            if (index > 0) {\r\n                context.data += \",\";\r\n            };\r\n            this.Visit(arg, context);\r\n        }, this);\r\n        context.data += \")\";\r\n    },\r\n\r\n    VisitConstantExpression: function (expression, context) {\r\n        //var valueType = Container.getTypeName(expression.value);\r\n        //context.data += this.provider.fieldConverter.toDb[Container.resolveName(Container.resolveType(expression.type))](expression.value);\r\n\r\n        var typeName = Container.resolveName(expression.type);\r\n\r\n        var converter = this.provider.fieldConverter.toDb[typeName];\r\n        var value = converter ? converter(expression.value) : expression.value;\r\n\r\n        converter = this.provider.fieldConverter.escape[typeName];\r\n        context.data += converter ? converter(value) : value;\r\n    },\r\n\r\n    VisitEntityExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n\r\n        if (this.lambdaPrefix && expression.selector.lambda) {\r\n            context.lambda = expression.selector.lambda;\r\n            context.data += (expression.selector.lambda + '/');\r\n        }\r\n\r\n        //if (expression.selector instanceof $data.Expressions.EntityExpression) {\r\n        //    this.Visit(expression.selector, context);\r\n        //}\r\n    },\r\n\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        if (expression.selector instanceof $data.Expressions.AssociationInfoExpression) {\r\n            this.Visit(expression.selector, context);\r\n            context.data += \"/\";\r\n        }\r\n    },\r\n\r\n    VisitFrameOperationExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n\r\n        Guard.requireType(\"expression.operation\", expression.operation, $data.Expressions.MemberInfoExpression);\r\n\r\n        //TODO refactor!\r\n        var opDef = expression.operation.memberDefinition;\r\n        var opName = opDef.mapTo || opDef.name;\r\n        context.data += opName;\r\n        context.data += \"(\";\r\n        var paramCounter = 0;\r\n        var params = opDef.parameters || [{ name: \"@expression\" }];\r\n\r\n        var args = params.map(function (item, index) {\r\n            if (item.name === \"@expression\") {\r\n                return expression.source;\r\n            } else {\r\n                return expression.parameters[paramCounter++]\r\n            };\r\n        });\r\n\r\n        for (var i = 0; i < args.length; i++) {\r\n            var arg = args[i];\r\n            if (arg && arg.value instanceof $data.Queryable) {\r\n                var frameExpression = new opDef.frameType(arg.value.expression);\r\n                var preparator = Container.createQueryExpressionCreator(arg.value.entityContext);\r\n                var prep_expression = preparator.Visit(frameExpression);\r\n\r\n                var compiler = new $data.storageProviders.webApi.webApiWhereCompiler(this.provider, true);\r\n                var frameContext = { data: \"\" };\r\n                var compiled = compiler.compile(prep_expression, frameContext);\r\n\r\n                context.data += (frameContext.lambda + ': ' + frameContext.data);\r\n            };\r\n        }\r\n        context.data += \")\";\r\n    }\r\n});\r\n\r\n$C('$data.storageProviders.webApi.webApiOrderCompiler', $data.storageProviders.webApi.webApiWhereCompiler, null, {\r\n    constructor: function (provider) {\r\n        this.provider = provider;\r\n    },\r\n\r\n    compile: function (expression, context) {\r\n        this.Visit(expression, context);\r\n    },\r\n    VisitOrderExpression: function (expression, context) {\r\n        var orderContext = { data: \"\" };\r\n        this.Visit(expression.selector, orderContext);\r\n        if (context['$orderby']) { context['$orderby'] += ','; } else { context['$orderby'] = ''; }\r\n        context['$orderby'] += orderContext.data\r\n                           + (expression.nodeType == $data.Expressions.ExpressionType.OrderByDescending ? \" desc\" : \"\");\r\n    },\r\n    VisitParametricQueryExpression: function (expression, context) {\r\n        this.Visit(expression.expression, context);\r\n    },\r\n    VisitEntityFieldExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        this.Visit(expression.selector, context);\r\n    },\r\n    VisitComplexTypeExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        this.Visit(expression.selector, context);\r\n        context.data += \"/\";\r\n    },\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        if (expression.selector instanceof $data.Expressions.AssociationInfoExpression) {\r\n            this.Visit(expression.source, context);\r\n            this.Visit(expression.selector, context);\r\n        }\r\n    },\r\n    VisitAssociationInfoExpression: function (expression, context) {\r\n        context.data += expression.associationInfo.FromPropertyName + '/';\r\n    },\r\n    VisitEntityExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        this.Visit(expression.selector, context);\r\n    },\r\n    VisitMemberInfoExpression: function (expression, context) {\r\n        context.data += expression.memberName;\r\n    }\r\n});\r\n$C('$data.storageProviders.webApi.webApiPagingCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (provider) {\r\n        this.provider = provider;\r\n    },\r\n\r\n    compile: function (expression, context) {\r\n        this.Visit(expression, context);\r\n    },\r\n    VisitPagingExpression: function (expression, context) {\r\n        var pagingContext = { data: \"\" };\r\n        this.Visit(expression.amount, pagingContext);\r\n        switch (expression.nodeType) {\r\n            case $data.Expressions.ExpressionType.Skip: context['$skip'] = pagingContext.data; break;\r\n            case $data.Expressions.ExpressionType.Take: context['$top'] = pagingContext.data; break;\r\n            default: Guard.raise(\"Not supported nodeType\"); break;\r\n        }\r\n    },\r\n    VisitConstantExpression: function (expression, context) {\r\n        context.data += expression.value;\r\n    }\r\n});\r\n$C('$data.storageProviders.webApi.webApiProjectionCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (entityContext) {\r\n        this.entityContext = entityContext;\r\n        this.hasObjectLiteral = false;\r\n        this.ObjectLiteralPath = \"\";\r\n        this.modelBinderMapping = [];\r\n    },\r\n\r\n    compile: function (expression, context) {\r\n        this.Visit(expression, context);\r\n    },\r\n    VisitProjectionExpression: function (expression, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.ProjectionExpression\" mayBeNull=\"false\"></param>\r\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\r\n        context.data = \"\";\r\n        this.mapping = \"\";\r\n\r\n        this.Visit(expression.selector, context);\r\n        if (context['$select']) { context['$select'] += ','; } else { context['$select'] = ''; }\r\n        context[\"$select\"] += context.data;\r\n        context.data = \"\";\r\n    },\r\n    VisitParametricQueryExpression: function (expression, context) {\r\n        this.Visit(expression.expression, context);\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression || expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n            context['$expand'] += this.mapping.replace(/\\./g, '/')\r\n        } if (expression.expression instanceof $data.Expressions.ComplexTypeExpression) {\r\n            var m = this.mapping.split('.');\r\n            m.pop();\r\n            if (m.length > 0) {\r\n                if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n                context['$expand'] += m.join('/');\r\n            }\r\n        } else {\r\n            var m = this.mapping.split('.');\r\n            m.pop();\r\n            if (m.length > 0) {\r\n                if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n                context['$expand'] += m.join('/');\r\n            }\r\n        }\r\n    },\r\n    VisitObjectLiteralExpression: function (expression, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.ObjectLiteralExpression\" mayBeNull=\"false\"></param>\r\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\r\n        var tempObjectLiteralPath = this.ObjectLiteralPath;\r\n        this.hasObjectLiteral = true;\r\n        expression.members.forEach(function (member, index) {\r\n            this.Visit(member, context);\r\n            if (index < expression.members.length - 1) { context.data += ','; }\r\n            this.mapping = '';\r\n        }, this);\r\n        this.ObjectLiteralPath = tempObjectLiteralPath;\r\n    },\r\n    VisitObjectFieldExpression: function (expression, context) {\r\n\r\n\r\n        if (this.ObjectLiteralPath) { this.ObjectLiteralPath += '.' + expression.fieldName; } else { this.ObjectLiteralPath = expression.fieldName; }\r\n        this.Visit(expression.expression, context);\r\n\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression || expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n            context['$expand'] += this.mapping.replace(/\\./g, '/')\r\n        } else {\r\n            var m = this.mapping.split('.');\r\n            m.pop();\r\n            if (m.length > 0) {\r\n                if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n                context['$expand'] += m.join('/');\r\n            }\r\n        }\r\n    },\r\n\r\n    VisitComplexTypeExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        this.Visit(expression.selector, context);\r\n    },\r\n\r\n    VisitEntityFieldExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        this.Visit(expression.selector, context);\r\n    },\r\n    VisitEntityExpression: function (expression, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.EntityExpression\" mayBeNull=\"false\"></param>\r\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\r\n        this.Visit(expression.source, context);\r\n    },\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.EntitySetExpression\" mayBeNull=\"false\"></param>\r\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\r\n        if (expression.source instanceof $data.Expressions.EntityExpression) {\r\n            this.Visit(expression.source, context);\r\n        }\r\n        if (expression.selector instanceof $data.Expressions.AssociationInfoExpression) {\r\n            this.Visit(expression.selector, context);\r\n        }\r\n    },\r\n    VisitAssociationInfoExpression: function (expression, context) {\r\n        if (context.data && context.data.length > 0 && context.data[context.data.length - 1] != ',') { context.data += '/'; }\r\n        context.data += expression.associationInfo.FromPropertyName;\r\n        if (this.mapping && this.mapping.length > 0) { this.mapping += '.'; }\r\n        this.mapping += expression.associationInfo.FromPropertyName;\r\n    },\r\n    VisitMemberInfoExpression: function (expression, context) {\r\n        if (context.data && context.data.length > 0 && context.data[context.data.length - 1] != ',') { context.data += '/'; }\r\n        context.data += expression.memberName;\r\n        if (this.mapping && this.mapping.length > 0) { this.mapping += '.'; }\r\n        this.mapping += expression.memberName;\r\n    },\r\n    VisitConstantExpression: function (expression, context) {\r\n        //Guard.raise(new Exception('Constant value is not supported in Projection.', 'Not supported!'));\r\n        //context.data += expression.value;\r\n        context.data = context.data.slice(0, context.data.length - 1);\r\n    }\r\n});\r\n","import $data from 'jaydata/core';\r\n\r\nimport WebApiConverter from './WebApiConverter.js';\r\nimport WebApiProvider from './WebApiProvider.js';\r\n\r\nexport default $data;\r\n"]}