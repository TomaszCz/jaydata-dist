{"version":3,"sources":["node_modules/browser-pack/_prelude.js","SqLiteProvider.js","src/Types/DbClient/DbCommand.js","src/Types/DbClient/DbConnection.js","src/Types/DbClient/JayStorageClient/JayStorageCommand.js","src/Types/DbClient/JayStorageClient/JayStorageConnection.js","src/Types/DbClient/OpenDatabaseClient/OpenDbCommand.js","src/Types/DbClient/OpenDatabaseClient/OpenDbConnection.js","src/Types/DbClient/SqLiteNjClient/SqLiteNjCommand.js","src/Types/DbClient/SqLiteNjClient/SqLiteNjConnection.js","src/Types/StorageProviders/SqLite/ModelBinder/sqLite_ModelBinderCompiler.js","src/Types/StorageProviders/SqLite/SqLiteCompiler.js","src/Types/StorageProviders/SqLite/SqLiteConverter.js","src/Types/StorageProviders/SqLite/SqLiteStorageProvider.js","src/Types/StorageProviders/SqLite/SqlExpressionMonitor.js","src/Types/StorageProviders/SqLite/SqlFilterCompiler.js","src/Types/StorageProviders/SqLite/SqlOrderCompiler.js","src/Types/StorageProviders/SqLite/SqlPagingCompiler.js","src/Types/StorageProviders/SqLite/SqlProjectionCompiler.js","src/Types/StorageProviders/SqLite/index.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","$data","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","_dereq_","_interopRequireDefault","obj","__esModule","default","_core","_core2","Class","connection","parameters","execute","callback","Guard","raise","jaydata/core","2","connectionParams","database","isOpen","open","close","createCommand","3","dbClient","DbCommand","constructor","con","queryStr","params","query","executeNonQuery","PromiseHandlerBase","createCallbackSettings","exec","success","error","executeQuery","errorhandler","undefined","single","Array","results","remainingCommands","decClb","forEach","q","ajax","url","storage","ssl","src","replace","key","type","headers","X-PINGOTHER","data","dataType","contentType","console","log","lastID","insertId","rows","4","DbConnection","cmd","jayStorageClient","JayStorageCommand","5","tran","isWrite","transaction","executeSql","trx","result","rowsAffected","maxItem","j","push","item","err","6","callBack","oncomplete","readTransaction","openDatabase","fileName","version","displayName","maxSize","apply","arguments","openDatabaseClient","OpenDbCommand","7","provider","sqlClb","stmt","prepare","indexOf","all","run","finalize","8","sqLiteModule","Database","sqLiteNJClient","SqLiteNjCommand","9","$C","Expressions","EntityExpressionVisitor","context","_query","sqlContext","_sqlBuilder","sqLite","SqlBuilder","create","sets","entityContext","VisitSingleExpression","expression","_defaultModelBinder","VisitSomeExpression","VisitFindExpression","VisitEveryExpression","VisitToArrayExpression","VisitFirstExpression","VisitForEachExpression","VisitCountExpression","builder","Container","createqueryBuilder","modelBinderConfig","selectModelBinderProperty","Integer","resetModelBinderProperty","VisitExpression","projVisitor","createFindProjectionVisitor","Visit","projectionExpression","DefaultSelection","_addPropertyToModelBinderConfig","elementType","storageModel","_storageModel","getStorageModel","memberDefinitions","getPublicMappedProperties","prop","Associations","name","ComplexTypes","currentObjectFieldName","addKeyField","_addComplexTypeProperties","complexTypes","ct","FromPropertyName","ToType","tmpPrefix","popModelBinderProperty","defaultType","needPrefix","infos","filter","IsMapped","getExpressionAlias","info","infoIndex","pathFragments","NavigationPath","split","shift","popCnt","pathFragment","index","$type","Association","associationInfo","ToMultiplicity","VisitProjectionExpression","hasProjection","selector","ObjectLiteralExpression","projectionAs","Object","VisitParametricQueryExpression","EntityExpression","VisitEntityAsProjection","unshift","EntitySetExpression","VisitEntitySetAsProjection","ComplexTypeExpression","EntityFieldExpression","VisitConstantExpression","source","entityType","VisitComplexTypeExpression","VisitEntityFieldExpression","VisitMemberInfoExpression","memberDefinition","MemberDefinition","memberName","resolveType","VisitEntitySetExpression","VisitEntityExpression","VisitAssociationInfoExpression","$selector","VisitSimpleBinaryExpression","left","right","VisitObjectLiteralExpression","members","of","VisitObjectFieldExpression","tempFieldName","fieldName","10","defineProperty","value","SqlStatementBlocks","beginGroup","endGroup","nameSeparator","valueSeparator","select","where","from","skip","take","parameter","order","as","scalarFieldName","rowIdName","count","queryBuilder","setExpression","idx","queryExpression","associations","filters","newFilters","sortedFilterPart","compile","sqlBuilder","getTextPart","VisitDefaultProjection","selectTextPart","part","addText","text","selectedFragment","concat","countPart","sql","t0","RegExp","pagingExpressionTable","t0fields","m","member","sep","field","slice","sqlReplace","join","VisitFilterExpression","filterCompiler","SqlFilterCompiler","VisitOrderExpression","addOrders","orderCompiler","SqlOrderCompiler","VisitPagingExpression","nodeType","ExpressionType","Skip","Take","pagingCompiler","SqlPagingCompiler","projectonCompiler","SqlProjectionCompiler","es","setIndex","alias","instance","tableName","toSet","toPrefix","AliasNumber","fromSetName","substring","lastIndexOf","temp","inf","fromPrefix","ReferentialConstraint","constrain","From","To","needAlias","set","masterIndex","PhysicalType","memberDef","ExpressionNode","prototype","monitor","monitorDefinition","SqlExpressionMonitor","optimizedIncludeExpression","MonitorEntitySetExpression","EntityContextExpression","backupEntitySetExpression","hasCountFrameOperator","MutateIncludeExpression","origSelector","createCodeExpression","jsCodeTree","createCodeParser","createExpression","code2entity","createCodeToEntityConverter","includeSelector","queryParameters","lambdaParameters","createIncludeExpression","optimizedExpression","FromType","MutateEntitySetExpression","backupContextExpression","path","FromMultiplicity","getType","getMember","ItemName","mi","createMemberInfoExpression","createEntitySetExpression","aliasNum","isMapped","compiler","SqlCompiler","modelBinder","sqLite_ModelBinderCompiler","sqlText","11","SqLiteConverter","fromDb","$data.Enum","v","enumType","convertTo","$data.Duration","proxyConverter","$data.Day","$data.Byte","$data.SByte","$data.Decimal","$data.Float","$data.Int16","$data.Int64","$data.Integer","$data.Int32","$data.Number","$data.Date","dbData","Date","$data.DateTimeOffset","$data.Time","$data.String","$data.Boolean","b","isNullOrUndefined","$data.Blob","atob","Blob","$data.Array","JSON","parse","$data.Object","$data.Guid","parseGuid","toString","$data.GeographyPoint","GeographyPoint","$data.GeographyLineString","GeographyLineString","$data.GeographyPolygon","GeographyPolygon","$data.GeographyMultiPoint","GeographyMultiPoint","$data.GeographyMultiLineString","GeographyMultiLineString","$data.GeographyMultiPolygon","GeographyMultiPolygon","$data.GeographyCollection","GeographyCollection","$data.GeometryPoint","GeometryPoint","$data.GeometryLineString","GeometryLineString","$data.GeometryPolygon","GeometryPolygon","$data.GeometryMultiPoint","GeometryMultiPoint","$data.GeometryMultiLineString","GeometryMultiLineString","$data.GeometryMultiPolygon","GeometryMultiPolygon","$data.GeometryCollection","GeometryCollection","toDb","date","valueOf","toBase64","arr","stringify","SqLiteFieldMapping","12","StorageProviderBase","cfg","SqlCommands","providerConfiguration","typeSystem","extend","databaseName","defaults","defaultDatabaseName","dbCreation","storageProviders","DbCreationType","DropTableIfChanged","providerName","RegisteredStorageProviders","_buildDbType_generateConvertToFunction","buildDbType_generateConvertToFunction","_buildDbType_modifyInstanceDefinition","buildDbType_modifyInstanceDefinition","_createSqlConnection","ctorParm","JayStorageConnection","SqLiteNjConnection","OpenDbConnection","supportedDataTypes","String","Number","Boolean","Guid","Byte","SByte","Decimal","Float","Int16","Int32","Int64","Time","DateTimeOffset","Duration","Day","writable","fieldConverter","supportedFieldOperations","allowedIn","FilterExpression","ProjectionExpression","substr","toLowerCase","mapTo","toUpperCase","contains","prefix","suffix","startsWith","endsWith","trim","ltrim","rtrim","enumerable","supportedBinaryOperators","equal","nullMap","notEqual","equalTyped","notEqualTyped","greaterThan","greaterThanOrEqual","lessThan","lessThenOrEqual","or","and","add","divide","multiply","subtract","modulo","orBitwise","maptTo","andBitwsise","in","supportedUnaryOperators","not","positive","negative","supportedSetOperations","map","toArray","orderBy","orderByDescending","first","include","supportedAutoincrementKeys","createGuid","initializeStore","sm","IsComplexType","createSqlFromStorageModel","sqlConnection","that","existObjectInDB","tbl_name","Merge","Exception","deleteCmd","regEx","tableDef","regex","existsRegExMatches","match","DropAllExistingTables","objName","_runSqlCommands","_compile","actionPack","actions","sqlConvertMetadata","converter","sqlCommand","sqlResult","rawDataList","SQLiteCompiler","compiled","hasSelect","getTraceString","cmdStr","pop","command","okFn","setContext","ctx","saveChanges","changedItems","independentBlocks","buildIndependentBlocks","saveIndependentBlocks","saveNextIndependentBlock","currentBlock","convertedItems","dbType","physicalData","saveIndependentItems","postProcessItems","items","toCmd","queries","cmdParams","param","saveEntitySet","reloadQueries","save_reloadSavedEntity","entitySet","initData","pmpCache","hasOwnProperty","pmp","memDef","computed","entityState","EntityState","Added","save_NewEntity","Deleted","save_DeleteEntity","Modified","save_UpdateEntity","Unchanged","deleteSqlString","hasCondition","addAllField","deleteParam","fieldDef","logicalFieldDef","resolveName","setSection","whereSection","createNew","whereParam","setParam","updateSqlString","insertSqlString","fieldList","fieldValue","fieldParam","typeName","isAssignableTo","EntitySet","rowid","keyFieldNumber","autoincrementFieldNumber","getKeyProperties","TableName","pkFragment","createSqlFragmentFromField","parsePk","storageModelObject","schemaCreate","fldBuilder","FieldTypeBuilder","build","prov","parseKey","fld","mapping","buildFieldNameAndType","buildRelations","buildPrimaryKey","buildNotNull","buildAutoIncrement","required","isSupported","get","__global","SqLiteStorageProvider","registerProvider","webSqlProvider","13","ExpressionMonitor","VisitIncludeExpression","newSourceExpression","newSelectorExpresion","expr","createProjectionExpression","14","_SqLiteCompiler","VisitUnaryExpression","resolution","operand","ConstantExpression","requireType","Queryable","subsql","toTraceString","addParameter","VisitEntityFieldOperationExpression","operation","MemberInfoExpression","opDefinition","opName","fragment","paramDef","VisitQueryParameterExpression","storageProvider","./SqLiteCompiler.js","15","OrderByDescending","16","amount","17","anonymFiledPrefix","currentObjectLiteralName","VisitEntityExpressionAsProjection","MappedFullEntitySet","ee","localPrefix","memberInfo","createConstantExpression","membersNumber","properties","association","tempObjectLiteralName","18","_DbCommand","_DbConnection","_OpenDbCommand","_OpenDbConnection","_JayStorageCommand","_JayStorageConnection","_SqLiteNjCommand","_SqLiteNjConnection","_SqLiteConverter","_SqLiteStorageProvider","_SqlPagingCompiler","_SqlOrderCompiler","_SqlProjectionCompiler","_SqlExpressionMonitor","_SqlFilterCompiler","_sqLite_ModelBinderCompiler","../../DbClient/DbCommand.js","../../DbClient/DbConnection.js","../../DbClient/JayStorageClient/JayStorageCommand.js","../../DbClient/JayStorageClient/JayStorageConnection.js","../../DbClient/OpenDatabaseClient/OpenDbCommand.js","../../DbClient/OpenDatabaseClient/OpenDbConnection.js","../../DbClient/SqLiteNjClient/SqLiteNjCommand.js","../../DbClient/SqLiteNjClient/SqLiteNjConnection.js","./ModelBinder/sqLite_ModelBinderCompiler.js","./SqLiteConverter.js","./SqLiteStorageProvider.js","./SqlExpressionMonitor.js","./SqlFilterCompiler.js","./SqlOrderCompiler.js","./SqlPagingCompiler.js","./SqlProjectionCompiler.js"],"mappings":"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","file":"SqLiteProvider.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","﻿// JayData 1.5.13 \r\n// Dual licensed under MIT and GPL v2\r\n// Copyright JayStack Technologies (http://jaydata.org/licensing)\r\n//\r\n// JayData is a standards-based, cross-platform Javascript library and a set of\r\n// practices to access and manipulate data from various online and offline sources.\r\n//\r\n// Credits:\r\n//     Hajnalka Battancs, Dániel József, János Roden, László Horváth, Péter Nochta\r\n//     Péter Zentai, Róbert Bónay, Szabolcs Czinege, Viktor Borza, Viktor Lázár,\r\n//     Zoltán Gyebrovszki, Gábor Dolla\r\n//\r\n// More info: http://jaydata.org\r\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define(\"jaydata/sqlite\",[\"jaydata/core\"],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.$data = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.dbClient.DbCommand', null, null, {\n    connection: {},\n    parameters: {},\n    execute: function execute(callback) {\n        _core.Guard.raise(\"Pure class\");\n    }\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],2:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.dbClient.DbConnection', null, null, {\n    connectionParams: {},\n    database: {},\n    isOpen: function isOpen() {\n        _core.Guard.raise(\"Pure class\");\n    },\n    open: function open() {\n        _core.Guard.raise(\"Pure class\");\n    },\n    close: function close() {\n        _core.Guard.raise(\"Pure class\");\n    },\n    createCommand: function createCommand() {\n        _core.Guard.raise(\"Pure class\");\n    }\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],3:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.dbClient.jayStorageClient.JayStorageCommand', _core2.default.dbClient.DbCommand, null, {\n    constructor: function constructor(con, queryStr, params) {\n        this.query = queryStr;\n        this.connection = con;\n        this.parameters = params;\n    },\n    executeNonQuery: function executeNonQuery(callback) {\n        // TODO\n        callback = _core2.default.PromiseHandlerBase.createCallbackSettings(callback);\n        this.exec(this.query, this.parameters, callback.success, callback.error);\n    },\n    executeQuery: function executeQuery(callback) {\n        callback = _core2.default.PromiseHandlerBase.createCallbackSettings(callback);\n        this.exec(this.query, this.parameters, callback.success, callback.error);\n    },\n    exec: function exec(query, parameters, callback, errorhandler) {\n        if (parameters == null || parameters == undefined) {\n            parameters = {};\n        }\n        var single = false;\n        if (!(query instanceof Array)) {\n            single = true;\n            query = [query];\n            parameters = [parameters];\n        }\n\n        var provider = this;\n        var results = [];\n        var remainingCommands = query.length;\n        var decClb = function decClb() {\n            if (--remainingCommands == 0) {\n                callback(single ? results[0] : results);\n            }\n        };\n\n        query.forEach(function (q, i) {\n            if (q) {\n                _core2.default.ajax({\n                    url: 'http' + (this.connection.connectionParams.storage.ssl ? 's' : '') + '://' + this.connection.connectionParams.storage.src.replace('http://', '').replace('https://', '') + '?db=' + this.connection.connectionParams.storage.key,\n                    type: 'POST',\n                    headers: {\n                        'X-PINGOTHER': 'pingpong'\n                    },\n                    data: { query: q, parameters: parameters[i] },\n                    dataType: 'json',\n                    contentType: 'application/json;charset=UTF-8',\n                    success: function success(data) {\n                        if (data && data.error) {\n                            console.log('JayStorage error', data.error);\n                            errorhandler(data.error);\n                            return;\n                        }\n                        if (this.lastID) {\n                            results[i] = { insertId: this.lastID, rows: (data || { rows: [] }).rows };\n                        } else results[i] = { rows: (data || { rows: [] }).rows };\n                        decClb();\n                    }\n                });\n            } else {\n                results[i] = null;\n                decClb();\n            }\n        }, this);\n    }\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.dbClient.jayStorageClient.JayStorageConnection', _core2.default.dbClient.DbConnection, null, {\n    constructor: function constructor(params) {\n        this.connectionParams = params;\n    },\n    isOpen: function isOpen() {\n        return true;\n        //return this.database !== null && this.database !== undefined;\n    },\n    open: function open() {\n        /*if (this.database == null) {\r\n            var p = this.connectionParams;\r\n            this.database = new sqLiteModule.Database(p.fileName);\r\n        }*/\n    },\n    close: function close() {\n        //not supported yet (performance issue)\n    },\n    createCommand: function createCommand(queryStr, params) {\n        var cmd = new _core2.default.dbClient.jayStorageClient.JayStorageCommand(this, queryStr, params);\n        return cmd;\n    }\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],5:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.dbClient.openDatabaseClient.OpenDbCommand', _core2.default.dbClient.DbCommand, null, {\n    constructor: function constructor(con, queryStr, params) {\n        this.query = queryStr;\n        this.connection = con;\n        this.parameters = params;\n    },\n    executeNonQuery: function executeNonQuery(callback, tran, isWrite) {\n        callback = _core2.default.PromiseHandlerBase.createCallbackSettings(callback);\n        this.exec(this.query, this.parameters, callback.success, callback.error, tran, isWrite);\n    },\n    executeQuery: function executeQuery(callback, tran, isWrite) {\n        callback = _core2.default.PromiseHandlerBase.createCallbackSettings(callback);\n        this.exec(this.query, this.parameters, callback.success, callback.error, tran, isWrite);\n    },\n    exec: function exec(query, parameters, callback, errorhandler, transaction, isWrite) {\n        // suspicious code\n        /*if (console) {\r\n            //console.log(query);\r\n        }*/\n        this.connection.open({\n            error: errorhandler,\n            success: function success(tran) {\n                var single = false;\n                if (!(query instanceof Array)) {\n                    single = true;\n                    query = [query];\n                    parameters = [parameters];\n                }\n\n                var results = [];\n                var remainingCommands = 0;\n\n                function decClb() {\n                    if (--remainingCommands == 0) {\n                        callback(single ? results[0] : results, transaction);\n                    }\n                }\n\n                query.forEach(function (q, i) {\n                    remainingCommands++;\n                    if (q) {\n                        tran.executeSql(query[i], parameters[i], function (trx, result) {\n                            var r = { rows: [] };\n                            try {\n                                r.insertId = result.insertId;\n                            } catch (e) {}\n                            if (typeof r.insertId !== 'number') {\n                                // If insertId is present, no rows are returned\n                                r.rowsAffected = result.rowsAffected;\n                                var maxItem = result.rows.length;\n                                for (var j = 0; j < maxItem; j++) {\n                                    r.rows.push(result.rows.item(j));\n                                }\n                            }\n                            results[i] = r;\n                            decClb(trx);\n                        }, function (trx, err) {\n                            var _q = q;\n                            var _i = i;\n\n                            if (errorhandler) errorhandler(err);\n\n                            return true;\n                        });\n                    } else {\n                        results[i] = null;\n                        decClb();\n                    }\n                });\n            }\n        }, transaction, isWrite);\n    }\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],6:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.dbClient.openDatabaseClient.OpenDbConnection', _core2.default.dbClient.DbConnection, null, {\n    constructor: function constructor(params) {\n        this.connectionParams = params;\n    },\n    isOpen: function isOpen() {\n        return this.database !== null && this.database !== undefined && this.transaction !== null && this.transaction !== undefined;\n    },\n    open: function open(callBack, tran, isWrite) {\n        if (isWrite === undefined) isWrite = true;\n\n        callBack.oncomplete = callBack.oncomplete || function () {};\n        if (tran) {\n            callBack.success(tran.transaction);\n        } else if (this.database) {\n            if (isWrite) {\n                this.database.transaction(function (tran) {\n                    callBack.success(tran);\n                }, callBack.error, callBack.oncomplete);\n            } else {\n                this.database.readTransaction(function (tran) {\n                    callBack.success(tran);\n                }, callBack.error, callBack.oncomplete);\n            }\n        } else {\n            var p = this.connectionParams;\n            var con = this;\n            this.database = openDatabase(p.fileName, p.version, p.displayName, p.maxSize);\n            if (!this.database.readTransaction) {\n                this.database.readTransaction = function () {\n                    con.database.transaction.apply(con.database, arguments);\n                };\n            }\n\n            if (isWrite) {\n                this.database.transaction(function (tran) {\n                    callBack.success(tran);\n                }, callBack.error, callBack.oncomplete);\n            } else {\n                this.database.readTransaction(function (tran) {\n                    callBack.success(tran);\n                }, callBack.error, callBack.oncomplete);\n            }\n        }\n    },\n    close: function close() {\n        this.transaction = undefined;\n        this.database = undefined;\n    },\n    createCommand: function createCommand(queryStr, params) {\n        var cmd = new _core2.default.dbClient.openDatabaseClient.OpenDbCommand(this, queryStr, params);\n        return cmd;\n    }\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],7:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.dbClient.sqLiteNJClient.SqLiteNjCommand', _core2.default.dbClient.DbCommand, null, {\n    constructor: function constructor(con, queryStr, params) {\n        this.query = queryStr;\n        this.connection = con;\n        this.parameters = params;\n    },\n    executeNonQuery: function executeNonQuery(callback) {\n        // TODO\n        callback = _core2.default.PromiseHandlerBase.createCallbackSettings(callback);\n        this.exec(this.query, this.parameters, callback.success, callback.error);\n    },\n    executeQuery: function executeQuery(callback) {\n        callback = _core2.default.PromiseHandlerBase.createCallbackSettings(callback);\n        this.exec(this.query, this.parameters, callback.success, callback.error);\n    },\n    exec: function exec(query, parameters, callback, errorhandler) {\n        if (!this.connection.isOpen()) {\n            this.connection.open();\n        }\n        if (parameters == null || parameters == undefined) {\n            parameters = {};\n        }\n        var single = false;\n        if (!(query instanceof Array)) {\n            single = true;\n            query = [query];\n            parameters = [parameters];\n        }\n\n        var provider = this;\n        var results = [];\n        var remainingCommands = 0;\n        var decClb = function decClb() {\n            if (--remainingCommands == 0) {\n                provider.connection.database.exec('COMMIT');\n                callback(single ? results[0] : results);\n            }\n        };\n        provider.connection.database.exec('BEGIN');\n        query.forEach(function (q, i) {\n            remainingCommands++;\n            if (q) {\n                var sqlClb = function sqlClb(error, rows) {\n                    if (error != null) {\n                        errorhandler(error);\n                        return;\n                    }\n                    if (this.lastID) {\n                        results[i] = { insertId: this.lastID, rows: [] };\n                    } else {\n                        results[i] = { rows: rows };\n                    }\n                    decClb();\n                };\n\n                var stmt = provider.connection.database.prepare(q, parameters[i]);\n                if (q.indexOf('SELECT') == 0) {\n                    stmt.all(sqlClb);\n                } else {\n                    stmt.run(sqlClb);\n                }\n                stmt.finalize();\n            } else {\n                results[i] = null;\n                decClb();\n            }\n        }, this);\n    }\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],8:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.dbClient.sqLiteNJClient.SqLiteNjConnection', _core2.default.dbClient.DbConnection, null, {\n    constructor: function constructor(params) {\n        this.connectionParams = params;\n    },\n    isOpen: function isOpen() {\n        return this.database !== null && this.database !== undefined;\n    },\n    open: function open() {\n        if (this.database == null) {\n            var p = this.connectionParams;\n            this.database = new sqLiteModule.Database(p.fileName);\n        }\n    },\n    close: function close() {\n        //not supported yet (performance issue)\n    },\n    createCommand: function createCommand(queryStr, params) {\n        var cmd = new _core2.default.dbClient.sqLiteNJClient.SqLiteNjCommand(this, queryStr, params);\n        return cmd;\n    }\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],9:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.sqLite.sqLite_ModelBinderCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(query, context) {\n        this._query = query;\n        this.sqlContext = context;\n        this._sqlBuilder = _core2.default.sqLite.SqlBuilder.create(context.sets, context.entityContext);\n    },\n    VisitSingleExpression: function VisitSingleExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitSomeExpression: function VisitSomeExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitFindExpression: function VisitFindExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitEveryExpression: function VisitEveryExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitToArrayExpression: function VisitToArrayExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitFirstExpression: function VisitFirstExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitForEachExpression: function VisitForEachExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitCountExpression: function VisitCountExpression(expression) {\n        var builder = _core.Container.createqueryBuilder();\n\n        builder.modelBinderConfig['$type'] = _core2.default.Array;\n        builder.selectModelBinderProperty('$item');\n        builder.modelBinderConfig['$type'] = _core2.default.Integer;\n        builder.modelBinderConfig['$source'] = 'cnt';\n        builder.resetModelBinderProperty();\n        this._query.modelBinderConfig = builder.modelBinderConfig;\n    },\n\n    VisitExpression: function VisitExpression(expression, builder) {\n        var projVisitor = _core.Container.createFindProjectionVisitor();\n        projVisitor.Visit(expression);\n\n        if (projVisitor.projectionExpression) {\n            this.Visit(projVisitor.projectionExpression, builder);\n        } else {\n            this.DefaultSelection(builder);\n        }\n    },\n    _defaultModelBinder: function _defaultModelBinder(expression) {\n        var builder = _core.Container.createqueryBuilder();\n        builder.modelBinderConfig['$type'] = _core2.default.Array;\n        builder.modelBinderConfig['$item'] = {};\n        builder.selectModelBinderProperty('$item');\n\n        this.VisitExpression(expression, builder);\n\n        builder.resetModelBinderProperty();\n        this._query.modelBinderConfig = builder.modelBinderConfig;\n    },\n    _addPropertyToModelBinderConfig: function _addPropertyToModelBinderConfig(elementType, builder) {\n        var storageModel = this._query.context._storageModel.getStorageModel(elementType);\n        elementType.memberDefinitions.getPublicMappedProperties().forEach(function (prop) {\n            if (!storageModel || storageModel && !storageModel.Associations[prop.name] && !storageModel.ComplexTypes[prop.name]) {\n                if (prop.key) {\n                    if (this.currentObjectFieldName) {\n                        builder.addKeyField(this.currentObjectFieldName + '__' + prop.name);\n                    } else {\n                        builder.addKeyField(prop.name);\n                    }\n                }\n                if (this.currentObjectFieldName) {\n                    builder.modelBinderConfig[prop.name] = this.currentObjectFieldName + '__' + prop.name;\n                } else {\n                    builder.modelBinderConfig[prop.name] = prop.name;\n                }\n            }\n        }, this);\n        if (storageModel) {\n            this._addComplexTypeProperties(storageModel.ComplexTypes, builder);\n        }\n    },\n    _addComplexTypeProperties: function _addComplexTypeProperties(complexTypes, builder) {\n        complexTypes.forEach(function (ct) {\n\n            builder.selectModelBinderProperty(ct.FromPropertyName);\n            builder.modelBinderConfig['$type'] = ct.ToType;\n            var tmpPrefix = this.currentObjectFieldName;\n            if (this.currentObjectFieldName) {\n                this.currentObjectFieldName += '__';\n            } else {\n                this.currentObjectFieldName = '';\n            }\n            this.currentObjectFieldName += ct.FromPropertyName;\n            //recursion\n            this._addPropertyToModelBinderConfig(ct.ToType, builder);\n            //reset model binder property\n            builder.popModelBinderProperty();\n            this.currentObjectFieldName = tmpPrefix;\n        }, this);\n    },\n    DefaultSelection: function DefaultSelection(builder) {\n        //no projection, get all item from entitySet\n        builder.modelBinderConfig['$type'] = this._query.defaultType;\n        var storageModel = this._query.context._storageModel.getStorageModel(this._query.defaultType);\n\n        var needPrefix = this.sqlContext.infos.filter(function (i) {\n            return i.IsMapped;\n        }).length > 1;\n        if (needPrefix) {\n            this.currentObjectFieldName = this._sqlBuilder.getExpressionAlias(this.sqlContext.sets[0]);\n        }\n        this._addPropertyToModelBinderConfig(this._query.defaultType, builder);\n        this.sqlContext.infos.forEach(function (info, infoIndex) {\n            if (infoIndex > 0 && info.IsMapped) {\n                var pathFragments = info.NavigationPath.split('.');\n                pathFragments.shift();\n                var popCnt = 0;\n                pathFragments.forEach(function (pathFragment, index) {\n                    if (!pathFragment) {\n                        return;\n                    }\n                    if (!builder.modelBinderConfig[pathFragment]) {\n                        builder.selectModelBinderProperty(pathFragment);\n                        if (info.Association.associationInfo.ToMultiplicity === '*' && pathFragments.length - 1 === index) {\n                            builder.modelBinderConfig['$type'] = _core2.default.Array;\n                            builder.selectModelBinderProperty('$item');\n                            popCnt++;\n                        }\n\n                        builder.modelBinderConfig['$type'] = this.sqlContext.sets[infoIndex].elementType;\n                        this.currentObjectFieldName = this._sqlBuilder.getExpressionAlias(this.sqlContext.sets[infoIndex]);\n                        this._addPropertyToModelBinderConfig(this.sqlContext.sets[infoIndex].elementType, builder);\n                        while (popCnt--) {\n                            builder.popModelBinderProperty();\n                        }\n                    } else {\n                        builder.selectModelBinderProperty(pathFragment);\n                        if (builder.modelBinderConfig.$type == _core2.default.Array) {\n                            builder.selectModelBinderProperty(\"$item\");\n                            popCnt++;\n                        }\n                    }\n                }, this);\n                for (var i = 0; i < pathFragments.length; i++) {\n                    builder.popModelBinderProperty();\n                }\n            }\n        }, this);\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, builder) {\n        this.hasProjection = true;\n        this.Visit(expression.selector, builder);\n\n        if (expression.selector && expression.selector.expression instanceof _core2.default.Expressions.ObjectLiteralExpression) {\n            builder.modelBinderConfig['$type'] = expression.projectionAs || builder.modelBinderConfig['$type'] || _core2.default.Object;\n        }\n    },\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, builder) {\n        if (expression.expression instanceof _core2.default.Expressions.EntityExpression) {\n            this.VisitEntityAsProjection(expression.expression, builder);\n            builder.modelBinderConfig['$keys'].unshift('rowid$$');\n        } else if (expression.expression instanceof _core2.default.Expressions.EntitySetExpression) {\n            this.currentObjectFieldName = this._sqlBuilder.getExpressionAlias(expression.expression);\n            this.VisitEntitySetAsProjection(expression.expression, builder);\n            builder.modelBinderConfig['$keys'] = ['rowid$$'];\n        } else if (expression.expression instanceof _core2.default.Expressions.ComplexTypeExpression) {\n            this.VisitEntityAsProjection(expression.expression, builder);\n        } else {\n            builder.modelBinderConfig['$keys'] = ['rowid$$'];\n            this.Visit(expression.expression, builder);\n            if (expression.expression instanceof _core2.default.Expressions.EntityFieldExpression) {\n                builder.modelBinderConfig['$source'] = 'd';\n            }\n        }\n    },\n    VisitConstantExpression: function VisitConstantExpression(expression, builder) {\n        builder.modelBinderConfig['$type'] = expression.type;\n        builder.modelBinderConfig['$source'] = this.currentObjectFieldName;\n    },\n    VisitEntityAsProjection: function VisitEntityAsProjection(expression, builder) {\n        this.Visit(expression.source, builder);\n        builder.modelBinderConfig['$type'] = expression.entityType;\n        this._addPropertyToModelBinderConfig(expression.entityType, builder);\n    },\n    VisitEntitySetAsProjection: function VisitEntitySetAsProjection(expression, builder) {\n        builder.modelBinderConfig['$type'] = _core2.default.Array;\n        builder.selectModelBinderProperty('$item');\n        builder.modelBinderConfig['$type'] = expression.elementType;\n        this._addPropertyToModelBinderConfig(expression.elementType, builder);\n        builder.popModelBinderProperty();\n    },\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, builder) {\n        return expression;\n    },\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, builder) {\n        this.Visit(expression.source, builder);\n        this.Visit(expression.selector, builder);\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, builder) {\n        if (expression.memberDefinition instanceof _core2.default.MemberDefinition) {\n            builder.modelBinderConfig['$type'] = expression.memberDefinition.type;\n            if (expression.memberDefinition.storageModel && expression.memberName in expression.memberDefinition.storageModel.ComplexTypes) {\n                this._addPropertyToModelBinderConfig(_core.Container.resolveType(expression.memberDefinition.type), builder);\n            } else {\n                builder.modelBinderConfig['$source'] = this.currentObjectFieldName;\n            }\n        }\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, builder) {\n        if (expression.source instanceof _core2.default.Expressions.EntityExpression) {\n            this.Visit(expression.source, builder);\n            this.Visit(expression.selector, builder);\n        }\n    },\n    VisitEntityExpression: function VisitEntityExpression(expression, builder) {\n        this.Visit(expression.source, builder);\n    },\n    VisitAssociationInfoExpression: function VisitAssociationInfoExpression(expression, builder) {\n        if ('$selector' in builder.modelBinderConfig && builder.modelBinderConfig.$selector.length > 0) {\n            builder.modelBinderConfig.$selector += '.';\n        } else {\n            builder.modelBinderConfig['$selector'] = 'json:';\n        }\n        builder.modelBinderConfig['$selector'] += expression.associationInfo.FromPropertyName;\n    },\n    VisitSimpleBinaryExpression: function VisitSimpleBinaryExpression(expression, builder) {\n        this.Visit(expression.left, builder);\n        this.Visit(expression.right, builder);\n        builder.modelBinderConfig['$type'] = undefined;\n    },\n    VisitObjectLiteralExpression: function VisitObjectLiteralExpression(expression, builder) {\n        builder.modelBinderConfig['$type'] = _core2.default.Object;\n        expression.members.forEach(function (of) {\n            this.Visit(of, builder);\n        }, this);\n    },\n    VisitObjectFieldExpression: function VisitObjectFieldExpression(expression, builder) {\n        var tempFieldName = this.currentObjectFieldName;\n        builder.selectModelBinderProperty(expression.fieldName);\n        if (this.currentObjectFieldName) {\n            this.currentObjectFieldName += '__';\n        } else {\n            this.currentObjectFieldName = '';\n        }\n        this.currentObjectFieldName += expression.fieldName;\n\n        if (expression.expression instanceof _core2.default.Expressions.EntityExpression || expression.expression instanceof _core2.default.Expressions.ComplexTypeExpression) {\n            this.VisitEntityAsProjection(expression.expression, builder);\n        } else if (expression.expression instanceof _core2.default.Expressions.EntitySetExpression) {\n            this.VisitEntitySetAsProjection(expression.expression, builder);\n        } else {\n            this.Visit(expression.expression, builder);\n        }\n\n        this.currentObjectFieldName = tempFieldName;\n\n        builder.popModelBinderProperty();\n    }\n});\n\n},{\"jaydata/core\":\"jaydata/core\"}],10:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.SqlStatementBlocks = undefined;\n\nvar _core = _dereq_(\"jaydata/core\");\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SqlStatementBlocks = exports.SqlStatementBlocks = {\n    beginGroup: \"(\",\n    endGroup: \")\",\n    nameSeparator: \".\",\n    valueSeparator: \", \",\n    select: \"SELECT \",\n    where: \" WHERE \",\n    from: \" FROM \",\n    skip: \" OFFSET \",\n    take: \" LIMIT \",\n    parameter: \"?\",\n    order: \" ORDER BY \",\n    as: \" AS \",\n    scalarFieldName: 'd',\n    rowIdName: 'rowid$$',\n    count: 'select count(*) cnt from ('\n};\n(0, _core.$C)('$data.sqLite.SqlBuilder', _core2.default.queryBuilder, null, {\n    constructor: function constructor(sets, context) {\n        this.sets = sets;\n        this.entityContext = context;\n    },\n    getExpressionAlias: function getExpressionAlias(setExpression) {\n        var idx = this.sets.indexOf(setExpression);\n        if (idx == -1) {\n            idx = this.sets.push(setExpression) - 1;\n        }\n        return \"T\" + idx;\n    }\n});\n\n(0, _core.$C)('$data.sqLite.SqlCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(queryExpression, context) {\n        this.queryExpression = queryExpression;\n        this.sets = context.sets;\n        this.infos = context.infos;\n        this.entityContext = context.entityContext;\n        this.associations = [];\n        this.filters = [];\n        this.newFilters = {};\n        this.sortedFilterPart = ['projection', 'from', 'filter', 'order', 'take', 'skip'];\n    },\n    compile: function compile() {\n        var sqlBuilder = _core2.default.sqLite.SqlBuilder.create(this.sets, this.entityContext);\n        this.Visit(this.queryExpression, sqlBuilder);\n\n        if (sqlBuilder.getTextPart('projection') === undefined) {\n            this.VisitDefaultProjection(sqlBuilder);\n        }\n        var order = sqlBuilder.getTextPart(\"order\");\n        var skip = sqlBuilder.getTextPart(\"skip\");\n        var take = sqlBuilder.getTextPart(\"take\");\n        sqlBuilder.selectTextPart(\"result\");\n        this.sortedFilterPart.forEach(function (part) {\n            if (sqlBuilder.sets.length > 1 && ((skip || take) && part == \"order\" || part == \"take\" || part == \"skip\")) return;\n            var part = sqlBuilder.getTextPart(part);\n            if (part) {\n                sqlBuilder.addText(part.text);\n                sqlBuilder.selectedFragment.params = sqlBuilder.selectedFragment.params.concat(part.params);\n            }\n        }, this);\n        var countPart = sqlBuilder.getTextPart('count');\n        if (countPart !== undefined) {\n            sqlBuilder.selectedFragment.text = countPart.text + sqlBuilder.selectedFragment.text;\n            sqlBuilder.addText(SqlStatementBlocks.endGroup);\n            sqlBuilder.selectedFragment.params = sqlBuilder.selectedFragment.params.concat(countPart.params);\n        }\n        sqlBuilder.resetModelBinderProperty();\n        if (sqlBuilder.sets.length > 1 && (skip || take)) {\n            var sql = sqlBuilder.getTextPart(\"result\");\n            var t0 = sql.text.replace(new RegExp(\"SELECT (.*?) FROM \" + sqlBuilder.pagingExpressionTable), \"SELECT T0.rowid, * FROM \" + sqlBuilder.pagingExpressionTable);\n            var t0fields = [];\n            sql.text.replace(new RegExp(\"\\\\sT0\\\\.(.*?)(\\\\s|,|\\\\))\", \"g\"), function (m, member, sep) {\n                var field = \"T0.\" + member;\n                if (t0fields.indexOf(field) < 0) t0fields.push(field);\n            });\n            if (t0fields.length > 0) {\n                var params = sql.params.slice();\n                var sqlReplace = \"FROM (\" + t0 + \" GROUP BY \" + t0fields.join(\", \");\n                if (order) {\n                    sqlReplace += order.text;\n                    if (order.params && order.params.length > 0) params = params.concat(order.params);\n                }\n                if (take) {\n                    sqlReplace += take.text;\n                    params.push(take.params[0]);\n                }\n                if (skip) {\n                    sqlReplace += skip.text;\n                    params.push(skip.params[0]);\n                }\n                sqlReplace += \")\";\n                sql.text = sql.text.replace(\"FROM \" + sqlBuilder.pagingExpressionTable, sqlReplace);\n                sql.params = params.concat(sql.params);\n            } else {\n                if (order) {\n                    sql.text += order.text;\n                    if (order.params && order.params.length > 0) sql.params = sql.params.concat(order.params);\n                }\n                if (take) {\n                    sql.text += take.text;\n                    sql.params = sql.params.concat(take.params);\n                }\n                if (skip) {\n                    sql.text += skip.text;\n                    sql.params = sql.params.concat(skip.params);\n                }\n            }\n        }\n        this.filters.push(sqlBuilder);\n    },\n\n    VisitToArrayExpression: function VisitToArrayExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n    },\n    VisitCountExpression: function VisitCountExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n        sqlBuilder.selectTextPart('count');\n        sqlBuilder.addText(SqlStatementBlocks.count);\n    },\n    VisitFilterExpression: function VisitFilterExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n        sqlBuilder.selectTextPart('filter');\n        sqlBuilder.addText(SqlStatementBlocks.where);\n        var filterCompiler = _core2.default.sqLite.SqlFilterCompiler.create();\n        filterCompiler.Visit(expression.selector, sqlBuilder);\n        return expression;\n    },\n    VisitOrderExpression: function VisitOrderExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n        sqlBuilder.selectTextPart('order');\n        if (this.addOrders) {\n            sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\n        } else {\n            this.addOrders = true;\n            sqlBuilder.addText(SqlStatementBlocks.order);\n        }\n        var orderCompiler = _core2.default.sqLite.SqlOrderCompiler.create();\n        orderCompiler.Visit(expression, sqlBuilder);\n\n        return expression;\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n        switch (expression.nodeType) {\n            case _core2.default.Expressions.ExpressionType.Skip:\n                sqlBuilder.selectTextPart('skip');\n                sqlBuilder.addText(SqlStatementBlocks.skip);break;\n            case _core2.default.Expressions.ExpressionType.Take:\n                sqlBuilder.selectTextPart('take');\n                sqlBuilder.addText(SqlStatementBlocks.take);break;\n            default:\n                _core.Guard.raise(\"Not supported nodeType\");break;\n        }\n        var pagingCompiler = _core2.default.sqLite.SqlPagingCompiler.create();\n        pagingCompiler.Visit(expression, sqlBuilder);\n        return expression;\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n        sqlBuilder.selectTextPart('projection');\n        this.hasProjection = true;\n        sqlBuilder.addText(SqlStatementBlocks.select);\n        var projectonCompiler = _core2.default.sqLite.SqlProjectionCompiler.create();\n        projectonCompiler.Visit(expression, sqlBuilder);\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, sqlBuilder) {\n        sqlBuilder.selectTextPart('from');\n        sqlBuilder.addText(SqlStatementBlocks.from);\n        sqlBuilder.sets.forEach(function (es, setIndex) {\n\n            if (setIndex > 0) {\n                sqlBuilder.addText(\" \\n\\tLEFT OUTER JOIN \");\n            }\n\n            var alias = sqlBuilder.getExpressionAlias(es);\n            if (setIndex == 0 && sqlBuilder.sets.length > 1) {\n                sqlBuilder.pagingExpressionTable = es.instance.tableName;\n            }\n            sqlBuilder.addText(es.instance.tableName + ' ');\n            sqlBuilder.addText(alias);\n\n            if (setIndex > 0) {\n                sqlBuilder.addText(\" ON (\");\n                var toSet = this.infos[setIndex];\n                var toPrefix = \"T\" + toSet.AliasNumber;\n                var fromSetName = toSet.NavigationPath.substring(0, toSet.NavigationPath.lastIndexOf('.'));\n                var temp = this.infos.filter(function (inf) {\n                    return inf.NavigationPath == fromSetName;\n                }, this);\n                var fromPrefix = \"T0\";\n                if (temp.length > 0) {\n                    fromPrefix = \"T\" + temp[0].AliasNumber;\n                }\n                toSet.Association.associationInfo.ReferentialConstraint.forEach(function (constrain, index) {\n                    if (index > 0) {\n                        sqlBuilder.addText(\" AND \");\n                    }\n                    sqlBuilder.addText(fromPrefix + \".\" + constrain[toSet.Association.associationInfo.From]);\n                    sqlBuilder.addText(\" = \");\n                    sqlBuilder.addText(toPrefix + \".\" + constrain[toSet.Association.associationInfo.To]);\n                }, this);\n                sqlBuilder.addText(\")\");\n            }\n        }, this);\n    },\n    VisitDefaultProjection: function VisitDefaultProjection(sqlBuilder) {\n        sqlBuilder.selectTextPart('projection');\n        var needAlias = this.infos.filter(function (i) {\n            return i.IsMapped;\n        }).length > 1;\n        if (sqlBuilder.sets.length > 1) {\n            sqlBuilder.addText(SqlStatementBlocks.select);\n            sqlBuilder.sets.forEach(function (set, masterIndex) {\n\n                if (this.infos[masterIndex].IsMapped) {\n                    var alias = sqlBuilder.getExpressionAlias(set);\n                    set.storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (memberDef, index) {\n                        if (index > 0 || masterIndex > 0) {\n                            sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\n                        }\n                        sqlBuilder.addText(alias + \".\");\n                        sqlBuilder.addText(memberDef.name);\n                        if (needAlias) {\n                            sqlBuilder.addText(SqlStatementBlocks.as);\n                            sqlBuilder.addText(alias + \"__\" + memberDef.name);\n                        }\n                    }, this);\n                }\n            }, this);\n        } else {\n            sqlBuilder.addText(\"SELECT *\");\n        }\n    }\n});\n\n_core2.default.Expressions.ExpressionNode.prototype.monitor = function (monitorDefinition, context) {\n    var m = _core2.default.sqLite.SqlExpressionMonitor.create(monitorDefinition);\n    return m.Visit(this, context);\n};\n\n(0, _core.$C)('$data.storageProviders.sqLite.SQLiteCompiler', null, null, {\n    compile: function compile(query) {\n        /// <param name=\"query\" type=\"$data.Query\" />\n        var expression = query.expression;\n        var context = { sets: [], infos: [], entityContext: query.context };\n\n        var optimizedIncludeExpression = expression.monitor({\n            MonitorEntitySetExpression: function MonitorEntitySetExpression(expression, context) {\n                if (expression.source instanceof _core2.default.Expressions.EntityContextExpression && context.sets.indexOf(expression) == -1) {\n                    this.backupEntitySetExpression = expression;\n                }\n            },\n            VisitCountExpression: function VisitCountExpression(expression, context) {\n                context.hasCountFrameOperator = true;\n                return expression;\n            },\n            MutateIncludeExpression: function MutateIncludeExpression(expression, context) {\n                var result = null;\n                if (context.hasCountFrameOperator) {\n                    result = expression.source;\n                } else {\n                    var origSelector = expression.selector.value;\n                    _core.Container.createCodeExpression(\"function(it){return it.\" + origSelector + \";}\", null);\n\n                    var jsCodeTree = _core.Container.createCodeParser(this.backupEntitySetExpression.source.instance).createExpression(\"function(it){return it.\" + origSelector + \";}\");\n                    var code2entity = _core.Container.createCodeToEntityConverter(this.backupEntitySetExpression.source.instance);\n                    var includeSelector = code2entity.Visit(jsCodeTree, { queryParameters: undefined, lambdaParameters: [this.backupEntitySetExpression] });\n\n                    result = _core.Container.createIncludeExpression(expression.source, includeSelector);\n                }\n                return result;\n            }\n        }, context);\n\n        var optimizedExpression = optimizedIncludeExpression.monitor({\n            MonitorEntitySetExpression: function MonitorEntitySetExpression(expression, context) {\n                if (expression.source instanceof _core2.default.Expressions.EntityContextExpression && context.sets.indexOf(expression) == -1) {\n                    context.sets.push(expression);\n                    context.infos.push({ AliasNumber: 0, Association: null, FromType: null, FromPropertyName: null, IsMapped: true });\n                }\n            },\n            MutateEntitySetExpression: function MutateEntitySetExpression(expression, context) {\n                if (expression.source instanceof _core2.default.Expressions.EntityContextExpression) {\n                    this.backupContextExpression = expression.source;\n                    this.path = \"\";\n                    return expression;\n                }\n                if (expression.selector.associationInfo.FromMultiplicity == \"0..1\" && expression.selector.associationInfo.FromMultiplicity == \"*\") {\n                    _core.Guard.raise(\"Not supported query on this navigation property: \" + expression.selector.associationInfo.From + \" \" + expression.selector.associationInfo.FromPropertyName);\n                }\n\n                this.path += '.' + expression.selector.associationInfo.FromPropertyName;\n                var info = context.infos.filter(function (inf) {\n                    return inf.NavigationPath == this.path;\n                }, this);\n                if (info.length > 0) {\n                    return context.sets[info[0].AliasNumber];\n                }\n                var memberDefinitions = this.backupContextExpression.instance.getType().memberDefinitions.getMember(expression.storageModel.ItemName);\n                if (!memberDefinitions) {\n                    _core.Guard.raise(\"Context schema error\");\n                }\n                var mi = _core.Container.createMemberInfoExpression(memberDefinitions);\n                var result = _core.Container.createEntitySetExpression(this.backupContextExpression, mi);\n                result.instance = this.backupContextExpression.instance[expression.storageModel.ItemName];\n                var aliasNum = context.sets.push(result);\n                context.infos.push({\n                    AliasNumber: aliasNum - 1,\n                    Association: expression.selector,\n                    NavigationPath: this.path,\n                    IsMapped: this.isMapped\n                });\n                return result;\n            }\n        }, context);\n\n        var compiler = _core2.default.sqLite.SqlCompiler.create(optimizedExpression, context);\n        compiler.compile();\n\n        var sqlBuilder = _core2.default.sqLite.SqlBuilder.create(this.sets, this.entityContext);\n\n        query.modelBinderConfig = {};\n        var modelBinder = _core2.default.sqLite.sqLite_ModelBinderCompiler.create(query, context);\n        modelBinder.Visit(optimizedExpression);\n\n        var result = {\n            sqlText: compiler.filters[0].selectedFragment.text,\n            params: compiler.filters[0].selectedFragment.params,\n            modelBinderConfig: query.modelBinderConfig\n        };\n\n        return result;\n    }\n}, null);\n\n},{\"jaydata/core\":\"jaydata/core\"}],11:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.SqLiteConverter = {\n    fromDb: {\n        '$data.Enum': function $dataEnum(v, enumType) {\n            return _core2.default.Container.convertTo(v, enumType);\n        },\n        '$data.Duration': _core2.default.Container.proxyConverter,\n        '$data.Day': _core2.default.Container.proxyConverter,\n        '$data.Byte': _core2.default.Container.proxyConverter,\n        '$data.SByte': _core2.default.Container.proxyConverter,\n        '$data.Decimal': _core2.default.Container.proxyConverter,\n        '$data.Float': _core2.default.Container.proxyConverter,\n        '$data.Int16': _core2.default.Container.proxyConverter,\n        '$data.Int64': _core2.default.Container.proxyConverter,\n        \"$data.Integer\": _core2.default.Container.proxyConverter,\n        \"$data.Int32\": _core2.default.Container.proxyConverter,\n        \"$data.Number\": _core2.default.Container.proxyConverter,\n        \"$data.Date\": function $dataDate(dbData) {\n            return dbData != null ? new Date(dbData) : dbData;\n        },\n        \"$data.DateTimeOffset\": function $dataDateTimeOffset(dbData) {\n            return dbData != null ? new Date(dbData) : dbData;\n        },\n        \"$data.Time\": _core2.default.Container.proxyConverter,\n        \"$data.String\": _core2.default.Container.proxyConverter,\n        \"$data.Boolean\": function $dataBoolean(b) {\n            return _core.Guard.isNullOrUndefined(b) ? b : b === 1 ? true : false;\n        },\n        \"$data.Blob\": function $dataBlob(b) {\n            return b ? _core2.default.Container.convertTo(atob(b), _core2.default.Blob) : b;\n        },\n        \"$data.Array\": function $dataArray() {\n            if (arguments.length == 0) return [];\n            return arguments[0] ? JSON.parse(arguments[0]) : undefined;\n        },\n        \"$data.Object\": function $dataObject(v) {\n            try {\n                return JSON.parse(v);\n            } catch (err) {\n                return v;\n            }\n        },\n        \"$data.Guid\": function $dataGuid(g) {\n            return g ? _core2.default.parseGuid(g).toString() : g;\n        },\n        '$data.GeographyPoint': function $dataGeographyPoint(g) {\n            if (g) {\n                return new _core2.default.GeographyPoint(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeographyLineString': function $dataGeographyLineString(g) {\n            if (g) {\n                return new _core2.default.GeographyLineString(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeographyPolygon': function $dataGeographyPolygon(g) {\n            if (g) {\n                return new _core2.default.GeographyPolygon(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeographyMultiPoint': function $dataGeographyMultiPoint(g) {\n            if (g) {\n                return new _core2.default.GeographyMultiPoint(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeographyMultiLineString': function $dataGeographyMultiLineString(g) {\n            if (g) {\n                return new _core2.default.GeographyMultiLineString(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeographyMultiPolygon': function $dataGeographyMultiPolygon(g) {\n            if (g) {\n                return new _core2.default.GeographyMultiPolygon(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeographyCollection': function $dataGeographyCollection(g) {\n            if (g) {\n                return new _core2.default.GeographyCollection(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeometryPoint': function $dataGeometryPoint(g) {\n            if (g) {\n                return new _core2.default.GeometryPoint(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeometryLineString': function $dataGeometryLineString(g) {\n            if (g) {\n                return new _core2.default.GeometryLineString(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeometryPolygon': function $dataGeometryPolygon(g) {\n            if (g) {\n                return new _core2.default.GeometryPolygon(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeometryMultiPoint': function $dataGeometryMultiPoint(g) {\n            if (g) {\n                return new _core2.default.GeometryMultiPoint(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeometryMultiLineString': function $dataGeometryMultiLineString(g) {\n            if (g) {\n                return new _core2.default.GeometryMultiLineString(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeometryMultiPolygon': function $dataGeometryMultiPolygon(g) {\n            if (g) {\n                return new _core2.default.GeometryMultiPolygon(JSON.parse(g));\n            }return g;\n        },\n        '$data.GeometryCollection': function $dataGeometryCollection(g) {\n            if (g) {\n                return new _core2.default.GeometryCollection(JSON.parse(g));\n            }return g;\n        }\n    },\n    toDb: {\n        '$data.Enum': _core2.default.Container.proxyConverter,\n        '$data.Duration': _core2.default.Container.proxyConverter,\n        '$data.Day': _core2.default.Container.proxyConverter,\n        '$data.Byte': _core2.default.Container.proxyConverter,\n        '$data.SByte': _core2.default.Container.proxyConverter,\n        '$data.Decimal': _core2.default.Container.proxyConverter,\n        '$data.Float': _core2.default.Container.proxyConverter,\n        '$data.Int16': _core2.default.Container.proxyConverter,\n        '$data.Int64': _core2.default.Container.proxyConverter,\n        \"$data.Integer\": _core2.default.Container.proxyConverter,\n        \"$data.Int32\": _core2.default.Container.proxyConverter,\n        \"$data.Number\": _core2.default.Container.proxyConverter,\n        \"$data.Date\": function $dataDate(date) {\n            return date ? date.valueOf() : null;\n        },\n        \"$data.DateTimeOffset\": function $dataDateTimeOffset(date) {\n            return date ? date.valueOf() : null;\n        },\n        \"$data.Time\": _core2.default.Container.proxyConverter,\n        \"$data.String\": _core2.default.Container.proxyConverter,\n        \"$data.Boolean\": function $dataBoolean(b) {\n            return _core.Guard.isNullOrUndefined(b) ? b : b ? 1 : 0;\n        },\n        \"$data.Blob\": function $dataBlob(b) {\n            return b ? _core2.default.Blob.toBase64(b) : b;\n        },\n        \"$data.Array\": function $dataArray(arr) {\n            return arr ? JSON.stringify(arr) : arr;\n        },\n        \"$data.Guid\": function $dataGuid(g) {\n            return g ? g.toString() : g;\n        },\n        \"$data.Object\": function $dataObject(value) {\n            if (value === null) {\n                return null;\n            } else {\n                JSON.stringify(value);\n            }\n        },\n        '$data.GeographyPoint': function $dataGeographyPoint(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeographyLineString': function $dataGeographyLineString(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeographyPolygon': function $dataGeographyPolygon(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeographyMultiPoint': function $dataGeographyMultiPoint(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeographyMultiLineString': function $dataGeographyMultiLineString(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeographyMultiPolygon': function $dataGeographyMultiPolygon(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeographyCollection': function $dataGeographyCollection(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeometryPoint': function $dataGeometryPoint(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeometryLineString': function $dataGeometryLineString(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeometryPolygon': function $dataGeometryPolygon(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeometryMultiPoint': function $dataGeometryMultiPoint(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeometryMultiLineString': function $dataGeometryMultiLineString(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeometryMultiPolygon': function $dataGeometryMultiPolygon(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        },\n        '$data.GeometryCollection': function $dataGeometryCollection(g) {\n            if (g) {\n                return JSON.stringify(g);\n            }return g;\n        }\n    }\n};\n\n_core2.default.SqLiteFieldMapping = {\n    '$data.Byte': \"INTEGER\",\n    '$data.SByte': \"INTEGER\",\n    '$data.Decimal': \"TEXT\",\n    '$data.Float': \"REAL\",\n    '$data.Int16': \"INTEGER\",\n    '$data.Int64': \"TEXT\",\n    \"$data.Integer\": \"INTEGER\",\n    \"$data.Int32\": \"INTEGER\",\n    \"$data.Number\": \"REAL\",\n    \"$data.Date\": \"REAL\",\n    \"$data.Duration\": \"TEXT\",\n    \"$data.Time\": \"TEXT\",\n    \"$data.Day\": \"TEXT\",\n    \"$data.DateTimeOffset\": \"REAL\",\n    \"$data.String\": \"TEXT\",\n    \"$data.Boolean\": \"INTEGER\",\n    \"$data.Blob\": \"BLOB\",\n    \"$data.Array\": \"TEXT\",\n    \"$data.Guid\": \"TEXT\",\n    \"$data.Object\": \"TEXT\",\n    '$data.GeographyPoint': \"TEXT\",\n    '$data.GeographyLineString': \"TEXT\",\n    '$data.GeographyPolygon': \"TEXT\",\n    '$data.GeographyMultiPoint': \"TEXT\",\n    '$data.GeographyMultiLineString': \"TEXT\",\n    '$data.GeographyMultiPolygon': \"TEXT\",\n    '$data.GeographyCollection': \"TEXT\",\n    '$data.GeometryPoint': \"TEXT\",\n    '$data.GeometryLineString': \"TEXT\",\n    '$data.GeometryPolygon': \"TEXT\",\n    '$data.GeometryMultiPoint': \"TEXT\",\n    '$data.GeometryMultiLineString': \"TEXT\",\n    '$data.GeometryMultiPolygon': \"TEXT\",\n    '$data.GeometryCollection': \"TEXT\"\n};\n\n},{\"jaydata/core\":\"jaydata/core\"}],12:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.Class.define('$data.storageProviders.sqLite.SqLiteStorageProvider', _core2.default.StorageProviderBase, null, {\n    constructor: function constructor(cfg, context) {\n        this.SqlCommands = [];\n        this.context = context;\n        this.providerConfiguration = _core2.default.typeSystem.extend({\n            databaseName: _core2.default.defaults.defaultDatabaseName,\n            version: \"\",\n            displayName: \"JayData default db\",\n            maxSize: 1024 * 1024,\n            dbCreation: _core2.default.storageProviders.DbCreationType.DropTableIfChanged\n        }, cfg);\n\n        this.providerName = '';\n        for (var i in _core2.default.RegisteredStorageProviders) {\n            if (_core2.default.RegisteredStorageProviders[i] === this.getType()) {\n                this.providerName = i;\n            }\n        }\n\n        if (this.context && this.context._buildDbType_generateConvertToFunction && this.buildDbType_generateConvertToFunction) {\n            this.context._buildDbType_generateConvertToFunction = this.buildDbType_generateConvertToFunction;\n        }\n        if (this.context && this.context._buildDbType_modifyInstanceDefinition && this.buildDbType_modifyInstanceDefinition) {\n            this.context._buildDbType_modifyInstanceDefinition = this.buildDbType_modifyInstanceDefinition;\n        }\n    },\n    _createSqlConnection: function _createSqlConnection() {\n        var ctorParm = {\n            fileName: this.providerConfiguration.databaseName,\n            version: \"\",\n            displayName: this.providerConfiguration.displayName,\n            maxSize: this.providerConfiguration.maxSize,\n            storage: this.providerConfiguration.storage\n        };\n\n        if (this.connection) return this.connection;\n\n        var connection = null;\n        if (this.providerConfiguration.storage) {\n            connection = new _core2.default.dbClient.jayStorageClient.JayStorageConnection(ctorParm);\n        } else if (typeof sqLiteModule !== 'undefined') {\n            connection = new _core2.default.dbClient.sqLiteNJClient.SqLiteNjConnection(ctorParm);\n        } else {\n            connection = new _core2.default.dbClient.openDatabaseClient.OpenDbConnection(ctorParm);\n        }\n\n        this.connection = connection;\n\n        return connection;\n    },\n\n    supportedDataTypes: {\n        value: [_core2.default.Array, _core2.default.Integer, _core2.default.String, _core2.default.Number, _core2.default.Blob, _core2.default.Array, _core2.default.Object, _core2.default.Boolean, _core2.default.Date, _core2.default.Guid, _core2.default.GeographyPoint, _core2.default.GeographyLineString, _core2.default.GeographyPolygon, _core2.default.GeographyMultiPoint, _core2.default.GeographyMultiLineString, _core2.default.GeographyMultiPolygon, _core2.default.GeographyCollection, _core2.default.GeometryPoint, _core2.default.GeometryLineString, _core2.default.GeometryPolygon, _core2.default.GeometryMultiPoint, _core2.default.GeometryMultiLineString, _core2.default.GeometryMultiPolygon, _core2.default.GeometryCollection, _core2.default.Byte, _core2.default.SByte, _core2.default.Decimal, _core2.default.Float, _core2.default.Int16, _core2.default.Int32, _core2.default.Int64, _core2.default.Time, _core2.default.DateTimeOffset, _core2.default.Duration, _core2.default.Day],\n        writable: false\n    },\n    fieldConverter: { value: _core2.default.SqLiteConverter },\n\n    supportedFieldOperations: {\n        value: {\n            length: {\n                dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.ProjectionExpression]\n            },\n            substr: {\n                dataType: \"string\",\n                allowedIn: _core2.default.Expressions.FilterExpression,\n                parameters: [{ name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\" }]\n            },\n            toLowerCase: {\n                dataType: \"string\", mapTo: \"lower\"\n            },\n            toUpperCase: {\n                dataType: \"string\", mapTo: \"upper\"\n            },\n            contains: {\n                mapTo: \"like\",\n                dataType: \"boolean\",\n                allowedIn: _core2.default.Expressions.FilterExpression,\n                parameters: [{ name: \"strFragment\", dataType: \"string\", prefix: \"%\", suffix: \"%\" }]\n            },\n            startsWith: {\n                mapTo: \"like\",\n                dataType: \"boolean\",\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.ProjectionExpression],\n                parameters: [{ name: \"strFragment\", dataType: \"string\", suffix: \"%\" }]\n            },\n            endsWith: {\n                mapTo: \"like\",\n                dataType: \"boolean\",\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.ProjectionExpression],\n                parameters: [{ name: \"strFragment\", dataType: \"string\", prefix: \"%\" }]\n            },\n            'trim': {\n                dataType: _core2.default.String,\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.ProjectionExpression],\n                mapTo: 'trim',\n                parameters: [{ name: '@expression', dataType: _core2.default.String }, { name: 'chars', dataType: _core2.default.String }]\n            },\n            'ltrim': {\n                dataType: _core2.default.String,\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.ProjectionExpression],\n                mapTo: 'ltrim',\n                parameters: [{ name: '@expression', dataType: _core2.default.String }, { name: 'chars', dataType: _core2.default.String }]\n            },\n            'rtrim': {\n                dataType: _core2.default.String,\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.ProjectionExpression],\n                mapTo: 'rtrim',\n                parameters: [{ name: '@expression', dataType: _core2.default.String }, { name: 'chars', dataType: _core2.default.String }]\n            }\n        },\n        enumerable: true,\n        writable: true\n    },\n\n    supportedBinaryOperators: {\n        value: {\n            equal: { mapTo: '=', dataType: \"boolean\", nullMap: ' is null' },\n            notEqual: { mapTo: '!=', dataType: \"boolean\", nullMap: ' is not null' },\n            equalTyped: { mapTo: '=', dataType: \"boolean\", nullMap: ' is null' },\n            notEqualTyped: { mapTo: '!=', dataType: \"boolean\", nullMap: ' is not null' },\n            greaterThan: { mapTo: '>', dataType: \"boolean\" },\n            greaterThanOrEqual: { mapTo: '>=', dataType: \"boolean\" },\n\n            lessThan: { mapTo: '<', dataType: \"boolean\" },\n            lessThenOrEqual: { mapTo: '<=', dataType: \"boolean\" },\n            or: { mapTo: 'OR', dataType: \"boolean\" },\n            and: { mapTo: 'AND', dataType: \"boolean\" },\n\n            add: { mapTo: '+', dataType: \"number\" },\n            divide: { mapTo: '/' },\n            multiply: { mapTo: '*' },\n            subtract: { mapTo: '-' },\n            modulo: { mapTo: '%' },\n\n            orBitwise: { maptTo: \"|\" },\n            andBitwsise: { mapTo: \"&\" },\n\n            \"in\": { mapTo: \"in\", dataType: \"boolean\" }\n        }\n    },\n\n    supportedUnaryOperators: {\n        value: {\n            not: { mapTo: 'not' },\n            positive: { mapTo: '+' },\n            negative: { maptTo: '-' }\n        }\n    },\n\n    supportedSetOperations: {\n        value: {\n            filter: {},\n            map: {},\n            length: {},\n            forEach: {},\n            toArray: {},\n            single: {},\n            take: {},\n            skip: {},\n            orderBy: {},\n            orderByDescending: {},\n            first: {},\n            include: {}\n        },\n        enumerable: true,\n        writable: true\n    },\n\n    supportedAutoincrementKeys: {\n        value: {\n            '$data.Integer': true,\n            '$data.Int32': true,\n            '$data.Guid': function $dataGuid() {\n                return _core2.default.createGuid();\n            }\n        }\n    },\n\n    initializeStore: function initializeStore(callBack) {\n        callBack = _core2.default.PromiseHandlerBase.createCallbackSettings(callBack);\n        this.context._storageModel.filter(function (sm) {\n            return !sm.IsComplexType;\n        }).forEach(function (item, index) {\n            this.SqlCommands.push(this.createSqlFromStorageModel(item) + \" \");\n        }, this);\n\n        var sqlConnection = this._createSqlConnection();\n        var cmd = sqlConnection.createCommand(\"SELECT * FROM sqlite_master WHERE type = 'table'\", null);\n        var that = this;\n\n        cmd.executeQuery({\n            success: function success(result) {\n                var existObjectInDB = {};\n                for (var i = 0; i < result.rows.length; i++) {\n                    var item = result.rows[i];\n                    existObjectInDB[item.tbl_name] = item;\n                }\n                switch (that.providerConfiguration.dbCreation) {\n                    case _core2.default.storageProviders.DbCreationType.Merge:\n                        _core.Guard.raise(new _core.Exception('Not supported db creation type'));\n                        break;\n                    case _core2.default.storageProviders.DbCreationType.DropTableIfChanged:\n                        var deleteCmd = [];\n                        for (var i = 0; i < that.SqlCommands.length; i++) {\n                            if (that.SqlCommands[i] == \"\") {\n                                continue;\n                            }\n                            var regEx = new RegExp('^CREATE TABLE IF NOT EXISTS ([^ ]*) (\\\\(.*\\\\))', 'g');\n                            var data = regEx.exec(that.SqlCommands[i]);\n                            if (data) {\n                                var tableName = data[1];\n                                var tableDef = data[2];\n                                if (existObjectInDB[tableName.slice(1, tableName.length - 1)]) {\n                                    var regex = new RegExp('\\\\(.*\\\\)', 'g');\n                                    var existsRegExMatches = existObjectInDB[tableName.slice(1, tableName.length - 1)].sql.match(regex);\n\n                                    if (!existsRegExMatches || tableDef.toLowerCase() != existsRegExMatches[0].toLowerCase()) {\n                                        deleteCmd.push(\"DROP TABLE IF EXISTS [\" + existObjectInDB[tableName.slice(1, tableName.length - 1)].tbl_name + \"];\");\n                                    }\n                                }\n                            } else {\n                                //console.dir(regEx);\n                                //console.dir(that.SqlCommands[i]);\n                            }\n                        }\n                        that.SqlCommands = that.SqlCommands.concat(deleteCmd);\n                        //console.log(deleteCmd);\n                        break;\n                    case _core2.default.storageProviders.DbCreationType.DropAllExistingTables:\n                        for (var objName in existObjectInDB) {\n                            if (objName && !objName.match('^__') && !objName.match('^sqlite_')) {\n                                that.SqlCommands.push(\"DROP TABLE IF EXISTS [\" + existObjectInDB[objName].tbl_name + \"];\");\n                            }\n                        }\n                        break;\n                }\n                that._runSqlCommands(sqlConnection, { success: callBack.success, error: callBack.error });\n            },\n            error: callBack.error\n        });\n    },\n    executeQuery: function executeQuery(query, callBack) {\n        callBack = _core2.default.PromiseHandlerBase.createCallbackSettings(callBack);\n        var sqlConnection = this._createSqlConnection();\n        var sql = this._compile(query);\n        query.actionPack = sql.actions;\n        query.sqlConvertMetadata = sql.converter;\n        query.modelBinderConfig = sql.modelBinderConfig;\n        var sqlCommand = sqlConnection.createCommand(sql.sqlText, sql.params);\n        var that = this;\n        sqlCommand.executeQuery({\n            success: function success(sqlResult) {\n                if (callBack.success) {\n                    query.rawDataList = sqlResult.rows;\n                    callBack.success(query);\n                }\n            },\n            error: callBack.error\n        });\n    },\n    _compile: function _compile(query, params) {\n        var compiler = new _core2.default.storageProviders.sqLite.SQLiteCompiler();\n        var compiled = compiler.compile(query);\n        //console.dir(compiled);\n        compiled.hasSelect = compiler.select != null;\n        return compiled;\n    },\n    getTraceString: function getTraceString(query) {\n        var sqlText = this._compile(query);\n        return sqlText;\n    },\n    _runSqlCommands: function _runSqlCommands(sqlConnection, callBack) {\n        if (this.SqlCommands && this.SqlCommands.length > 0) {\n            var cmdStr = this.SqlCommands.pop();\n            var command = sqlConnection.createCommand(cmdStr, null);\n            var that = this;\n            var okFn = function okFn(result) {\n                that._runSqlCommands.apply(that, [sqlConnection, callBack]);\n            };\n            command.executeQuery({ success: okFn, error: callBack.error });\n        } else {\n            callBack.success(this.context);\n        }\n    },\n    setContext: function setContext(ctx) {\n        this.context = ctx;\n    },\n    saveChanges: function saveChanges(callback, changedItems) {\n        var sqlConnection = this._createSqlConnection();\n        var provider = this;\n        var independentBlocks = this.buildIndependentBlocks(changedItems);\n        this.saveIndependentBlocks(changedItems, independentBlocks, sqlConnection, callback);\n    },\n    saveIndependentBlocks: function saveIndependentBlocks(changedItems, independentBlocks, sqlConnection, callback) {\n        /// <summary>\n        /// Saves the sequentially independent items to the database.\n        /// </summary>\n        /// <param name=\"independentBlocks\">Array of independent block of items.</param>\n        /// <param name=\"sqlConnection\">sqlConnection to use</param>\n        /// <param name=\"callback\">Callback on finish</param>\n        var provider = this;\n        var t = [].concat(independentBlocks);\n        function saveNextIndependentBlock() {\n            if (t.length === 0) {\n                callback.success();\n                return;\n            }\n            var currentBlock = t.shift();\n            // Converting items to their physical equivalent (?)\n            var convertedItems = currentBlock.map(function (item) {\n                var dbType = provider.context._storageModel.getStorageModel(item.data.getType()).PhysicalType;\n                item.physicalData = dbType.convertTo(item.data);\n                return item;\n            }, this);\n            try {\n                provider.saveIndependentItems(convertedItems, sqlConnection, {\n                    success: function success() {\n                        provider.postProcessItems(convertedItems);\n                        saveNextIndependentBlock();\n                    },\n                    error: callback.error\n                });\n            } catch (e) {\n                callback.error(e);\n            }\n        }\n        saveNextIndependentBlock();\n    },\n\n    saveIndependentItems: function saveIndependentItems(items, sqlConnection, callback) {\n        var provider = this;\n        var queries = items.map(function (item) {\n            return provider.saveEntitySet(item);\n        });\n        queries = queries.filter(function (item) {\n            return item;\n        });\n        if (queries.length === 0) {\n            callback.success(items);\n            return;\n        }\n        function toCmd(sqlConnection, queries) {\n            var cmdParams = { query: [], param: [] };\n            queries.forEach(function (item, i) {\n                if (item) {\n                    if (item.query) cmdParams.query[i] = item.query;\n                    if (item.param) cmdParams.param[i] = item.param;\n                }\n            });\n            return sqlConnection.createCommand(cmdParams.query, cmdParams.param);\n        }\n        var cmd = toCmd(sqlConnection, queries);\n        cmd.executeQuery({\n            success: function success(results) {\n                var reloadQueries = results.map(function (result, i) {\n                    if (result && result.insertId) {\n                        return provider.save_reloadSavedEntity(result.insertId, items[i].entitySet.tableName, sqlConnection);\n                    } else {\n                        return null;\n                    }\n                });\n                var cmd = toCmd(sqlConnection, reloadQueries);\n                if (cmd.query.length > 0) {\n                    cmd.executeQuery(function (results) {\n                        results.forEach(function (item, i) {\n                            if (item && item.rows) {\n                                items[i].physicalData.initData = item.rows[0];\n                            }\n                        });\n                        callback.success(items);\n                    });\n                } else {\n                    callback.success(0); //TODO Zenima: fixed this!\n                }\n            },\n            error: callback.error\n        });\n    },\n    postProcessItems: function postProcessItems(changedItems) {\n        var pmpCache = {};\n        function getPublicMappedProperties(type) {\n            var key = type.name;\n            if (pmpCache.hasOwnProperty(key)) return pmpCache[key];else {\n                var pmp = type.memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\n                    return memDef.computed;\n                });\n                return pmpCache[key] = pmp;\n            }\n        }\n        changedItems.forEach(function (item) {\n            if (item.physicalData) {\n                getPublicMappedProperties(item.data.getType()).forEach(function (memDef) {\n                    item.data[memDef.name] = item.physicalData[memDef.name];\n                }, this);\n            }\n        }, this);\n    },\n\n    saveEntitySet: function saveEntitySet(item) {\n        switch (item.data.entityState) {\n            case _core2.default.EntityState.Added:\n                return this.save_NewEntity(item);break;\n            case _core2.default.EntityState.Deleted:\n                return this.save_DeleteEntity(item);break;\n            case _core2.default.EntityState.Modified:\n                return this.save_UpdateEntity(item);break;\n            case _core2.default.EntityState.Unchanged:\n                return;break;\n            default:\n                _core.Guard.raise(new _core.Exception('Not supported entity state'));\n        }\n    },\n    save_DeleteEntity: function save_DeleteEntity(item) {\n        ///DELETE FROM Posts WHERE Id=1;\n        var deleteSqlString = \"DELETE FROM [\" + item.entitySet.tableName + \"] WHERE(\";\n        var hasCondition = false;\n        var addAllField = false;\n        var deleteParam = [];\n        while (!hasCondition) {\n            item.physicalData.constructor.memberDefinitions.getPublicMappedProperties().forEach(function (fieldDef, i) {\n\n                if (hasCondition && !deleteSqlString.match(\" AND $\")) {\n                    deleteSqlString += \" AND \";\n                }\n                if (fieldDef.key || addAllField) {\n                    deleteSqlString += \"([\" + fieldDef.name + \"] == ?)\";\n                    var logicalFieldDef = item.data.getType().memberDefinitions.getMember(fieldDef.name);\n                    if (logicalFieldDef && logicalFieldDef.converter && logicalFieldDef.converter[this.providerName] && typeof logicalFieldDef.converter[this.providerName].toDb == 'function') {\n                        deleteParam.push(logicalFieldDef.converter[this.providerName].toDb(item.data[logicalFieldDef.name], logicalFieldDef, this.context, logicalFieldDef.dataType));\n                    } else {\n                        deleteParam.push(this.fieldConverter.toDb[_core.Container.resolveName(fieldDef.dataType)](item.data[fieldDef.name]));\n                    }\n                    hasCondition = true;\n                }\n            }, this);\n            if (!hasCondition) {\n                addAllField = true;\n            }\n        }\n        if (deleteSqlString.match(\" AND $\")) {\n            deleteSqlString = deleteSqlString.slice(0, deleteSqlString.length - 5);\n        }\n        deleteSqlString += \");\";\n        return { query: deleteSqlString, param: deleteParam };\n    },\n    save_UpdateEntity: function save_UpdateEntity(item) {\n        var setSection = \" SET \";\n        var whereSection = \"WHERE(\";\n\n        var fieldsMaxIndex = item.entitySet.createNew.memberDefinitions.length;\n        var hasCondition = false;\n        var addAllField = false;\n        var whereParam = [];\n        var setParam = [];\n        item.physicalData.constructor.memberDefinitions.getPublicMappedProperties().forEach(function (fieldDef, i) {\n            if (item.physicalData[fieldDef.name] !== undefined) {\n                if (hasCondition && !whereSection.match(\" AND $\")) {\n                    whereSection += \" AND \";\n                }\n                if (setSection.length > 5 && !setSection.match(',$')) {\n                    setSection += ',';\n                }\n                if (fieldDef.key) {\n                    whereSection += '([' + fieldDef.name + '] == ?)';\n                    var logicalFieldDef = item.data.getType().memberDefinitions.getMember(fieldDef.name);\n                    if (logicalFieldDef && logicalFieldDef.converter && logicalFieldDef.converter[this.providerName] && typeof logicalFieldDef.converter[this.providerName].toDb == 'function') {\n                        whereParam.push(logicalFieldDef.converter[this.providerName].toDb(item.physicalData[logicalFieldDef.name], fieldDef, this.context, logicalFieldDef.dataType));\n                    } else {\n                        whereParam.push(this.fieldConverter.toDb[_core.Container.resolveName(fieldDef.dataType)](item.physicalData[fieldDef.name]));\n                    }\n                    hasCondition = true;\n                } else {\n                    setSection += \"[\" + fieldDef.name + \"] = ?\";\n                    var logicalFieldDef = item.data.getType().memberDefinitions.getMember(fieldDef.name);\n                    if (logicalFieldDef && logicalFieldDef.converter && logicalFieldDef.converter[this.providerName] && typeof logicalFieldDef.converter[this.providerName].toDb == 'function') {\n                        setParam.push(fieldDef.converter[this.providerName].toDb(item.physicalData[logicalFieldDef.name], logicalFieldDef, this.context, logicalFieldDef.dataType));\n                    } else {\n                        setParam.push(this.fieldConverter.toDb[_core.Container.resolveName(fieldDef.dataType)](item.physicalData[fieldDef.name]));\n                    }\n                }\n            }\n        }, this);\n        if (!hasCondition) {\n            _core.Guard.raise(new _core.Exception('Not supported UPDATE function without primary key!'));\n        }\n\n        if (whereSection.match(\" AND $\")) {\n            whereSection = whereSection.slice(0, whereSection.length - 5);\n        }\n        if (setSection.match(\",$\")) {\n            setSection = setSection.slice(0, setSection.length - 1);\n        }\n        var updateSqlString = \"UPDATE [\" + item.entitySet.tableName + \"]\" + setSection + \" \" + whereSection + \");\";\n        return { query: updateSqlString, param: setParam.concat(whereParam) };\n    },\n    save_NewEntity: function save_NewEntity(item) {\n        var insertSqlString = \"INSERT INTO [\" + item.entitySet.tableName + \"](\";\n        var fieldList = \"\";\n        var fieldValue = \"\";\n        var fieldParam = [];\n        item.physicalData.constructor.memberDefinitions.getPublicMappedProperties().forEach(function (fieldDef, i) {\n            if (fieldDef.key && !fieldDef.computed && _core.Guard.isNullOrUndefined(item.physicalData[fieldDef.name])) {\n                _core.Guard.raise(new _core.Exception('Key is not set', 'Value exception', item));\n                return;\n            }\n            if (fieldDef.key && fieldDef.computed && _core.Guard.isNullOrUndefined(item.physicalData[fieldDef.name])) {\n                var typeName = _core.Container.resolveName(fieldDef.type);\n                if (typeof this.supportedAutoincrementKeys[typeName] === 'function') {\n                    item.physicalData[fieldDef.name] = this.supportedAutoincrementKeys[typeName]();\n                }\n            }\n\n            if (fieldList.length > 0 && fieldList[fieldList.length - 1] != \",\") {\n                fieldList += \",\";fieldValue += \",\";\n            }\n            var fieldName = fieldDef.name;\n            if ( /*item.physicalData[fieldName] !== null && */item.physicalData[fieldName] !== undefined) {\n                if (fieldDef.dataType && (!fieldDef.dataType.isAssignableTo || fieldDef.dataType.isAssignableTo && !fieldDef.dataType.isAssignableTo(_core2.default.EntitySet))) {\n                    fieldValue += '?';\n                    fieldList += \"[\" + fieldName + \"]\";\n                    var logicalFieldDef = item.data.getType().memberDefinitions.getMember(fieldDef.name);\n                    if (logicalFieldDef && logicalFieldDef.converter && logicalFieldDef.converter[this.providerName] && typeof logicalFieldDef.converter[this.providerName].toDb == 'function') {\n                        fieldParam.push(logicalFieldDef.converter[this.providerName].toDb(item.physicalData[fieldName], logicalFieldDef, this.context, logicalFieldDef.dataType));\n                    } else {\n                        fieldParam.push(this.fieldConverter.toDb[_core.Container.resolveName(fieldDef.dataType)](item.physicalData[fieldName]));\n                    }\n                }\n            }\n        }, this);\n        if (fieldParam.length < 1) {\n            insertSqlString = \"INSERT INTO [\" + item.entitySet.tableName + \"] Default values\";\n        } else {\n            if (fieldList[fieldList.length - 1] == \",\") {\n                fieldList = fieldList.slice(0, fieldList.length - 1);\n            }\n            if (fieldValue[fieldValue.length - 1] == \",\") {\n                fieldValue = fieldValue.slice(0, fieldValue.length - 1);\n            }\n            insertSqlString += fieldList + \") VALUES(\" + fieldValue + \");\";\n        }\n        return { query: insertSqlString, param: fieldParam };\n    },\n    save_reloadSavedEntity: function save_reloadSavedEntity(rowid, tableName) {\n        return { query: \"SELECT * FROM \" + tableName + \" WHERE rowid=?\", param: [rowid] };\n    },\n    createSqlFromStorageModel: function createSqlFromStorageModel(memberDef) {\n        ///<param name=\"memberDef\" type=\"$data.StorageModel\">StorageModel object wich contains physical entity definition</param>\n        if (memberDef === undefined || memberDef === null || memberDef.PhysicalType === undefined) {\n            _core.Guard.raise(\"StorageModel not contains physical entity definition\");\n        }\n\n        var keyFieldNumber = 0;\n        var autoincrementFieldNumber = 0;\n\n        memberDef.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (item, index) {\n\n            if (item.key) {\n                keyFieldNumber++;\n            }\n            if (item.computed) {\n                //if (!item.key) {\n                //    Guard.raise(new Exception('Only key field can be computed field!'));\n                //}\n                autoincrementFieldNumber++;\n            }\n        }, this);\n\n        if (autoincrementFieldNumber === 1 && keyFieldNumber > 1) {\n            _core.Guard.raise(new _core.Exception('Do not use computed field with multiple primary key!'));\n        }\n        if (autoincrementFieldNumber > 1 && keyFieldNumber > 1) {\n            _core.Guard.raise(new _core.Exception('Do not use multiple computed field!'));\n        }\n\n        memberDef.PhysicalType.memberDefinitions.getKeyProperties().forEach(function (item, index) {\n            var typeName = _core.Container.resolveName(item.type);\n            if (item.computed && !(typeName in this.supportedAutoincrementKeys)) {\n                console.log(\"WARRNING! '\" + typeName + \"' not supported as computed Key!\");\n            }\n        }, this);\n\n        var sql = \"CREATE TABLE IF NOT EXISTS [\" + memberDef.TableName + \"] (\";\n        var pkFragment = ',PRIMARY KEY (';\n\n        memberDef.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (item, index) {\n\n            if (index > 0 && !sql.match(', $') && !sql.match('\\\\($')) sql += ', ';\n            //var field = memberDef.createNew.memberDefinitions[fieldIndex];\n            sql += this.createSqlFragmentFromField(item, autoincrementFieldNumber === 1, memberDef);\n            if (autoincrementFieldNumber === 0 && item.key) {\n                if (pkFragment.length > 14 && !pkFragment.match(', $')) pkFragment += ', ';\n                pkFragment += \"[\" + item.name + \"]\";\n            }\n        }, this);\n\n        if (sql.match(', $')) sql = sql.substr(0, sql.length - 2);\n        if (autoincrementFieldNumber === 0 && pkFragment.length > 14) {\n            sql += pkFragment + ')';\n        }\n        sql += ');';\n        return sql;\n    },\n    createSqlFragmentFromField: function createSqlFragmentFromField(field, parsePk, storageModelObject) {\n        if ('schemaCreate' in field && field['schemaCreate']) return field.schemaCreate(field);\n\n        var fldBuilder = new this.FieldTypeBuilder(field, this, parsePk, storageModelObject);\n        return fldBuilder.build();\n    },\n    FieldTypeBuilder: function FieldTypeBuilder(field, prov, parseKey, storageModelObject) {\n        this.fieldDef = \"\";\n        this.fld = field;\n        this.provider = prov;\n        this.parsePk = parseKey;\n        this.entitySet = storageModelObject;\n        this.build = function () {\n\n            var typeName = _core.Container.resolveName(this.fld.dataType);\n            var mapping = _core2.default.SqLiteFieldMapping[typeName];\n\n            if (mapping) {\n                this.buildFieldNameAndType(mapping);\n            } else {\n                this.buildRelations();\n            }\n\n            return this.fieldDef;\n        };\n        this.buildFieldNameAndType = function (type) {\n            this.fieldDef = \"[\" + this.fld.name + \"] \" + type;\n            this.parsePk ? this.buildPrimaryKey() : this.buildNotNull();\n        };\n        this.buildPrimaryKey = function () {\n            if (this.fld.key) {\n                this.fieldDef += \" PRIMARY KEY\";\n\n                var typeName = _core.Container.resolveName(this.fld.dataType);\n                if (this.provider.supportedAutoincrementKeys[typeName] === true) {\n                    this.buildAutoIncrement();\n                }\n            } else {\n                this.buildNotNull();\n            }\n        };\n        this.buildNotNull = function () {\n            if (this.fld.required) this.fieldDef += \" NOT NULL\";\n        };\n        this.buildAutoIncrement = function () {\n            if (this.fld.computed) this.fieldDef += \" AUTOINCREMENT\";\n        };\n    }\n}, {\n    isSupported: {\n        get: function get() {\n            return \"openDatabase\" in _core2.default.__global;\n        },\n        set: function set() {}\n    }\n});\n\nif (_core2.default.storageProviders.sqLite.SqLiteStorageProvider.isSupported) {\n    _core2.default.StorageProviderBase.registerProvider(\"webSql\", _core2.default.storageProviders.sqLite.SqLiteStorageProvider);\n    _core2.default.StorageProviderBase.registerProvider(\"sqLite\", _core2.default.storageProviders.sqLite.SqLiteStorageProvider);\n    _core2.default.webSqlProvider = _core2.default.storageProviders.sqLite.SqLiteStorageProvider;\n}\n\n},{\"jaydata/core\":\"jaydata/core\"}],13:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.sqLite.SqlExpressionMonitor', _core2.default.Expressions.ExpressionMonitor, null, {\n    constructor: function constructor(monitorDefinition) {\n        this.VisitIncludeExpression = function (expression, context) {\n            var newSourceExpression = this.Visit(expression.source, context);\n            monitorDefinition.isMapped = true;\n            var newSelectorExpresion = this.Visit(expression.selector, context);\n            monitorDefinition.isMapped = false;\n\n            if (newSourceExpression !== expression.source || newSelectorExpresion !== expression.selector) {\n                return _core.Container.createIncludeExpression(newSourceExpression, newSelectorExpresion);\n            }\n            return expression;\n        };\n        this.VisitProjectionExpression = function (expression, context) {\n            var source = this.Visit(expression.source, context);\n            monitorDefinition.isMapped = true;\n            var selector = this.Visit(expression.selector, context);\n            monitorDefinition.isMapped = false;\n            if (source !== expression.source || selector !== expression.selector) {\n                var expr = _core.Container.createProjectionExpression(source, selector, expression.params, expression.instance);\n                expr.projectionAs = expression.projectionAs;\n                return expr;\n            }\n            return expression;\n        };\n    }\n\n});\n\n},{\"jaydata/core\":\"jaydata/core\"}],14:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _SqLiteCompiler = _dereq_('./SqLiteCompiler.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.sqLite.SqlFilterCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, sqlBuilder) {\n        this.Visit(expression.expression, sqlBuilder);\n    },\n\n    VisitUnaryExpression: function VisitUnaryExpression(expression, sqlBuilder) {\n        /// <param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"></param>\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\n        sqlBuilder.addText(expression.resolution.mapTo);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.beginGroup);\n        this.Visit(expression.operand, sqlBuilder);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.endGroup);\n    },\n\n    VisitSimpleBinaryExpression: function VisitSimpleBinaryExpression(expression, sqlBuilder) {\n        /// <param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"></param>\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\n        var self = this;\n\n        if (expression.nodeType == \"arrayIndex\") {\n            this.Visit(expression.left, sqlBuilder);\n        } else {\n            sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.beginGroup);\n\n            //check null filter\n            if (expression.left instanceof _core2.default.Expressions.EntityFieldExpression && expression.right instanceof _core2.default.Expressions.ConstantExpression && expression.right.value === null) {\n                this.Visit(expression.left, sqlBuilder);\n                sqlBuilder.addText(expression.resolution.nullMap);\n            } else if (expression.right instanceof _core2.default.Expressions.EntityFieldExpression && expression.left instanceof _core2.default.Expressions.ConstantExpression && expression.left.value === null) {\n                this.Visit(expression.right, sqlBuilder);\n                sqlBuilder.addText(expression.resolution.nullMap);\n            } else {\n                this.Visit(expression.left, sqlBuilder);\n                sqlBuilder.addText(\" \" + expression.resolution.mapTo + \" \");\n\n                if (expression.nodeType == \"in\") {\n                    //TODO: refactor and generalize\n                    _core.Guard.requireType(\"expression.right\", expression.right, _core2.default.Expressions.ConstantExpression);\n                    var set = expression.right.value;\n                    if (set instanceof Array) {\n                        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.beginGroup);\n                        set.forEach(function (item, i) {\n                            if (i > 0) sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.valueSeparator);\n                            self.Visit(item, sqlBuilder);\n                        });\n                        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.endGroup);\n                    } else if (set instanceof _core2.default.Queryable) {\n                        var subsql = set.toTraceString();\n                        sqlBuilder.addText(\"(SELECT d FROM (\" + subsql.sqlText.replace(new RegExp(\"(T[0-9]+(\\.|\\s|))\", \"g\"), \"SQ$1\") + \"))\");\n                        subsql.params.forEach(function (p) {\n                            sqlBuilder.addParameter(p);\n                        });\n                        //Guard.raise(\"Not yet... but coming!\");\n                    } else {\n                        _core.Guard.raise(new _core.Exception(\"Only constant arrays and Queryables can be on the right side of 'in' operator\", \"UnsupportedType\"));\n                    };\n                } else {\n                    this.Visit(expression.right, sqlBuilder);\n                }\n            }\n\n            sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.endGroup);\n        }\n    },\n\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, sqlBuilder) {\n        /// <param name=\"expression\" type=\"$data.Expressions.EntitySetExpression\"></param>\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\n\n        var alias = sqlBuilder.getExpressionAlias(expression);\n        sqlBuilder.addText(alias);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.nameSeparator);\n    },\n    VisitEntityFieldOperationExpression: function VisitEntityFieldOperationExpression(expression, sqlBuilder) {\n        /// <param name=\"expression\" type=\"$data.Expressions.EntityFieldOperationExpression\"></param>\n        /// <param name=\"sqlBuilder\"></param>\n\n        //this.Visit(expression.operation);\n\n        _core.Guard.requireType(\"expression.operation\", expression.operation, _core2.default.Expressions.MemberInfoExpression);\n        var opDefinition = expression.operation.memberDefinition;\n        var opName = opDefinition.mapTo || opDefinition.name;\n\n        sqlBuilder.addText(opName);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.beginGroup);\n        if (opName === \"like\") {\n            var builder = _core2.default.sqLite.SqlBuilder.create([], sqlBuilder.entityContext);\n            builder.selectTextPart(\"fragment\");\n            this.Visit(expression.parameters[0], builder);\n            var fragment = builder.getTextPart(\"fragment\");\n            fragment.params.forEach(function (p) {\n                var v = p;\n                var paramDef = opDefinition.parameters[0];\n                var v = paramDef.prefix ? paramDef.prefix + v : v;\n                v = paramDef.suffix ? v + paramDef.suffix : v;\n                sqlBuilder.addParameter(v);\n            });\n            sqlBuilder.addText(fragment.text);\n            sqlBuilder.addText(\" , \");\n            this.Visit(expression.source, sqlBuilder);\n        } else {\n            this.Visit(expression.source, sqlBuilder);\n            expression.parameters.forEach(function (p) {\n                sqlBuilder.addText(\" , \");\n                this.Visit(p, sqlBuilder);\n            }, this);\n        };\n\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.endGroup);\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, sqlBuilder) {\n        /// <param name=\"expression\" type=\"$data.Expressions.MemberInfoExpression\"></param>\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\n\n        sqlBuilder.addText(expression.memberName);\n    },\n    VisitQueryParameterExpression: function VisitQueryParameterExpression(expression, sqlBuilder) {\n        var value = null;\n        if (expression.type == \"array\") {\n            value = expression.value[expression.index];\n        } else {\n            value = expression.value;\n        }\n        sqlBuilder.addParameter(value);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.parameter);\n    },\n\n    VisitConstantExpression: function VisitConstantExpression(expression, sqlBuilder) {\n        //var typeNameHintFromValue = Container.getTypeName(expression.value);\n        var value = sqlBuilder.entityContext.storageProvider.fieldConverter.toDb[_core.Container.resolveName(_core.Container.resolveType(expression.type))](expression.value);;\n        sqlBuilder.addParameter(value);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.parameter);\n    },\n\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n        this.Visit(expression.selector, sqlBuilder);\n    },\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n        this.Visit(expression.selector, sqlBuilder);\n        sqlBuilder.addText(\"__\");\n    }\n});\n\n},{\"./SqLiteCompiler.js\":10,\"jaydata/core\":\"jaydata/core\"}],15:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _SqLiteCompiler = _dereq_('./SqLiteCompiler.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.sqLite.SqlOrderCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(provider) {\n        this.provider = provider;\n    },\n    compile: function compile(expression, sqlBuilder) {\n        this.Visit(expression, sqlBuilder);\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, sqlBuilder) {\n        /// <param name=\"expression\" type=\"$data.Expressions.EntitySetExpression\"></param>\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\n\n        var alias = sqlBuilder.getExpressionAlias(expression);\n        sqlBuilder.addText(alias);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.nameSeparator);\n    },\n    VisitOrderExpression: function VisitOrderExpression(expression, sqlBuilder) {\n        this.Visit(expression.selector, sqlBuilder);\n        if (expression.nodeType == _core2.default.Expressions.ExpressionType.OrderByDescending) {\n            sqlBuilder.addText(\" DESC\");\n        } else {\n            sqlBuilder.addText(\" ASC\");\n        }\n    },\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, sqlBuilder) {\n        this.Visit(expression.expression, sqlBuilder);\n    },\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n        this.Visit(expression.selector, sqlBuilder);\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, sqlBuilder) {\n        sqlBuilder.addText(expression.memberName);\n    },\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, sqlBuilder) {\n        this.Visit(expression.source, sqlBuilder);\n        this.Visit(expression.selector, sqlBuilder);\n        sqlBuilder.addText('__');\n    }\n});\n\n},{\"./SqLiteCompiler.js\":10,\"jaydata/core\":\"jaydata/core\"}],16:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _SqLiteCompiler = _dereq_('./SqLiteCompiler.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.sqLite.SqlPagingCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(provider) {\n        this.provider = provider;\n    },\n    compile: function compile(expression, context) {\n        this.Visit(expression, context);\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, sqlBuilder) {\n        this.Visit(expression.amount, sqlBuilder);\n    },\n    VisitConstantExpression: function VisitConstantExpression(expression, sqlBuilder) {\n        sqlBuilder.addParameter(expression.value);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.parameter);\n    }\n});\n\n},{\"./SqLiteCompiler.js\":10,\"jaydata/core\":\"jaydata/core\"}],17:[function(_dereq_,module,exports){\n'use strict';\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _SqLiteCompiler = _dereq_('./SqLiteCompiler.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.sqLite.SqlProjectionCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor() {\n        this.anonymFiledPrefix = \"\";\n        this.currentObjectLiteralName = null;\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, sqlBuilder) {\n        this.Visit(expression.selector, sqlBuilder);\n    },\n\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, sqlBuilder) {\n        if (expression.expression instanceof _core2.default.Expressions.EntityExpression) {\n            this.VisitEntitySetExpression(sqlBuilder.sets[0], sqlBuilder);\n            sqlBuilder.addText(\"rowid AS \" + this.anonymFiledPrefix + _SqLiteCompiler.SqlStatementBlocks.rowIdName + \", \");\n            this.VisitEntityExpressionAsProjection(expression, sqlBuilder);\n        } else if (expression.expression instanceof _core2.default.Expressions.EntitySetExpression) {\n            this.VisitEntitySetExpression(sqlBuilder.sets[0], sqlBuilder);\n            sqlBuilder.addText(\"rowid AS \" + this.anonymFiledPrefix + _SqLiteCompiler.SqlStatementBlocks.rowIdName + \", \");\n            this.anonymFiledPrefix = sqlBuilder.getExpressionAlias(expression.expression) + '__';\n            this.MappedFullEntitySet(expression.expression, sqlBuilder);\n        } else if (expression.expression instanceof _core2.default.Expressions.ObjectLiteralExpression) {\n            this.VisitEntitySetExpression(sqlBuilder.sets[0], sqlBuilder);\n            sqlBuilder.addText(\"rowid AS \" + this.anonymFiledPrefix + _SqLiteCompiler.SqlStatementBlocks.rowIdName + \", \");\n            this.Visit(expression.expression, sqlBuilder);\n        } else {\n            this.VisitEntitySetExpression(sqlBuilder.sets[0], sqlBuilder);\n            sqlBuilder.addText(\"rowid\");\n            sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.as);\n            sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.rowIdName);\n            sqlBuilder.addText(', ');\n            sqlBuilder.addKeyField(_SqLiteCompiler.SqlStatementBlocks.rowIdName);\n            this.Visit(expression.expression, sqlBuilder);\n            if (!(expression.expression instanceof _core2.default.Expressions.ComplexTypeExpression)) {\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.as);\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.scalarFieldName);\n            }\n        }\n    },\n\n    VisitEntityExpressionAsProjection: function VisitEntityExpressionAsProjection(expression, sqlBuilder) {\n        var ee = expression.expression;\n        var alias = sqlBuilder.getExpressionAlias(ee.source);\n\n        var localPrefix = this.anonymFiledPrefix + (expression.fieldName ? expression.fieldName : '');\n        localPrefix = localPrefix ? localPrefix + '__' : '';\n\n        ee.storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (memberInfo, index) {\n            if (index > 0) {\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.valueSeparator);\n            }\n\n            var fieldName = localPrefix + memberInfo.name;\n\n            sqlBuilder.addText(alias);\n            sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.nameSeparator);\n            sqlBuilder.addText(memberInfo.name);\n            sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.as);\n            sqlBuilder.addText(fieldName);\n        }, this);\n    },\n\n    VisitEntityFieldOperationExpression: function VisitEntityFieldOperationExpression(expression, sqlBuilder) {\n        /// <param name=\"expression\" type=\"$data.Expressions.EntityFieldOperationExpression\"></param>\n        /// <param name=\"sqlBuilder\"></param>\n\n        _core.Guard.requireType(\"expression.operation\", expression.operation, _core2.default.Expressions.MemberInfoExpression);\n        var opDefinition = expression.operation.memberDefinition;\n        var opName = opDefinition.mapTo || opDefinition.name;\n\n        sqlBuilder.addText(opName);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.beginGroup);\n        if (opName === \"like\") {\n            var builder = _core2.default.sqLite.SqlBuilder.create();\n            this.Visit(expression.parameters[0], builder);\n            builder.params.forEach(function (p) {\n                var v = p;\n                var paramDef = opDefinition.parameters[0];\n                var v = paramDef.prefix ? paramDef.prefix + v : v;\n                v = paramDef.suffix ? v + paramDef.suffix : v;\n                sqlBuilder.addParameter(v);\n            });\n            sqlBuilder.addText(builder.sql);\n            sqlBuilder.addText(\" , \");\n            this.Visit(expression.source, sqlBuilder);\n        } else {\n            this.Visit(expression.source, sqlBuilder);\n            expression.parameters.forEach(function (p) {\n                sqlBuilder.addText(\" , \");\n                this.Visit(p, sqlBuilder);\n            }, this);\n        };\n\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.endGroup);\n    },\n\n    VisitUnaryExpression: function VisitUnaryExpression(expression, sqlBuilder) {\n        /// <param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"></param>\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\n        sqlBuilder.addText(expression.resolution.mapTo);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.beginGroup);\n        this.Visit(expression.operand, sqlBuilder);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.endGroup);\n    },\n\n    VisitSimpleBinaryExpression: function VisitSimpleBinaryExpression(expression, sqlBuilder) {\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.beginGroup);\n        this.Visit(expression.left, sqlBuilder);\n        var self = this;\n        sqlBuilder.addText(\" \" + expression.resolution.mapTo + \" \");\n        if (expression.nodeType == \"in\") {\n            //TODO: refactor and generalize\n            _core.Guard.requireType(\"expression.right\", expression.right, _core2.default.Expressions.ConstantExpression);\n            var set = expression.right.value;\n            if (set instanceof Array) {\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.beginGroup);\n                set.forEach(function (item, i) {\n                    if (i > 0) sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.valueSeparator);\n                    var c = _core.Container.createConstantExpression(item);\n                    self.Visit(c, sqlBuilder);\n                });\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.endGroup);\n            } else if (set instanceof _core2.default.Queryable) {\n                _core.Guard.raise(\"not yet... but coming\");\n            } else {\n                _core.Guard.raise(new _core.Exception(\"Only constant arrays and Queryables can be on the right side of 'in' operator\", \"UnsupportedType\"));\n            };\n        } else {\n            this.Visit(expression.right, sqlBuilder);\n        }\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.endGroup);\n    },\n\n    VisitConstantExpression: function VisitConstantExpression(expression, sqlBuilder) {\n        var value = expression.value;\n        sqlBuilder.addParameter(value);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.parameter);\n    },\n\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, sqlBuilder) {\n        if (expression.source instanceof _core2.default.Expressions.ComplexTypeExpression) {\n            var alias = sqlBuilder.getExpressionAlias(expression.source.source.source);\n            var storageModel = expression.source.source.storageModel.ComplexTypes[expression.source.selector.memberName];\n            var member = storageModel.ReferentialConstraint.filter(function (item) {\n                return item[expression.source.selector.memberName] == expression.selector.memberName;\n            })[0];\n            if (!member) {\n                _core.Guard.raise(new _core.Exception('Compiler error! ComplexType does not contain ' + expression.source.selector.memberName + ' property!'));return;\n            }\n\n            sqlBuilder.addText(alias);\n            sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.nameSeparator);\n            sqlBuilder.addText(member[storageModel.From]);\n        } else {\n            this.Visit(expression.source, sqlBuilder);\n            this.Visit(expression.selector, sqlBuilder);\n        }\n    },\n\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, sqlBuilder) {\n        var alias = sqlBuilder.getExpressionAlias(expression);\n        sqlBuilder.addText(alias);\n        sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.nameSeparator);\n    },\n\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, sqlBuilder) {\n        var alias = sqlBuilder.getExpressionAlias(expression.source.source);\n        var storageModel = expression.source.storageModel.ComplexTypes[expression.selector.memberName];\n        storageModel.ReferentialConstraint.forEach(function (constrain, index) {\n            if (index > 0) {\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.valueSeparator);\n            }\n            sqlBuilder.addText(alias);\n            sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.nameSeparator);\n            sqlBuilder.addText(constrain[storageModel.From]);\n            sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.as);\n            sqlBuilder.addText(this.anonymFiledPrefix + constrain[storageModel.To]);\n        }, this);\n    },\n\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, sqlBuilder) {\n        /// <param name=\"expression\" type=\"$data.Expressions.MemberInfoExpression\"></param>\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\n        sqlBuilder.addText(expression.memberName);\n    },\n\n    VisitObjectLiteralExpression: function VisitObjectLiteralExpression(expression, sqlBuilder) {\n        var membersNumber = expression.members.length;\n        for (var i = 0; i < membersNumber; i++) {\n            if (i != 0) {\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.valueSeparator);\n            }\n            this.Visit(expression.members[i], sqlBuilder);\n        }\n    },\n    MappedFullEntitySet: function MappedFullEntitySet(expression, sqlBuilder) {\n        var alias = sqlBuilder.getExpressionAlias(expression);\n        var properties = expression.storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties();\n        properties.forEach(function (prop, index) {\n            if (!prop.association) {\n                if (index > 0) {\n                    sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.valueSeparator);\n                }\n                sqlBuilder.addText(alias);\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.nameSeparator);\n                sqlBuilder.addText(prop.name);\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.as);\n                sqlBuilder.addText(this.anonymFiledPrefix + prop.name);\n            }\n        }, this);\n        //ToDo: complex type\n    },\n    VisitObjectFieldExpression: function VisitObjectFieldExpression(expression, sqlBuilder) {\n\n        var tempObjectLiteralName = this.currentObjectLiteralName;\n        if (this.currentObjectLiteralName) {\n            this.currentObjectLiteralName += '.' + expression.fieldName;\n        } else {\n            this.currentObjectLiteralName = expression.fieldName;\n        }\n\n        if (expression.expression instanceof _core2.default.Expressions.EntityExpression) {\n            this.VisitEntityExpressionAsProjection(expression, sqlBuilder);\n        } else {\n\n            var tmpPrefix = this.anonymFiledPrefix;\n            this.anonymFiledPrefix += expression.fieldName + \"__\";\n\n            if (expression.expression instanceof _core2.default.Expressions.EntitySetExpression) {\n                this.MappedFullEntitySet(expression.expression, sqlBuilder);\n            } else {\n                this.Visit(expression.expression, sqlBuilder);\n            }\n\n            this.anonymFiledPrefix = tmpPrefix;\n\n            if (!(expression.expression instanceof _core2.default.Expressions.ObjectLiteralExpression) && !(expression.expression instanceof _core2.default.Expressions.ComplexTypeExpression) && !(expression.expression instanceof _core2.default.Expressions.EntitySetExpression)) {\n                sqlBuilder.addText(_SqLiteCompiler.SqlStatementBlocks.as);\n                sqlBuilder.addText(this.anonymFiledPrefix + expression.fieldName);\n            }\n        }\n        this.currentObjectLiteralName = tempObjectLiteralName;\n    }\n\n}, null);\n\n},{\"./SqLiteCompiler.js\":10,\"jaydata/core\":\"jaydata/core\"}],18:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _core = _dereq_('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _DbCommand = _dereq_('../../DbClient/DbCommand.js');\n\nvar _DbCommand2 = _interopRequireDefault(_DbCommand);\n\nvar _DbConnection = _dereq_('../../DbClient/DbConnection.js');\n\nvar _DbConnection2 = _interopRequireDefault(_DbConnection);\n\nvar _OpenDbCommand = _dereq_('../../DbClient/OpenDatabaseClient/OpenDbCommand.js');\n\nvar _OpenDbCommand2 = _interopRequireDefault(_OpenDbCommand);\n\nvar _OpenDbConnection = _dereq_('../../DbClient/OpenDatabaseClient/OpenDbConnection.js');\n\nvar _OpenDbConnection2 = _interopRequireDefault(_OpenDbConnection);\n\nvar _JayStorageCommand = _dereq_('../../DbClient/JayStorageClient/JayStorageCommand.js');\n\nvar _JayStorageCommand2 = _interopRequireDefault(_JayStorageCommand);\n\nvar _JayStorageConnection = _dereq_('../../DbClient/JayStorageClient/JayStorageConnection.js');\n\nvar _JayStorageConnection2 = _interopRequireDefault(_JayStorageConnection);\n\nvar _SqLiteNjCommand = _dereq_('../../DbClient/SqLiteNjClient/SqLiteNjCommand.js');\n\nvar _SqLiteNjCommand2 = _interopRequireDefault(_SqLiteNjCommand);\n\nvar _SqLiteNjConnection = _dereq_('../../DbClient/SqLiteNjClient/SqLiteNjConnection.js');\n\nvar _SqLiteNjConnection2 = _interopRequireDefault(_SqLiteNjConnection);\n\nvar _SqLiteConverter = _dereq_('./SqLiteConverter.js');\n\nvar _SqLiteConverter2 = _interopRequireDefault(_SqLiteConverter);\n\nvar _SqLiteStorageProvider = _dereq_('./SqLiteStorageProvider.js');\n\nvar _SqLiteStorageProvider2 = _interopRequireDefault(_SqLiteStorageProvider);\n\nvar _SqLiteCompiler = _dereq_('./SqLiteCompiler.js');\n\nvar _SqLiteCompiler2 = _interopRequireDefault(_SqLiteCompiler);\n\nvar _SqlPagingCompiler = _dereq_('./SqlPagingCompiler.js');\n\nvar _SqlPagingCompiler2 = _interopRequireDefault(_SqlPagingCompiler);\n\nvar _SqlOrderCompiler = _dereq_('./SqlOrderCompiler.js');\n\nvar _SqlOrderCompiler2 = _interopRequireDefault(_SqlOrderCompiler);\n\nvar _SqlProjectionCompiler = _dereq_('./SqlProjectionCompiler.js');\n\nvar _SqlProjectionCompiler2 = _interopRequireDefault(_SqlProjectionCompiler);\n\nvar _SqlExpressionMonitor = _dereq_('./SqlExpressionMonitor.js');\n\nvar _SqlExpressionMonitor2 = _interopRequireDefault(_SqlExpressionMonitor);\n\nvar _SqlFilterCompiler = _dereq_('./SqlFilterCompiler.js');\n\nvar _SqlFilterCompiler2 = _interopRequireDefault(_SqlFilterCompiler);\n\nvar _sqLite_ModelBinderCompiler = _dereq_('./ModelBinder/sqLite_ModelBinderCompiler.js');\n\nvar _sqLite_ModelBinderCompiler2 = _interopRequireDefault(_sqLite_ModelBinderCompiler);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _core2.default;\n\n//provider\n\n\n//dbCommand\n\nmodule.exports = exports['default'];\n\n},{\"../../DbClient/DbCommand.js\":1,\"../../DbClient/DbConnection.js\":2,\"../../DbClient/JayStorageClient/JayStorageCommand.js\":3,\"../../DbClient/JayStorageClient/JayStorageConnection.js\":4,\"../../DbClient/OpenDatabaseClient/OpenDbCommand.js\":5,\"../../DbClient/OpenDatabaseClient/OpenDbConnection.js\":6,\"../../DbClient/SqLiteNjClient/SqLiteNjCommand.js\":7,\"../../DbClient/SqLiteNjClient/SqLiteNjConnection.js\":8,\"./ModelBinder/sqLite_ModelBinderCompiler.js\":9,\"./SqLiteCompiler.js\":10,\"./SqLiteConverter.js\":11,\"./SqLiteStorageProvider.js\":12,\"./SqlExpressionMonitor.js\":13,\"./SqlFilterCompiler.js\":14,\"./SqlOrderCompiler.js\":15,\"./SqlPagingCompiler.js\":16,\"./SqlProjectionCompiler.js\":17,\"jaydata/core\":\"jaydata/core\"}]},{},[18])(18)\n});\n\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.dbClient.DbCommand', null, null,\r\n{\r\n    connection: {},\r\n    parameters: {},\r\n    execute: function (callback) {\r\n        Guard.raise(\"Pure class\");\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.dbClient.DbConnection', null, null,\r\n{\r\n    connectionParams: {},\r\n    database: {},\r\n    isOpen: function () {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    open: function () {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    close: function () {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    createCommand: function () {\r\n        Guard.raise(\"Pure class\");\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.dbClient.jayStorageClient.JayStorageCommand', $data.dbClient.DbCommand, null,\r\n{\r\n    constructor: function (con, queryStr, params) {\r\n        this.query = queryStr;\r\n        this.connection = con;\r\n        this.parameters = params;\r\n    },\r\n    executeNonQuery: function (callback) {\r\n        // TODO\r\n        callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n        this.exec(this.query, this.parameters, callback.success, callback.error);\r\n    },\r\n    executeQuery: function (callback) {\r\n        callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n        this.exec(this.query, this.parameters, callback.success, callback.error);\r\n    },\r\n    exec: function (query, parameters, callback, errorhandler) {\r\n        if (parameters == null || parameters == undefined) {\r\n            parameters = {};\r\n        }\r\n        var single = false;\r\n        if (!(query instanceof Array)) {\r\n            single = true;\r\n            query = [query];\r\n            parameters = [parameters];\r\n        }\r\n\r\n        var provider = this;\r\n        var results = [];\r\n        var remainingCommands = query.length;\r\n        var decClb = function () {\r\n            if (--remainingCommands == 0) {\r\n                callback(single ? results[0] : results);\r\n            }\r\n        };\r\n\r\n\t\tquery.forEach(function(q, i){\r\n\t\t\tif (q){\r\n\t\t\t\t$data.ajax({\r\n\t\t\t\t\turl: 'http' + (this.connection.connectionParams.storage.ssl ? 's' : '') + '://' + this.connection.connectionParams.storage.src.replace('http://', '').replace('https://', '') + '?db=' + this.connection.connectionParams.storage.key,\r\n\t\t\t\t\ttype: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'X-PINGOTHER': 'pingpong'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdata: { query: q, parameters: parameters[i] },\r\n\t\t\t\t\tdataType: 'json',\r\n\t\t\t\t\tcontentType: 'application/json;charset=UTF-8',\r\n\t\t\t\t\tsuccess: function(data){\r\n\t\t\t\t\t\tif (data && data.error){\r\n\t\t\t\t\t\t\tconsole.log('JayStorage error', data.error);\r\n\t\t\t\t\t\t\terrorhandler(data.error);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.lastID){\r\n\t\t\t\t\t\t\tresults[i] = { insertId: this.lastID, rows: (data || { rows: [] }).rows };\r\n\t\t\t\t\t\t}else results[i] = { rows: (data || { rows: [] }).rows };\r\n \t\t\t\t\t\tdecClb();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}else{\r\n\t\t\t\tresults[i] = null;\r\n\t\t\t\tdecClb();\r\n\t\t\t}\r\n\t\t}, this);\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.dbClient.jayStorageClient.JayStorageConnection', $data.dbClient.DbConnection, null,\r\n{\r\n    constructor: function (params) {\r\n        this.connectionParams = params;\r\n    },\r\n    isOpen: function () {\r\n\t\treturn true;\r\n        //return this.database !== null && this.database !== undefined;\r\n    },\r\n    open: function () {\r\n        /*if (this.database == null) {\r\n            var p = this.connectionParams;\r\n            this.database = new sqLiteModule.Database(p.fileName);\r\n        }*/\r\n    },\r\n    close: function () {\r\n        //not supported yet (performance issue)\r\n    },\r\n    createCommand: function (queryStr, params) {\r\n        var cmd = new $data.dbClient.jayStorageClient.JayStorageCommand(this, queryStr, params);\r\n        return cmd;\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.dbClient.openDatabaseClient.OpenDbCommand', $data.dbClient.DbCommand, null,\r\n{\r\n    constructor: function (con, queryStr, params) {\r\n        this.query = queryStr;\r\n        this.connection = con;\r\n        this.parameters = params;\r\n    },\r\n    executeNonQuery: function (callback, tran, isWrite) {\r\n        callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n        this.exec(this.query, this.parameters, callback.success, callback.error, tran, isWrite);\r\n    },\r\n    executeQuery: function (callback, tran, isWrite) {\r\n        callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n        this.exec(this.query, this.parameters, callback.success, callback.error, tran, isWrite);\r\n    },\r\n    exec: function (query, parameters, callback, errorhandler, transaction, isWrite) {\r\n        // suspicious code\r\n        /*if (console) {\r\n            //console.log(query);\r\n        }*/\r\n        this.connection.open({\r\n            error: errorhandler,\r\n            success: function (tran) {\r\n                var single = false;\r\n                if (!(query instanceof Array)) {\r\n                    single = true;\r\n                    query = [query];\r\n                    parameters = [parameters];\r\n                }\r\n\r\n                var results = [];\r\n                var remainingCommands = 0;\r\n\r\n                function decClb() {\r\n                    if (--remainingCommands == 0) {\r\n                        callback(single ? results[0] : results, transaction);\r\n                    }\r\n                }\r\n\r\n                query.forEach(function (q, i) {\r\n                    remainingCommands++;\r\n                    if (q) {\r\n                        tran.executeSql(\r\n                            query[i],\r\n                            parameters[i],\r\n                            function (trx, result) {\r\n                                var r = { rows: [] };\r\n                                try {\r\n                                    r.insertId = result.insertId;\r\n                                } catch (e) {}\r\n                                if (typeof r.insertId !== 'number') {\r\n                                    // If insertId is present, no rows are returned\r\n                                    r.rowsAffected = result.rowsAffected;\r\n                                    var maxItem = result.rows.length;\r\n                                    for (var j = 0; j < maxItem; j++) {\r\n                                        r.rows.push(result.rows.item(j));\r\n                                    }\r\n                                }\r\n                                results[i] = r;\r\n                                decClb(trx);\r\n                            },\r\n                            function (trx, err) {\r\n                                var _q = q;\r\n                                var _i = i;\r\n\r\n                                if (errorhandler)\r\n                                    errorhandler(err);\r\n\r\n                                return true;\r\n                            }\r\n                        );\r\n                    } else {\r\n                        results[i] = null;\r\n                        decClb();\r\n                    }\r\n                });\r\n            }\r\n        }, transaction, isWrite);\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.dbClient.openDatabaseClient.OpenDbConnection', $data.dbClient.DbConnection, null,\r\n{\r\n    constructor: function (params) {\r\n        this.connectionParams = params;\r\n    },\r\n    isOpen: function () {\r\n        return this.database !== null && this.database !== undefined && this.transaction !== null && this.transaction !== undefined;\r\n    },\r\n    open: function (callBack, tran, isWrite) {\r\n        if (isWrite === undefined)\r\n            isWrite = true;\r\n\r\n        callBack.oncomplete = callBack.oncomplete || function () { };\r\n        if (tran) {\r\n            callBack.success(tran.transaction);\r\n        } else if (this.database) {\r\n            if (isWrite) {\r\n                this.database.transaction(function (tran) { callBack.success(tran); }, callBack.error, callBack.oncomplete);\r\n            } else {\r\n                this.database.readTransaction(function (tran) { callBack.success(tran); }, callBack.error, callBack.oncomplete);\r\n            }\r\n        } else {\r\n            var p = this.connectionParams;\r\n            var con = this;\r\n            this.database = openDatabase(p.fileName, p.version, p.displayName, p.maxSize);\r\n            if (!this.database.readTransaction) {\r\n                this.database.readTransaction = function () {\r\n                    con.database.transaction.apply(con.database, arguments);\r\n                }\r\n            }\r\n\r\n            if (isWrite) {\r\n                this.database.transaction(function (tran) { callBack.success(tran); }, callBack.error, callBack.oncomplete);\r\n            } else {\r\n                this.database.readTransaction(function (tran) { callBack.success(tran); }, callBack.error, callBack.oncomplete);\r\n            }\r\n        }\r\n    },\r\n    close: function () {\r\n        this.transaction = undefined;\r\n        this.database = undefined;\r\n    },\r\n    createCommand: function (queryStr, params) {\r\n        var cmd = new $data.dbClient.openDatabaseClient.OpenDbCommand(this, queryStr, params);\r\n        return cmd;\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.dbClient.sqLiteNJClient.SqLiteNjCommand', $data.dbClient.DbCommand, null,\r\n{\r\n    constructor: function (con, queryStr, params) {\r\n        this.query = queryStr;\r\n        this.connection = con;\r\n        this.parameters = params;\r\n    },\r\n    executeNonQuery: function (callback) {\r\n        // TODO\r\n        callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n        this.exec(this.query, this.parameters, callback.success, callback.error);\r\n    },\r\n    executeQuery: function (callback) {\r\n        callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n        this.exec(this.query, this.parameters, callback.success, callback.error);\r\n    },\r\n    exec: function (query, parameters, callback, errorhandler) {\r\n        if (!this.connection.isOpen()) {\r\n            this.connection.open();\r\n        }\r\n        if (parameters == null || parameters == undefined) {\r\n            parameters = {};\r\n        }\r\n        var single = false;\r\n        if (!(query instanceof Array)) {\r\n            single = true;\r\n            query = [query];\r\n            parameters = [parameters];\r\n        }\r\n\r\n        var provider = this;\r\n        var results = [];\r\n        var remainingCommands = 0;\r\n        var decClb = function () {\r\n            if (--remainingCommands == 0) {\r\n                provider.connection.database.exec('COMMIT');\r\n                callback(single ? results[0] : results);\r\n            }\r\n        };\r\n        provider.connection.database.exec('BEGIN');\r\n        query.forEach(function (q, i) {\r\n            remainingCommands++;\r\n            if (q) {\r\n                var sqlClb = function (error, rows) {\r\n                    if (error != null) {\r\n                        errorhandler(error);\r\n                        return;\r\n                    }\r\n                    if (this.lastID) {\r\n                        results[i] = { insertId: this.lastID, rows: [] };\r\n                    } else {\r\n                        results[i] = { rows: rows };\r\n                    }\r\n                    decClb();\r\n                };\r\n\r\n                var stmt = provider.connection.database.prepare(q, parameters[i]);\r\n                if (q.indexOf('SELECT') == 0) {\r\n                    stmt.all(sqlClb);\r\n                } else {\r\n                    stmt.run(sqlClb);\r\n                }\r\n                stmt.finalize();\r\n            } else {\r\n                results[i] = null;\r\n                decClb();\r\n            }\r\n        }, this);\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.dbClient.sqLiteNJClient.SqLiteNjConnection', $data.dbClient.DbConnection, null,\r\n{\r\n    constructor: function (params) {\r\n        this.connectionParams = params;\r\n    },\r\n    isOpen: function () {\r\n        return this.database !== null && this.database !== undefined;\r\n    },\r\n    open: function () {\r\n        if (this.database == null) {\r\n            var p = this.connectionParams;\r\n            this.database = new sqLiteModule.Database(p.fileName);\r\n        }\r\n    },\r\n    close: function () {\r\n        //not supported yet (performance issue)\r\n    },\r\n    createCommand: function (queryStr, params) {\r\n        var cmd = new $data.dbClient.sqLiteNJClient.SqLiteNjCommand(this, queryStr, params);\r\n        return cmd;\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$C('$data.sqLite.sqLite_ModelBinderCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (query, context) {\r\n        this._query = query;\r\n        this.sqlContext = context;\r\n        this._sqlBuilder = $data.sqLite.SqlBuilder.create(context.sets, context.entityContext);\r\n    },\r\n    VisitSingleExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitSomeExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitFindExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitEveryExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitToArrayExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitFirstExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitForEachExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitCountExpression: function (expression) {\r\n        var builder = Container.createqueryBuilder();\r\n\r\n        builder.modelBinderConfig['$type'] = $data.Array;\r\n        builder.selectModelBinderProperty('$item');\r\n        builder.modelBinderConfig['$type'] = $data.Integer;\r\n        builder.modelBinderConfig['$source'] = 'cnt';\r\n        builder.resetModelBinderProperty();\r\n        this._query.modelBinderConfig = builder.modelBinderConfig;\r\n    },\r\n\r\n    VisitExpression: function (expression, builder) {\r\n        var projVisitor = Container.createFindProjectionVisitor();\r\n        projVisitor.Visit(expression);\r\n\r\n        if (projVisitor.projectionExpression) {\r\n            this.Visit(projVisitor.projectionExpression, builder);\r\n        } else {\r\n            this.DefaultSelection(builder);\r\n        }\r\n    },\r\n    _defaultModelBinder: function (expression) {\r\n        var builder = Container.createqueryBuilder();\r\n        builder.modelBinderConfig['$type'] = $data.Array;\r\n        builder.modelBinderConfig['$item'] = {};\r\n        builder.selectModelBinderProperty('$item');\r\n\r\n        this.VisitExpression(expression, builder);\r\n\r\n        builder.resetModelBinderProperty();\r\n        this._query.modelBinderConfig = builder.modelBinderConfig;\r\n    },\r\n    _addPropertyToModelBinderConfig: function (elementType, builder) {\r\n        var storageModel = this._query.context._storageModel.getStorageModel(elementType);\r\n        elementType.memberDefinitions.getPublicMappedProperties().forEach(function (prop) {\r\n            if ((!storageModel) || (storageModel && !storageModel.Associations[prop.name] && !storageModel.ComplexTypes[prop.name])) {\r\n                if (prop.key) {\r\n                    if (this.currentObjectFieldName) {\r\n                        builder.addKeyField(this.currentObjectFieldName + '__' + prop.name);\r\n                    } else {\r\n                        builder.addKeyField(prop.name);\r\n                    }\r\n                }\r\n                if (this.currentObjectFieldName) {\r\n                    builder.modelBinderConfig[prop.name] = this.currentObjectFieldName + '__' + prop.name;\r\n                } else {\r\n                    builder.modelBinderConfig[prop.name] = prop.name;\r\n                }\r\n            }\r\n        }, this);\r\n        if (storageModel) {\r\n            this._addComplexTypeProperties(storageModel.ComplexTypes, builder);\r\n        }\r\n    },\r\n    _addComplexTypeProperties: function (complexTypes, builder) {\r\n        complexTypes.forEach(function (ct) {\r\n\r\n            builder.selectModelBinderProperty(ct.FromPropertyName);\r\n            builder.modelBinderConfig['$type'] = ct.ToType;\r\n            var tmpPrefix = this.currentObjectFieldName;\r\n            if (this.currentObjectFieldName) {\r\n                this.currentObjectFieldName += '__';\r\n            } else {\r\n                this.currentObjectFieldName = '';\r\n            }\r\n            this.currentObjectFieldName += ct.FromPropertyName;\r\n            //recursion\r\n            this._addPropertyToModelBinderConfig(ct.ToType, builder);\r\n            //reset model binder property\r\n            builder.popModelBinderProperty();\r\n            this.currentObjectFieldName = tmpPrefix;\r\n\r\n        }, this);\r\n    },\r\n    DefaultSelection: function (builder) {\r\n        //no projection, get all item from entitySet\r\n        builder.modelBinderConfig['$type'] = this._query.defaultType;\r\n        var storageModel = this._query.context._storageModel.getStorageModel(this._query.defaultType);\r\n\r\n        var needPrefix = this.sqlContext.infos.filter(function (i) { return i.IsMapped; }).length > 1;\r\n        if (needPrefix) {\r\n            this.currentObjectFieldName = this._sqlBuilder.getExpressionAlias(this.sqlContext.sets[0]);\r\n        }\r\n        this._addPropertyToModelBinderConfig(this._query.defaultType, builder);\r\n        this.sqlContext.infos.forEach(function (info, infoIndex) {\r\n            if (infoIndex > 0 && info.IsMapped) {\r\n                var pathFragments = info.NavigationPath.split('.');\r\n                pathFragments.shift();\r\n                var popCnt = 0;\r\n                pathFragments.forEach(function (pathFragment, index) {\r\n                    if (!pathFragment) { return; }\r\n                    if (!builder.modelBinderConfig[pathFragment]) {\r\n                        builder.selectModelBinderProperty(pathFragment);\r\n                        if (info.Association.associationInfo.ToMultiplicity === '*' && pathFragments.length - 1 === index) {\r\n                            builder.modelBinderConfig['$type'] = $data.Array;\r\n                            builder.selectModelBinderProperty('$item');\r\n                            popCnt++;\r\n                        }\r\n\r\n                        builder.modelBinderConfig['$type'] = this.sqlContext.sets[infoIndex].elementType;\r\n                        this.currentObjectFieldName = this._sqlBuilder.getExpressionAlias(this.sqlContext.sets[infoIndex]);\r\n                        this._addPropertyToModelBinderConfig(this.sqlContext.sets[infoIndex].elementType, builder);\r\n                        while (popCnt--) builder.popModelBinderProperty();\r\n                    } else {\r\n                        builder.selectModelBinderProperty(pathFragment);\r\n                        if (builder.modelBinderConfig.$type == $data.Array){\r\n                            builder.selectModelBinderProperty(\"$item\");\r\n                            popCnt++;\r\n                        }\r\n                    }\r\n                }, this);\r\n                for (var i = 0; i < pathFragments.length; i++) {\r\n                    builder.popModelBinderProperty();\r\n                }\r\n            }\r\n        }, this);\r\n    },\r\n    VisitProjectionExpression: function (expression, builder) {\r\n        this.hasProjection = true;\r\n        this.Visit(expression.selector, builder);\r\n\r\n        if (expression.selector && expression.selector.expression instanceof $data.Expressions.ObjectLiteralExpression) {\r\n            builder.modelBinderConfig['$type'] = expression.projectionAs || builder.modelBinderConfig['$type'] || $data.Object;\r\n        }\r\n    },\r\n    VisitParametricQueryExpression: function (expression, builder) {\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression) {\r\n            this.VisitEntityAsProjection(expression.expression, builder);\r\n            builder.modelBinderConfig['$keys'].unshift('rowid$$');\r\n        } else if (expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            this.currentObjectFieldName = this._sqlBuilder.getExpressionAlias(expression.expression);\r\n            this.VisitEntitySetAsProjection(expression.expression, builder);\r\n            builder.modelBinderConfig['$keys'] = ['rowid$$'];\r\n        } else if (expression.expression instanceof $data.Expressions.ComplexTypeExpression) {\r\n            this.VisitEntityAsProjection(expression.expression, builder);\r\n        } else {\r\n            builder.modelBinderConfig['$keys'] = ['rowid$$'];\r\n            this.Visit(expression.expression, builder);\r\n            if (expression.expression instanceof $data.Expressions.EntityFieldExpression) {\r\n                builder.modelBinderConfig['$source'] = 'd';\r\n            }\r\n        }\r\n    },\r\n    VisitConstantExpression: function (expression, builder) {\r\n        builder.modelBinderConfig['$type'] = expression.type;\r\n        builder.modelBinderConfig['$source'] = this.currentObjectFieldName;\r\n    },\r\n    VisitEntityAsProjection: function (expression, builder) {\r\n        this.Visit(expression.source, builder);\r\n        builder.modelBinderConfig['$type'] = expression.entityType;\r\n        this._addPropertyToModelBinderConfig(expression.entityType, builder);\r\n    },\r\n    VisitEntitySetAsProjection: function (expression, builder) {\r\n        builder.modelBinderConfig['$type'] = $data.Array;\r\n        builder.selectModelBinderProperty('$item');\r\n        builder.modelBinderConfig['$type'] = expression.elementType;\r\n        this._addPropertyToModelBinderConfig(expression.elementType, builder);\r\n        builder.popModelBinderProperty();\r\n    },\r\n    VisitComplexTypeExpression: function (expression, builder) {\r\n        return expression;\r\n    },\r\n    VisitEntityFieldExpression: function (expression, builder) {\r\n        this.Visit(expression.source, builder);\r\n        this.Visit(expression.selector, builder);\r\n    },\r\n    VisitMemberInfoExpression: function (expression, builder) {\r\n        if (expression.memberDefinition instanceof $data.MemberDefinition) {\r\n            builder.modelBinderConfig['$type'] = expression.memberDefinition.type;\r\n            if (expression.memberDefinition.storageModel && expression.memberName in expression.memberDefinition.storageModel.ComplexTypes) {\r\n                this._addPropertyToModelBinderConfig(Container.resolveType(expression.memberDefinition.type), builder);\r\n            } else {\r\n                builder.modelBinderConfig['$source'] = this.currentObjectFieldName;\r\n            }\r\n        }\r\n    },\r\n    VisitEntitySetExpression: function (expression, builder) {\r\n        if (expression.source instanceof $data.Expressions.EntityExpression) {\r\n            this.Visit(expression.source, builder);\r\n            this.Visit(expression.selector, builder);\r\n        }\r\n\r\n    },\r\n    VisitEntityExpression: function (expression, builder) {\r\n        this.Visit(expression.source, builder);\r\n    },\r\n    VisitAssociationInfoExpression: function (expression, builder) {\r\n        if (('$selector' in builder.modelBinderConfig) && (builder.modelBinderConfig.$selector.length > 0)) {\r\n            builder.modelBinderConfig.$selector += '.';\r\n        } else {\r\n            builder.modelBinderConfig['$selector'] = 'json:';\r\n        }\r\n        builder.modelBinderConfig['$selector'] += expression.associationInfo.FromPropertyName;\r\n    },\r\n    VisitSimpleBinaryExpression: function (expression, builder) {\r\n        this.Visit(expression.left, builder);\r\n        this.Visit(expression.right, builder);\r\n        builder.modelBinderConfig['$type'] = undefined;\r\n    },\r\n    VisitObjectLiteralExpression: function (expression, builder) {\r\n        builder.modelBinderConfig['$type'] = $data.Object;\r\n        expression.members.forEach(function (of) {\r\n            this.Visit(of, builder);\r\n        }, this);\r\n    },\r\n    VisitObjectFieldExpression: function (expression, builder) {\r\n        var tempFieldName = this.currentObjectFieldName;\r\n        builder.selectModelBinderProperty(expression.fieldName);\r\n        if (this.currentObjectFieldName) {\r\n            this.currentObjectFieldName += '__';\r\n        } else {\r\n            this.currentObjectFieldName = '';\r\n        }\r\n        this.currentObjectFieldName += expression.fieldName;\r\n\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression || expression.expression instanceof $data.Expressions.ComplexTypeExpression) {\r\n            this.VisitEntityAsProjection(expression.expression, builder);\r\n        } else if(expression.expression instanceof $data.Expressions.EntitySetExpression){\r\n            this.VisitEntitySetAsProjection(expression.expression, builder);\r\n        }\r\n        else {\r\n            this.Visit(expression.expression, builder);\r\n        }\r\n\r\n        this.currentObjectFieldName = tempFieldName;\r\n\r\n        builder.popModelBinderProperty();\r\n    }\r\n});\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\nexport const SqlStatementBlocks = {\r\n    beginGroup: \"(\",\r\n    endGroup: \")\",\r\n    nameSeparator: \".\",\r\n    valueSeparator: \", \",\r\n    select: \"SELECT \",\r\n    where: \" WHERE \",\r\n    from: \" FROM \",\r\n    skip: \" OFFSET \",\r\n    take: \" LIMIT \",\r\n    parameter: \"?\",\r\n    order: \" ORDER BY \",\r\n    as: \" AS \",\r\n    scalarFieldName: 'd',\r\n    rowIdName: 'rowid$$',\r\n    count: 'select count(*) cnt from ('\r\n};\r\n$C('$data.sqLite.SqlBuilder', $data.queryBuilder, null, {\r\n    constructor: function (sets, context) {\r\n        this.sets = sets;\r\n        this.entityContext = context;\r\n\r\n    },\r\n    getExpressionAlias: function (setExpression) {\r\n        var idx = this.sets.indexOf(setExpression);\r\n        if (idx == -1) {\r\n            idx = this.sets.push(setExpression) - 1;\r\n        }\r\n        return \"T\" + idx;\r\n    }\r\n});\r\n\r\n$C('$data.sqLite.SqlCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (queryExpression, context) {\r\n        this.queryExpression = queryExpression;\r\n        this.sets = context.sets;\r\n        this.infos = context.infos;\r\n        this.entityContext = context.entityContext;\r\n        this.associations = [];\r\n        this.filters = [];\r\n        this.newFilters = {};\r\n        this.sortedFilterPart = ['projection', 'from', 'filter', 'order', 'take', 'skip'];\r\n    },\r\n    compile: function () {\r\n        var sqlBuilder = $data.sqLite.SqlBuilder.create(this.sets, this.entityContext);\r\n        this.Visit(this.queryExpression, sqlBuilder);\r\n\r\n        if (sqlBuilder.getTextPart('projection') === undefined) {\r\n            this.VisitDefaultProjection(sqlBuilder);\r\n        }\r\n        var order = sqlBuilder.getTextPart(\"order\");\r\n        var skip = sqlBuilder.getTextPart(\"skip\");\r\n        var take = sqlBuilder.getTextPart(\"take\");\r\n        sqlBuilder.selectTextPart(\"result\");\r\n        this.sortedFilterPart.forEach(function (part) {\r\n            if (sqlBuilder.sets.length > 1 && (((skip || take) && part == \"order\") || part == \"take\" || part == \"skip\")) return;\r\n            var part = sqlBuilder.getTextPart(part);\r\n            if (part) {\r\n                sqlBuilder.addText(part.text);\r\n                sqlBuilder.selectedFragment.params = sqlBuilder.selectedFragment.params.concat(part.params);\r\n            }\r\n        }, this);\r\n        var countPart = sqlBuilder.getTextPart('count');\r\n        if (countPart !== undefined) {\r\n            sqlBuilder.selectedFragment.text = countPart.text + sqlBuilder.selectedFragment.text;\r\n            sqlBuilder.addText(SqlStatementBlocks.endGroup);\r\n            sqlBuilder.selectedFragment.params = sqlBuilder.selectedFragment.params.concat(countPart.params);\r\n        }\r\n        sqlBuilder.resetModelBinderProperty();\r\n        if (sqlBuilder.sets.length > 1 && (skip || take)){\r\n            var sql = sqlBuilder.getTextPart(\"result\");\r\n            var t0 = sql.text.replace(new RegExp(\"SELECT (.*?) FROM \" + sqlBuilder.pagingExpressionTable), \"SELECT T0.rowid, * FROM \" + sqlBuilder.pagingExpressionTable);\r\n            var t0fields = [];\r\n            sql.text.replace(new RegExp(\"\\\\sT0\\\\.(.*?)(\\\\s|,|\\\\))\", \"g\"), function (m, member, sep) {\r\n                var field = \"T0.\" + member;\r\n                if (t0fields.indexOf(field) < 0) t0fields.push(field);\r\n            });\r\n            if (t0fields.length > 0) {\r\n                var params = sql.params.slice();\r\n                var sqlReplace = \"FROM (\" + t0 + \" GROUP BY \" + t0fields.join(\", \");\r\n                if (order){\r\n                    sqlReplace += order.text;\r\n                    if (order.params && order.params.length > 0) params = params.concat(order.params);\r\n                }\r\n                if (take){\r\n                    sqlReplace += take.text;\r\n                    params.push(take.params[0]);\r\n                }\r\n                if (skip){\r\n                    sqlReplace += skip.text;\r\n                    params.push(skip.params[0]);\r\n                }\r\n                sqlReplace += \")\";\r\n                sql.text = sql.text.replace(\"FROM \" + sqlBuilder.pagingExpressionTable, sqlReplace);\r\n                sql.params = params.concat(sql.params);\r\n            } else {\r\n                if (order){\r\n                    sql.text += order.text;\r\n                    if (order.params && order.params.length > 0) sql.params = sql.params.concat(order.params);\r\n                }\r\n                if (take){\r\n                    sql.text += take.text;\r\n                    sql.params = sql.params.concat(take.params);\r\n                }\r\n                if (skip) {\r\n                    sql.text += skip.text;\r\n                    sql.params = sql.params.concat(skip.params);\r\n                }\r\n            }\r\n        }\r\n        this.filters.push(sqlBuilder);\r\n    },\r\n\r\n    VisitToArrayExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.source, sqlBuilder);\r\n    },\r\n    VisitCountExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.source, sqlBuilder);\r\n        sqlBuilder.selectTextPart('count');\r\n        sqlBuilder.addText(SqlStatementBlocks.count);\r\n    },\r\n    VisitFilterExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.source, sqlBuilder);\r\n        sqlBuilder.selectTextPart('filter');\r\n        sqlBuilder.addText(SqlStatementBlocks.where);\r\n        var filterCompiler = $data.sqLite.SqlFilterCompiler.create();\r\n        filterCompiler.Visit(expression.selector, sqlBuilder);\r\n        return expression;\r\n    },\r\n    VisitOrderExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.source, sqlBuilder);\r\n        sqlBuilder.selectTextPart('order');\r\n        if (this.addOrders) {\r\n            sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\r\n        } else {\r\n            this.addOrders = true;\r\n            sqlBuilder.addText(SqlStatementBlocks.order);\r\n        }\r\n        var orderCompiler = $data.sqLite.SqlOrderCompiler.create();\r\n        orderCompiler.Visit(expression, sqlBuilder);\r\n\r\n        return expression;\r\n    },\r\n    VisitPagingExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.source, sqlBuilder);\r\n        switch (expression.nodeType) {\r\n            case $data.Expressions.ExpressionType.Skip:\r\n                sqlBuilder.selectTextPart('skip');\r\n                sqlBuilder.addText(SqlStatementBlocks.skip); break;\r\n            case $data.Expressions.ExpressionType.Take:\r\n                sqlBuilder.selectTextPart('take');\r\n                sqlBuilder.addText(SqlStatementBlocks.take); break;\r\n            default: Guard.raise(\"Not supported nodeType\"); break;\r\n        }\r\n        var pagingCompiler = $data.sqLite.SqlPagingCompiler.create();\r\n        pagingCompiler.Visit(expression, sqlBuilder);\r\n        return expression;\r\n    },\r\n    VisitProjectionExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.source, sqlBuilder);\r\n        sqlBuilder.selectTextPart('projection');\r\n        this.hasProjection = true;\r\n        sqlBuilder.addText(SqlStatementBlocks.select);\r\n        var projectonCompiler = $data.sqLite.SqlProjectionCompiler.create();\r\n        projectonCompiler.Visit(expression, sqlBuilder);\r\n    },\r\n    VisitEntitySetExpression: function (expression, sqlBuilder) {\r\n        sqlBuilder.selectTextPart('from');\r\n        sqlBuilder.addText(SqlStatementBlocks.from);\r\n        sqlBuilder.sets.forEach(function (es, setIndex) {\r\n\r\n            if (setIndex > 0) {\r\n                sqlBuilder.addText(\" \\n\\tLEFT OUTER JOIN \");\r\n            }\r\n\r\n            var alias = sqlBuilder.getExpressionAlias(es);\r\n            if (setIndex == 0 && sqlBuilder.sets.length > 1) {\r\n                sqlBuilder.pagingExpressionTable = es.instance.tableName;\r\n            }\r\n            sqlBuilder.addText(es.instance.tableName + ' ');\r\n            sqlBuilder.addText(alias);\r\n\r\n            if (setIndex > 0) {\r\n                sqlBuilder.addText(\" ON (\");\r\n                var toSet = this.infos[setIndex];\r\n                var toPrefix = \"T\" + toSet.AliasNumber;\r\n                var fromSetName = toSet.NavigationPath.substring(0, toSet.NavigationPath.lastIndexOf('.'));\r\n                var temp = this.infos.filter(function (inf) { return inf.NavigationPath == fromSetName; }, this);\r\n                var fromPrefix = \"T0\";\r\n                if (temp.length > 0) {\r\n                    fromPrefix = \"T\" + temp[0].AliasNumber;\r\n                }\r\n                toSet.Association.associationInfo.ReferentialConstraint.forEach(function (constrain, index) {\r\n                    if(index > 0){\r\n                        sqlBuilder.addText(\" AND \");\r\n                    }\r\n                    sqlBuilder.addText(fromPrefix + \".\" + constrain[toSet.Association.associationInfo.From]);\r\n                    sqlBuilder.addText(\" = \");\r\n                    sqlBuilder.addText(toPrefix + \".\" + constrain[toSet.Association.associationInfo.To]);\r\n                }, this);\r\n                sqlBuilder.addText(\")\");\r\n            }\r\n        }, this);\r\n    },\r\n    VisitDefaultProjection: function (sqlBuilder) {\r\n        sqlBuilder.selectTextPart('projection');\r\n        var needAlias = this.infos.filter(function (i) { return i.IsMapped; }).length > 1;\r\n        if (sqlBuilder.sets.length > 1) {\r\n            sqlBuilder.addText(SqlStatementBlocks.select);\r\n            sqlBuilder.sets.forEach(function (set, masterIndex) {\r\n\r\n                if (this.infos[masterIndex].IsMapped) {\r\n                    var alias = sqlBuilder.getExpressionAlias(set);\r\n                    set.storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (memberDef, index) {\r\n                        if (index > 0 || masterIndex > 0) {\r\n                            sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\r\n                        }\r\n                        sqlBuilder.addText(alias + \".\");\r\n                        sqlBuilder.addText(memberDef.name);\r\n                        if (needAlias) {\r\n                            sqlBuilder.addText(SqlStatementBlocks.as);\r\n                            sqlBuilder.addText(alias + \"__\" + memberDef.name);\r\n                        }\r\n                    }, this);\r\n                }\r\n\r\n            }, this);\r\n\r\n        }\r\n        else {\r\n            sqlBuilder.addText(\"SELECT *\");\r\n        }\r\n    }\r\n});\r\n\r\n$data.Expressions.ExpressionNode.prototype.monitor = function (monitorDefinition, context) {\r\n    var m = $data.sqLite.SqlExpressionMonitor.create(monitorDefinition);\r\n    return m.Visit(this, context);\r\n};\r\n\r\n$C('$data.storageProviders.sqLite.SQLiteCompiler', null, null, {\r\n    compile: function (query) {\r\n        /// <param name=\"query\" type=\"$data.Query\" />\r\n        var expression = query.expression;\r\n        var context = { sets: [], infos: [], entityContext: query.context };\r\n\r\n        var optimizedIncludeExpression = expression.monitor({\r\n            MonitorEntitySetExpression: function (expression, context) {\r\n                if (expression.source instanceof $data.Expressions.EntityContextExpression && context.sets.indexOf(expression) == -1) {\r\n                    this.backupEntitySetExpression = expression;\r\n                }\r\n            },\r\n            VisitCountExpression: function (expression, context) {\r\n                context.hasCountFrameOperator = true;\r\n                return expression;\r\n            },\r\n            MutateIncludeExpression: function (expression, context) {\r\n                var result = null;\r\n                if (context.hasCountFrameOperator) {\r\n                    result = expression.source;\r\n                }\r\n                else {\r\n                    var origSelector = expression.selector.value;\r\n                    Container.createCodeExpression(\"function(it){return it.\" + origSelector + \";}\", null);\r\n\r\n                    var jsCodeTree = Container.createCodeParser(this.backupEntitySetExpression.source.instance).createExpression(\"function(it){return it.\" + origSelector + \";}\");\r\n                    var code2entity = Container.createCodeToEntityConverter(this.backupEntitySetExpression.source.instance);\r\n                    var includeSelector = code2entity.Visit(jsCodeTree, { queryParameters: undefined, lambdaParameters: [this.backupEntitySetExpression] });\r\n\r\n                    result = Container.createIncludeExpression(expression.source, includeSelector);\r\n                }\r\n                return result;\r\n            }\r\n        }, context);\r\n\r\n        var optimizedExpression = optimizedIncludeExpression.monitor({\r\n            MonitorEntitySetExpression: function (expression, context) {\r\n                if (expression.source instanceof $data.Expressions.EntityContextExpression && context.sets.indexOf(expression) == -1) {\r\n                    context.sets.push(expression);\r\n                    context.infos.push({ AliasNumber: 0, Association: null, FromType: null, FromPropertyName: null, IsMapped: true });\r\n                }\r\n            },\r\n            MutateEntitySetExpression: function (expression, context) {\r\n                if (expression.source instanceof $data.Expressions.EntityContextExpression) {\r\n                    this.backupContextExpression = expression.source;\r\n                    this.path = \"\";\r\n                    return expression;\r\n                }\r\n                if (expression.selector.associationInfo.FromMultiplicity == \"0..1\" && expression.selector.associationInfo.FromMultiplicity == \"*\") {\r\n                    Guard.raise(\"Not supported query on this navigation property: \" + expression.selector.associationInfo.From + \" \" + expression.selector.associationInfo.FromPropertyName);\r\n                }\r\n\r\n                this.path += '.' + expression.selector.associationInfo.FromPropertyName;\r\n                var info = context.infos.filter(function (inf) {\r\n                    return inf.NavigationPath == this.path;\r\n                }, this);\r\n                if (info.length > 0) {\r\n                    return context.sets[info[0].AliasNumber];\r\n                }\r\n                var memberDefinitions = this.backupContextExpression.instance.getType().memberDefinitions.getMember(expression.storageModel.ItemName);\r\n                if (!memberDefinitions) {\r\n                    Guard.raise(\"Context schema error\");\r\n                }\r\n                var mi = Container.createMemberInfoExpression(memberDefinitions);\r\n                var result = Container.createEntitySetExpression(this.backupContextExpression, mi);\r\n                result.instance = this.backupContextExpression.instance[expression.storageModel.ItemName];\r\n                var aliasNum = context.sets.push(result);\r\n                context.infos.push({\r\n                    AliasNumber: aliasNum - 1,\r\n                    Association: expression.selector,\r\n                    NavigationPath: this.path,\r\n                    IsMapped: this.isMapped\r\n                });\r\n                return result;\r\n            }\r\n        }, context);\r\n\r\n        var compiler = $data.sqLite.SqlCompiler.create(optimizedExpression, context);\r\n        compiler.compile();\r\n\r\n        var sqlBuilder = $data.sqLite.SqlBuilder.create(this.sets, this.entityContext);\r\n\r\n        query.modelBinderConfig = {};\r\n        var modelBinder = $data.sqLite.sqLite_ModelBinderCompiler.create(query, context);\r\n        modelBinder.Visit(optimizedExpression);\r\n\r\n        var result = {\r\n            sqlText: compiler.filters[0].selectedFragment.text,\r\n            params: compiler.filters[0].selectedFragment.params,\r\n            modelBinderConfig: query.modelBinderConfig\r\n        };\r\n\r\n        return result;\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.SqLiteConverter = {\r\n    fromDb: {\r\n        '$data.Enum': function(v, enumType) { return $data.Container.convertTo(v, enumType); },\r\n        '$data.Duration': $data.Container.proxyConverter,\r\n        '$data.Day': $data.Container.proxyConverter,\r\n        '$data.Byte': $data.Container.proxyConverter,\r\n        '$data.SByte': $data.Container.proxyConverter,\r\n        '$data.Decimal': $data.Container.proxyConverter,\r\n        '$data.Float': $data.Container.proxyConverter,\r\n        '$data.Int16': $data.Container.proxyConverter,\r\n        '$data.Int64': $data.Container.proxyConverter,\r\n        \"$data.Integer\": $data.Container.proxyConverter,\r\n        \"$data.Int32\": $data.Container.proxyConverter,\r\n        \"$data.Number\": $data.Container.proxyConverter,\r\n        \"$data.Date\": function (dbData) { return dbData != null ? new Date(dbData) : dbData; },\r\n        \"$data.DateTimeOffset\": function (dbData) { return dbData != null ? new Date(dbData) : dbData; },\r\n        \"$data.Time\": $data.Container.proxyConverter,\r\n        \"$data.String\": $data.Container.proxyConverter,\r\n        \"$data.Boolean\": function (b) { return Guard.isNullOrUndefined(b) ? b : (b === 1 ? true : false); },\r\n        \"$data.Blob\": function(b){ return b ? $data.Container.convertTo(atob(b), $data.Blob) : b; },\r\n        \"$data.Array\": function () {\r\n            if (arguments.length == 0) return [];\r\n            return arguments[0] ? JSON.parse(arguments[0]) : undefined;\r\n        },\r\n        \"$data.Object\": function(v){\r\n            try{ return JSON.parse(v); }catch(err){ return v; }\r\n        },\r\n        \"$data.Guid\": function (g) { return g ? $data.parseGuid(g).toString() : g; },\r\n        '$data.GeographyPoint': function (g) { if (g) { return new $data.GeographyPoint(JSON.parse(g)); } return g; },\r\n        '$data.GeographyLineString': function (g) { if (g) { return new $data.GeographyLineString(JSON.parse(g)); } return g; },\r\n        '$data.GeographyPolygon': function (g) { if (g) { return new $data.GeographyPolygon(JSON.parse(g)); } return g; },\r\n        '$data.GeographyMultiPoint': function (g) { if (g) { return new $data.GeographyMultiPoint(JSON.parse(g)); } return g; },\r\n        '$data.GeographyMultiLineString': function (g) { if (g) { return new $data.GeographyMultiLineString(JSON.parse(g)); } return g; },\r\n        '$data.GeographyMultiPolygon': function (g) { if (g) { return new $data.GeographyMultiPolygon(JSON.parse(g)); } return g; },\r\n        '$data.GeographyCollection': function (g) { if (g) { return new $data.GeographyCollection(JSON.parse(g)); } return g; },\r\n        '$data.GeometryPoint': function (g) { if (g) { return new $data.GeometryPoint(JSON.parse(g)); } return g; },\r\n        '$data.GeometryLineString': function (g) { if (g) { return new $data.GeometryLineString(JSON.parse(g)); } return g; },\r\n        '$data.GeometryPolygon': function (g) { if (g) { return new $data.GeometryPolygon(JSON.parse(g)); } return g; },\r\n        '$data.GeometryMultiPoint': function (g) { if (g) { return new $data.GeometryMultiPoint(JSON.parse(g)); } return g; },\r\n        '$data.GeometryMultiLineString': function (g) { if (g) { return new $data.GeometryMultiLineString(JSON.parse(g)); } return g; },\r\n        '$data.GeometryMultiPolygon': function (g) { if (g) { return new $data.GeometryMultiPolygon(JSON.parse(g)); } return g; },\r\n        '$data.GeometryCollection': function (g) { if (g) { return new $data.GeometryCollection(JSON.parse(g)); } return g; }\r\n    },\r\n    toDb: {\r\n        '$data.Enum': $data.Container.proxyConverter,\r\n        '$data.Duration': $data.Container.proxyConverter,\r\n        '$data.Day': $data.Container.proxyConverter,\r\n        '$data.Byte': $data.Container.proxyConverter,\r\n        '$data.SByte': $data.Container.proxyConverter,\r\n        '$data.Decimal': $data.Container.proxyConverter,\r\n        '$data.Float': $data.Container.proxyConverter,\r\n        '$data.Int16': $data.Container.proxyConverter,\r\n        '$data.Int64': $data.Container.proxyConverter,\r\n        \"$data.Integer\": $data.Container.proxyConverter,\r\n        \"$data.Int32\": $data.Container.proxyConverter,\r\n        \"$data.Number\": $data.Container.proxyConverter,\r\n        \"$data.Date\": function (date) { return date ? date.valueOf() : null; },\r\n        \"$data.DateTimeOffset\": function (date) { return date ? date.valueOf() : null; },\r\n        \"$data.Time\": $data.Container.proxyConverter,\r\n        \"$data.String\": $data.Container.proxyConverter,\r\n        \"$data.Boolean\": function (b) { return Guard.isNullOrUndefined(b) ? b : (b ? 1 : 0); },\r\n        \"$data.Blob\": function(b){ return b ? $data.Blob.toBase64(b) : b; },\r\n        \"$data.Array\": function (arr) { return arr ? JSON.stringify(arr) : arr; },\r\n        \"$data.Guid\": function (g) { return g ? g.toString() : g; },\r\n        \"$data.Object\": function (value) { if (value === null) { return null; } else { JSON.stringify(value); } },\r\n        '$data.GeographyPoint': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeographyLineString': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeographyPolygon': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeographyMultiPoint': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeographyMultiLineString': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeographyMultiPolygon': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeographyCollection': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeometryPoint': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeometryLineString': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeometryPolygon': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeometryMultiPoint': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeometryMultiLineString': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeometryMultiPolygon': function (g) { if (g) { return JSON.stringify(g); } return g; },\r\n        '$data.GeometryCollection': function (g) { if (g) { return JSON.stringify(g); } return g; }\r\n    }\r\n};\r\n\r\n$data.SqLiteFieldMapping = {\r\n    '$data.Byte': \"INTEGER\",\r\n    '$data.SByte': \"INTEGER\",\r\n    '$data.Decimal': \"TEXT\",\r\n    '$data.Float': \"REAL\",\r\n    '$data.Int16': \"INTEGER\",\r\n    '$data.Int64': \"TEXT\",\r\n    \"$data.Integer\": \"INTEGER\",\r\n    \"$data.Int32\": \"INTEGER\",\r\n    \"$data.Number\": \"REAL\",\r\n    \"$data.Date\": \"REAL\",\r\n    \"$data.Duration\": \"TEXT\",\r\n    \"$data.Time\": \"TEXT\",\r\n    \"$data.Day\": \"TEXT\",\r\n    \"$data.DateTimeOffset\": \"REAL\",\r\n    \"$data.String\": \"TEXT\",\r\n    \"$data.Boolean\": \"INTEGER\",\r\n    \"$data.Blob\": \"BLOB\",\r\n    \"$data.Array\": \"TEXT\",\r\n    \"$data.Guid\": \"TEXT\",\r\n    \"$data.Object\": \"TEXT\",\r\n    '$data.GeographyPoint': \"TEXT\",\r\n    '$data.GeographyLineString': \"TEXT\",\r\n    '$data.GeographyPolygon': \"TEXT\",\r\n    '$data.GeographyMultiPoint': \"TEXT\",\r\n    '$data.GeographyMultiLineString': \"TEXT\",\r\n    '$data.GeographyMultiPolygon': \"TEXT\",\r\n    '$data.GeographyCollection': \"TEXT\",\r\n    '$data.GeometryPoint': \"TEXT\",\r\n    '$data.GeometryLineString': \"TEXT\",\r\n    '$data.GeometryPolygon': \"TEXT\",\r\n    '$data.GeometryMultiPoint': \"TEXT\",\r\n    '$data.GeometryMultiLineString': \"TEXT\",\r\n    '$data.GeometryMultiPolygon': \"TEXT\",\r\n    '$data.GeometryCollection': \"TEXT\"\r\n};\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$data.Class.define('$data.storageProviders.sqLite.SqLiteStorageProvider', $data.StorageProviderBase, null,\r\n{\r\n    constructor: function (cfg, context) {\r\n        this.SqlCommands = [];\r\n        this.context = context;\r\n        this.providerConfiguration = $data.typeSystem.extend({\r\n            databaseName: $data.defaults.defaultDatabaseName,\r\n            version: \"\",\r\n            displayName: \"JayData default db\",\r\n            maxSize: 1024 * 1024,\r\n            dbCreation: $data.storageProviders.DbCreationType.DropTableIfChanged\r\n        }, cfg);\r\n\r\n        this.providerName = '';\r\n        for (var i in $data.RegisteredStorageProviders) {\r\n            if ($data.RegisteredStorageProviders[i] === this.getType()) {\r\n                this.providerName = i;\r\n            }\r\n        }\r\n\r\n        if (this.context && this.context._buildDbType_generateConvertToFunction && this.buildDbType_generateConvertToFunction) {\r\n            this.context._buildDbType_generateConvertToFunction = this.buildDbType_generateConvertToFunction;\r\n        }\r\n        if (this.context && this.context._buildDbType_modifyInstanceDefinition && this.buildDbType_modifyInstanceDefinition) {\r\n            this.context._buildDbType_modifyInstanceDefinition = this.buildDbType_modifyInstanceDefinition;\r\n        }\r\n    },\r\n    _createSqlConnection: function () {\r\n        var ctorParm = {\r\n            fileName: this.providerConfiguration.databaseName,\r\n            version: \"\",\r\n            displayName: this.providerConfiguration.displayName,\r\n            maxSize: this.providerConfiguration.maxSize,\r\n            storage: this.providerConfiguration.storage\r\n        };\r\n\r\n        if (this.connection) return this.connection;\r\n\r\n        var connection = null;\r\n        if (this.providerConfiguration.storage) {\r\n            connection = new $data.dbClient.jayStorageClient.JayStorageConnection(ctorParm);\r\n        } else if (typeof sqLiteModule !== 'undefined') {\r\n            connection = new $data.dbClient.sqLiteNJClient.SqLiteNjConnection(ctorParm);\r\n        } else {\r\n            connection = new $data.dbClient.openDatabaseClient.OpenDbConnection(ctorParm);\r\n        }\r\n\r\n        this.connection = connection;\r\n\r\n        return connection;\r\n    },\r\n    \r\n    supportedDataTypes: {\r\n        value: [$data.Array, $data.Integer, $data.String, $data.Number, $data.Blob, $data.Array, $data.Object, $data.Boolean, $data.Date, $data.Guid, $data.GeographyPoint,\r\n            $data.GeographyLineString, $data.GeographyPolygon, $data.GeographyMultiPoint, $data.GeographyMultiLineString, $data.GeographyMultiPolygon, $data.GeographyCollection,\r\n            $data.GeometryPoint, $data.GeometryLineString, $data.GeometryPolygon, $data.GeometryMultiPoint, $data.GeometryMultiLineString, $data.GeometryMultiPolygon, $data.GeometryCollection,\r\n            $data.Byte, $data.SByte, $data.Decimal, $data.Float, $data.Int16, $data.Int32, $data.Int64, $data.Time, $data.DateTimeOffset, $data.Duration, $data.Day],\r\n        writable: false\r\n    },\r\n    fieldConverter: { value: $data.SqLiteConverter },\r\n\r\n    supportedFieldOperations: {\r\n        value: {\r\n            length: {\r\n                dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.ProjectionExpression]\r\n            },\r\n            substr: {\r\n                dataType: \"string\",\r\n                allowedIn: $data.Expressions.FilterExpression,\r\n                parameters: [{ name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\" }]\r\n            },\r\n            toLowerCase: {\r\n                dataType: \"string\", mapTo: \"lower\"\r\n            },\r\n            toUpperCase: {\r\n                dataType: \"string\", mapTo: \"upper\"\r\n            },\r\n            contains: {\r\n                mapTo: \"like\",\r\n                dataType: \"boolean\",\r\n                allowedIn: $data.Expressions.FilterExpression,\r\n                parameters: [{ name: \"strFragment\", dataType: \"string\", prefix: \"%\", suffix: \"%\" }]\r\n            },\r\n            startsWith: {\r\n                mapTo: \"like\",\r\n                dataType: \"boolean\",\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.ProjectionExpression],\r\n                parameters: [{ name: \"strFragment\", dataType: \"string\", suffix: \"%\" }]\r\n            },\r\n            endsWith: {\r\n                mapTo: \"like\",\r\n                dataType: \"boolean\",\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.ProjectionExpression],\r\n                parameters: [{ name: \"strFragment\", dataType: \"string\", prefix: \"%\" }]\r\n            },\r\n            'trim': {\r\n                dataType: $data.String,\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.ProjectionExpression],\r\n                mapTo: 'trim',\r\n                parameters: [{ name: '@expression', dataType: $data.String }, { name: 'chars', dataType: $data.String }]\r\n            },\r\n            'ltrim': {\r\n                dataType: $data.String,\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.ProjectionExpression],\r\n                mapTo: 'ltrim',\r\n                parameters: [{ name: '@expression', dataType: $data.String }, { name: 'chars', dataType: $data.String }]\r\n            },\r\n            'rtrim': {\r\n                dataType: $data.String,\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.ProjectionExpression],\r\n                mapTo: 'rtrim',\r\n                parameters: [{ name: '@expression', dataType: $data.String }, { name: 'chars', dataType: $data.String }]\r\n            }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n\r\n    supportedBinaryOperators: {\r\n        value: {\r\n            equal: { mapTo: '=', dataType: \"boolean\", nullMap: ' is null' },\r\n            notEqual: { mapTo: '!=', dataType: \"boolean\", nullMap: ' is not null' },\r\n            equalTyped: { mapTo: '=', dataType: \"boolean\", nullMap: ' is null' },\r\n            notEqualTyped: { mapTo: '!=', dataType: \"boolean\", nullMap: ' is not null' },\r\n            greaterThan: { mapTo: '>', dataType: \"boolean\" },\r\n            greaterThanOrEqual: { mapTo: '>=', dataType: \"boolean\" },\r\n\r\n            lessThan: { mapTo: '<', dataType: \"boolean\" },\r\n            lessThenOrEqual: { mapTo: '<=', dataType: \"boolean\" },\r\n            or: { mapTo: 'OR', dataType: \"boolean\" },\r\n            and: { mapTo: 'AND', dataType: \"boolean\" },\r\n\r\n            add: { mapTo: '+', dataType: \"number\" },\r\n            divide: { mapTo: '/' },\r\n            multiply: { mapTo: '*' },\r\n            subtract: { mapTo: '-' },\r\n            modulo: { mapTo: '%' },\r\n\r\n            orBitwise: { maptTo: \"|\" },\r\n            andBitwsise: { mapTo: \"&\" },\r\n\r\n            \"in\": { mapTo: \"in\", dataType: \"boolean\" }\r\n        }\r\n    },\r\n\r\n    supportedUnaryOperators: {\r\n        value: {\r\n            not: { mapTo: 'not' },\r\n            positive: { mapTo: '+' },\r\n            negative: { maptTo: '-' }\r\n        }\r\n    },\r\n\r\n    supportedSetOperations: {\r\n        value: {\r\n            filter: {},\r\n            map: {},\r\n            length: {},\r\n            forEach: {},\r\n            toArray: {},\r\n            single: {},\r\n            take: {},\r\n            skip: {},\r\n            orderBy: {},\r\n            orderByDescending: {},\r\n            first: {},\r\n            include: {}\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n\r\n    supportedAutoincrementKeys: {\r\n        value:{\r\n            '$data.Integer': true,\r\n            '$data.Int32': true,\r\n            '$data.Guid': function () { return $data.createGuid(); }\r\n        }\r\n    },\r\n\r\n    initializeStore: function (callBack) {\r\n        callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\r\n        this.context._storageModel.filter(function(sm) { return !sm.IsComplexType }).forEach(function (item, index) {\r\n            this.SqlCommands.push(this.createSqlFromStorageModel(item) + \" \");\r\n        }, this);\r\n\r\n        var sqlConnection = this._createSqlConnection();\r\n        var cmd = sqlConnection.createCommand(\"SELECT * FROM sqlite_master WHERE type = 'table'\", null);\r\n        var that = this;\r\n\r\n        cmd.executeQuery({\r\n            success: function (result) {\r\n                var existObjectInDB = {};\r\n                for (var i = 0; i < result.rows.length; i++) {\r\n                    var item = result.rows[i];\r\n                    existObjectInDB[item.tbl_name] = item;\r\n                }\r\n                switch (that.providerConfiguration.dbCreation) {\r\n                    case $data.storageProviders.DbCreationType.Merge:\r\n                        Guard.raise(new Exception('Not supported db creation type'));\r\n                        break;\r\n                    case $data.storageProviders.DbCreationType.DropTableIfChanged:\r\n                        var deleteCmd = [];\r\n                        for (var i = 0; i < that.SqlCommands.length; i++) {\r\n                            if (that.SqlCommands[i] == \"\") { continue; }\r\n                            var regEx = new RegExp('^CREATE TABLE IF NOT EXISTS ([^ ]*) (\\\\(.*\\\\))', 'g');\r\n                            var data = regEx.exec(that.SqlCommands[i]);\r\n                            if (data) {\r\n                                var tableName = data[1];\r\n                                var tableDef = data[2];\r\n                                if (existObjectInDB[tableName.slice(1, tableName.length - 1)]) {\r\n                                    var regex = new RegExp('\\\\(.*\\\\)', 'g');\r\n                                    var existsRegExMatches = existObjectInDB[tableName.slice(1, tableName.length - 1)].sql.match(regex);\r\n\r\n                                    if (!existsRegExMatches || tableDef.toLowerCase() != existsRegExMatches[0].toLowerCase()) {\r\n                                        deleteCmd.push(\"DROP TABLE IF EXISTS [\" + existObjectInDB[tableName.slice(1, tableName.length - 1)].tbl_name + \"];\");\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                //console.dir(regEx);\r\n                                //console.dir(that.SqlCommands[i]);\r\n                            }\r\n                        }\r\n                        that.SqlCommands = that.SqlCommands.concat(deleteCmd);\r\n                        //console.log(deleteCmd);\r\n                        break;\r\n                    case $data.storageProviders.DbCreationType.DropAllExistingTables:\r\n                        for (var objName in existObjectInDB) {\r\n                            if (objName && !objName.match('^__') && !objName.match('^sqlite_')) {\r\n                                that.SqlCommands.push(\"DROP TABLE IF EXISTS [\" + existObjectInDB[objName].tbl_name + \"];\");\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n                that._runSqlCommands(sqlConnection, { success: callBack.success, error: callBack.error });\r\n            },\r\n            error: callBack.error\r\n        });\r\n    },\r\n    executeQuery: function (query, callBack) {\r\n        callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\r\n        var sqlConnection = this._createSqlConnection();\r\n        var sql = this._compile(query);\r\n        query.actionPack = sql.actions;\r\n        query.sqlConvertMetadata = sql.converter;\r\n        query.modelBinderConfig = sql.modelBinderConfig;\r\n        var sqlCommand = sqlConnection.createCommand(sql.sqlText, sql.params);\r\n        var that = this;\r\n        sqlCommand.executeQuery({\r\n            success: function (sqlResult) {\r\n                if (callBack.success) {\r\n                    query.rawDataList = sqlResult.rows;\r\n                    callBack.success(query);\r\n                }\r\n            },\r\n            error: callBack.error\r\n        });\r\n    },\r\n    _compile: function (query, params) {\r\n        var compiler = new $data.storageProviders.sqLite.SQLiteCompiler();\r\n        var compiled = compiler.compile(query);\r\n        //console.dir(compiled);\r\n        compiled.hasSelect = compiler.select != null;\r\n        return compiled;\r\n    },\r\n    getTraceString: function (query) {\r\n        var sqlText = this._compile(query);\r\n        return sqlText;\r\n    },\r\n    _runSqlCommands: function (sqlConnection, callBack) {\r\n        if (this.SqlCommands && this.SqlCommands.length > 0) {\r\n            var cmdStr = this.SqlCommands.pop();\r\n            var command = sqlConnection.createCommand(cmdStr, null);\r\n            var that = this;\r\n            var okFn = function (result) { that._runSqlCommands.apply(that, [sqlConnection, callBack]); };\r\n            command.executeQuery({ success: okFn, error: callBack.error });\r\n        } else {\r\n            callBack.success(this.context);\r\n        }\r\n    },\r\n    setContext: function (ctx) {\r\n        this.context = ctx;\r\n    },\r\n    saveChanges: function (callback, changedItems) {\r\n        var sqlConnection = this._createSqlConnection();\r\n        var provider = this;\r\n        var independentBlocks = this.buildIndependentBlocks(changedItems);\r\n        this.saveIndependentBlocks(changedItems, independentBlocks, sqlConnection, callback);\r\n    },\r\n    saveIndependentBlocks: function (changedItems, independentBlocks, sqlConnection, callback) {\r\n        /// <summary>\r\n        /// Saves the sequentially independent items to the database.\r\n        /// </summary>\r\n        /// <param name=\"independentBlocks\">Array of independent block of items.</param>\r\n        /// <param name=\"sqlConnection\">sqlConnection to use</param>\r\n        /// <param name=\"callback\">Callback on finish</param>\r\n        var provider = this;\r\n        var t = [].concat(independentBlocks);\r\n        function saveNextIndependentBlock() {\r\n            if (t.length === 0) {\r\n                callback.success();\r\n                return;\r\n            }\r\n            var currentBlock = t.shift();\r\n            // Converting items to their physical equivalent (?)\r\n            var convertedItems = currentBlock.map(function (item) {\r\n                var dbType = provider.context._storageModel.getStorageModel(item.data.getType()).PhysicalType;\r\n                item.physicalData = dbType.convertTo(item.data);\r\n                return item;\r\n            }, this);\r\n            try {\r\n                provider.saveIndependentItems(convertedItems, sqlConnection, {\r\n                    success: function () {\r\n                        provider.postProcessItems(convertedItems);\r\n                        saveNextIndependentBlock();\r\n                    },\r\n                    error: callback.error\r\n                });\r\n            } catch (e) {\r\n                callback.error(e);\r\n            }\r\n\r\n        }\r\n        saveNextIndependentBlock();\r\n    },\r\n\r\n    saveIndependentItems: function (items, sqlConnection, callback) {\r\n        var provider = this;\r\n        var queries = items.map(function (item) {\r\n            return provider.saveEntitySet(item);\r\n        });\r\n        queries = queries.filter(function (item) { return item; });\r\n        if (queries.length === 0) {\r\n            callback.success(items);\r\n            return;\r\n        }\r\n        function toCmd(sqlConnection, queries) {\r\n            var cmdParams = { query: [], param: [] };\r\n            queries.forEach(function (item, i) {\r\n                if (item) {\r\n                    if (item.query)\r\n                        cmdParams.query[i] = item.query;\r\n                    if (item.param)\r\n                        cmdParams.param[i] = item.param;\r\n                }\r\n            });\r\n            return sqlConnection.createCommand(cmdParams.query, cmdParams.param);\r\n        }\r\n        var cmd = toCmd(sqlConnection, queries);\r\n        cmd.executeQuery({\r\n            success: function (results) {\r\n                var reloadQueries = results.map(function (result, i) {\r\n                    if (result && result.insertId) {\r\n                        return provider.save_reloadSavedEntity(result.insertId, items[i].entitySet.tableName, sqlConnection);\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                })\r\n                var cmd = toCmd(sqlConnection, reloadQueries);\r\n                if (cmd.query.length > 0) {\r\n                    cmd.executeQuery(function (results) {\r\n                        results.forEach(function (item, i) {\r\n                            if (item && item.rows) {\r\n                                items[i].physicalData.initData = item.rows[0];\r\n                            }\r\n                        });\r\n                        callback.success(items);\r\n                    });\r\n                } else {\r\n                    callback.success(0);//TODO Zenima: fixed this!\r\n                }\r\n            },\r\n            error: callback.error\r\n        });\r\n    },\r\n    postProcessItems: function (changedItems) {\r\n        var pmpCache = {};\r\n        function getPublicMappedProperties(type) {\r\n            var key = type.name;\r\n            if (pmpCache.hasOwnProperty(key))\r\n                return pmpCache[key];\r\n            else {\r\n                var pmp = type.memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\r\n                    return memDef.computed;\r\n                });\r\n                return (pmpCache[key] = pmp);\r\n            }\r\n\r\n        }\r\n        changedItems.forEach(function (item) {\r\n            if (item.physicalData) {\r\n                getPublicMappedProperties(item.data.getType()).forEach(function (memDef) {\r\n                    item.data[memDef.name] = item.physicalData[memDef.name];\r\n                }, this);\r\n            }\r\n        }, this);\r\n    },\r\n\r\n    saveEntitySet: function (item) {\r\n        switch (item.data.entityState) {\r\n            case $data.EntityState.Added: return this.save_NewEntity(item); break;\r\n            case $data.EntityState.Deleted: return this.save_DeleteEntity(item); break;\r\n            case $data.EntityState.Modified: return this.save_UpdateEntity(item); break;\r\n            case $data.EntityState.Unchanged: return; break;\r\n            default: Guard.raise(new Exception('Not supported entity state'));\r\n        }\r\n    },\r\n    save_DeleteEntity: function (item) {\r\n        ///DELETE FROM Posts WHERE Id=1;\r\n        var deleteSqlString = \"DELETE FROM [\" + item.entitySet.tableName + \"] WHERE(\";\r\n        var hasCondition = false;\r\n        var addAllField = false;\r\n        var deleteParam = [];\r\n        while (!hasCondition) {\r\n            item.physicalData.constructor.memberDefinitions.getPublicMappedProperties().forEach(function (fieldDef, i) {\r\n\r\n                if (hasCondition && !deleteSqlString.match(\" AND $\")) {\r\n                    deleteSqlString += \" AND \";\r\n                }\r\n                if (fieldDef.key || addAllField) {\r\n                    deleteSqlString += \"([\" + fieldDef.name + \"] == ?)\";\r\n                    var logicalFieldDef = item.data.getType().memberDefinitions.getMember(fieldDef.name);\r\n                    if (logicalFieldDef && logicalFieldDef.converter && logicalFieldDef.converter[this.providerName] && typeof logicalFieldDef.converter[this.providerName].toDb == 'function'){\r\n                        deleteParam.push(logicalFieldDef.converter[this.providerName].toDb(item.data[logicalFieldDef.name], logicalFieldDef, this.context, logicalFieldDef.dataType));\r\n                    }else{\r\n                        deleteParam.push(this.fieldConverter.toDb[Container.resolveName(fieldDef.dataType)](item.data[fieldDef.name]));\r\n                    }\r\n                    hasCondition = true;\r\n                }\r\n\r\n            }, this);\r\n            if (!hasCondition) {\r\n                addAllField = true;\r\n            }\r\n        }\r\n        if (deleteSqlString.match(\" AND $\")) {\r\n            deleteSqlString = deleteSqlString.slice(0, deleteSqlString.length - 5);\r\n        }\r\n        deleteSqlString += \");\";\r\n        return { query: deleteSqlString, param: deleteParam };\r\n    },\r\n    save_UpdateEntity: function (item) {\r\n        var setSection = \" SET \";\r\n        var whereSection = \"WHERE(\";\r\n\r\n        var fieldsMaxIndex = item.entitySet.createNew.memberDefinitions.length;\r\n        var hasCondition = false;\r\n        var addAllField = false;\r\n        var whereParam = [];\r\n        var setParam = [];\r\n        item.physicalData.constructor.memberDefinitions.getPublicMappedProperties().forEach(function (fieldDef, i) {\r\n            if (item.physicalData[fieldDef.name] !== undefined) {\r\n                if (hasCondition && !whereSection.match(\" AND $\")) {\r\n                    whereSection += \" AND \";\r\n                }\r\n                if (setSection.length > 5 && !setSection.match(',$')) {\r\n                    setSection += ',';\r\n                }\r\n                if (fieldDef.key) {\r\n                    whereSection += '([' + fieldDef.name + '] == ?)';\r\n                    var logicalFieldDef = item.data.getType().memberDefinitions.getMember(fieldDef.name);\r\n                    if (logicalFieldDef && logicalFieldDef.converter && logicalFieldDef.converter[this.providerName] && typeof logicalFieldDef.converter[this.providerName].toDb == 'function'){\r\n                        whereParam.push(logicalFieldDef.converter[this.providerName].toDb(item.physicalData[logicalFieldDef.name], fieldDef, this.context, logicalFieldDef.dataType));\r\n                    }else{\r\n                        whereParam.push(this.fieldConverter.toDb[Container.resolveName(fieldDef.dataType)](item.physicalData[fieldDef.name]));\r\n                    }\r\n                    hasCondition = true;\r\n                }\r\n                else {\r\n                    setSection += \"[\" + fieldDef.name + \"] = ?\";\r\n                    var logicalFieldDef = item.data.getType().memberDefinitions.getMember(fieldDef.name);\r\n                    if (logicalFieldDef && logicalFieldDef.converter && logicalFieldDef.converter[this.providerName] && typeof logicalFieldDef.converter[this.providerName].toDb == 'function'){\r\n                        setParam.push(fieldDef.converter[this.providerName].toDb(item.physicalData[logicalFieldDef.name], logicalFieldDef, this.context, logicalFieldDef.dataType));\r\n                    }else{\r\n                        setParam.push(this.fieldConverter.toDb[Container.resolveName(fieldDef.dataType)](item.physicalData[fieldDef.name]));\r\n                    }\r\n                }\r\n            }\r\n        }, this);\r\n        if (!hasCondition) {\r\n            Guard.raise(new Exception('Not supported UPDATE function without primary key!'));\r\n        }\r\n\r\n        if (whereSection.match(\" AND $\")) { whereSection = whereSection.slice(0, whereSection.length - 5); }\r\n        if (setSection.match(\",$\")) { setSection = setSection.slice(0, setSection.length - 1); }\r\n        var updateSqlString = \"UPDATE [\" + item.entitySet.tableName + \"]\" + setSection + \" \" + whereSection + \");\";\r\n        return { query: updateSqlString, param: setParam.concat(whereParam) };\r\n    },\r\n    save_NewEntity: function (item) {\r\n        var insertSqlString = \"INSERT INTO [\" + item.entitySet.tableName + \"](\";\r\n        var fieldList = \"\";\r\n        var fieldValue = \"\";\r\n        var fieldParam = [];\r\n        item.physicalData.constructor.memberDefinitions.getPublicMappedProperties().forEach(function (fieldDef, i) {\r\n            if (fieldDef.key && !fieldDef.computed && Guard.isNullOrUndefined(item.physicalData[fieldDef.name])) {\r\n                Guard.raise(new Exception('Key is not set', 'Value exception', item));\r\n                return;\r\n            }\r\n            if (fieldDef.key && fieldDef.computed && Guard.isNullOrUndefined(item.physicalData[fieldDef.name])) {\r\n                var typeName = Container.resolveName(fieldDef.type);\r\n                if (typeof this.supportedAutoincrementKeys[typeName] === 'function') {\r\n                    item.physicalData[fieldDef.name] = this.supportedAutoincrementKeys[typeName]();\r\n                }\r\n            }\r\n\r\n            if (fieldList.length > 0 && fieldList[fieldList.length - 1] != \",\") { fieldList += \",\"; fieldValue += \",\"; }\r\n            var fieldName = fieldDef.name;\r\n            if (/*item.physicalData[fieldName] !== null && */item.physicalData[fieldName] !== undefined) {\r\n                if (fieldDef.dataType && (!fieldDef.dataType.isAssignableTo || (fieldDef.dataType.isAssignableTo && !fieldDef.dataType.isAssignableTo($data.EntitySet)))) {\r\n                    fieldValue += '?';\r\n                    fieldList += \"[\" + fieldName + \"]\";\r\n                    var logicalFieldDef = item.data.getType().memberDefinitions.getMember(fieldDef.name);\r\n                    if (logicalFieldDef && logicalFieldDef.converter && logicalFieldDef.converter[this.providerName] && typeof logicalFieldDef.converter[this.providerName].toDb == 'function'){\r\n                        fieldParam.push(logicalFieldDef.converter[this.providerName].toDb(item.physicalData[fieldName], logicalFieldDef, this.context, logicalFieldDef.dataType));\r\n                    }else{\r\n                        fieldParam.push(this.fieldConverter.toDb[Container.resolveName(fieldDef.dataType)](item.physicalData[fieldName]));\r\n                    }\r\n                }\r\n            }\r\n\r\n        }, this);\r\n        if (fieldParam.length < 1) {\r\n            insertSqlString = \"INSERT INTO [\" + item.entitySet.tableName + \"] Default values\";\r\n        } else {\r\n            if (fieldList[fieldList.length - 1] == \",\") { fieldList = fieldList.slice(0, fieldList.length - 1); }\r\n            if (fieldValue[fieldValue.length - 1] == \",\") { fieldValue = fieldValue.slice(0, fieldValue.length - 1); }\r\n            insertSqlString += fieldList + \") VALUES(\" + fieldValue + \");\";\r\n        }\r\n        return { query: insertSqlString, param: fieldParam };\r\n    },\r\n    save_reloadSavedEntity: function (rowid, tableName) {\r\n        return { query: \"SELECT * FROM \" + tableName + \" WHERE rowid=?\", param: [rowid] };\r\n    },\r\n    createSqlFromStorageModel: function (memberDef) {\r\n        ///<param name=\"memberDef\" type=\"$data.StorageModel\">StorageModel object wich contains physical entity definition</param>\r\n        if (memberDef === undefined || memberDef === null || memberDef.PhysicalType === undefined) { Guard.raise(\"StorageModel not contains physical entity definition\"); }\r\n\r\n        var keyFieldNumber = 0;\r\n        var autoincrementFieldNumber = 0;\r\n\r\n        memberDef.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (item, index) {\r\n\r\n            if (item.key) { keyFieldNumber++; }\r\n            if (item.computed) {\r\n                //if (!item.key) {\r\n                //    Guard.raise(new Exception('Only key field can be computed field!'));\r\n                //}\r\n                autoincrementFieldNumber++;\r\n            }\r\n\r\n        }, this);\r\n\r\n        if (autoincrementFieldNumber === 1 && keyFieldNumber > 1) {\r\n            Guard.raise(new Exception('Do not use computed field with multiple primary key!'));\r\n        }\r\n        if (autoincrementFieldNumber > 1 && keyFieldNumber > 1) {\r\n            Guard.raise(new Exception('Do not use multiple computed field!'));\r\n        }\r\n\r\n        memberDef.PhysicalType.memberDefinitions.getKeyProperties().forEach(function (item, index) {\r\n            var typeName = Container.resolveName(item.type);\r\n            if (item.computed && !(typeName in this.supportedAutoincrementKeys)) {\r\n                console.log(\"WARRNING! '\" + typeName + \"' not supported as computed Key!\");\r\n            }\r\n        }, this);\r\n\r\n        var sql = \"CREATE TABLE IF NOT EXISTS [\" + memberDef.TableName + \"] (\";\r\n        var pkFragment = ',PRIMARY KEY (';\r\n\r\n        memberDef.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (item, index) {\r\n\r\n            if (index > 0 && !sql.match(', $') && !sql.match('\\\\($'))\r\n                sql += ', ';\r\n            //var field = memberDef.createNew.memberDefinitions[fieldIndex];\r\n            sql += this.createSqlFragmentFromField(item, autoincrementFieldNumber === 1, memberDef);\r\n            if (autoincrementFieldNumber === 0 && item.key) {\r\n                if (pkFragment.length > 14 && !pkFragment.match(', $'))\r\n                    pkFragment += ', ';\r\n                pkFragment += \"[\" + item.name + \"]\";\r\n            }\r\n\r\n        }, this);\r\n\r\n        if (sql.match(', $'))\r\n            sql = sql.substr(0, sql.length - 2);\r\n        if (autoincrementFieldNumber === 0 && pkFragment.length > 14) {\r\n            sql += pkFragment + ')';\r\n        }\r\n        sql += ');';\r\n        return sql;\r\n    },\r\n    createSqlFragmentFromField: function (field, parsePk, storageModelObject) {\r\n        if (('schemaCreate' in field) && (field['schemaCreate']))\r\n            return field.schemaCreate(field);\r\n\r\n        var fldBuilder = new this.FieldTypeBuilder(field, this, parsePk, storageModelObject);\r\n        return fldBuilder.build();\r\n    },\r\n    FieldTypeBuilder: function (field, prov, parseKey, storageModelObject) {\r\n        this.fieldDef = \"\";\r\n        this.fld = field;\r\n        this.provider = prov;\r\n        this.parsePk = parseKey;\r\n        this.entitySet = storageModelObject;\r\n        this.build = function () {\r\n\r\n            var typeName = Container.resolveName(this.fld.dataType);\r\n            var mapping = $data.SqLiteFieldMapping[typeName];\r\n\r\n            if (mapping) {\r\n                this.buildFieldNameAndType(mapping);\r\n            } else {\r\n                this.buildRelations();\r\n            }\r\n\r\n            return this.fieldDef;\r\n        };\r\n        this.buildFieldNameAndType = function (type) {\r\n            this.fieldDef = \"[\" + this.fld.name + \"] \" + type;\r\n            this.parsePk ? this.buildPrimaryKey() : this.buildNotNull();\r\n        };\r\n        this.buildPrimaryKey = function () {\r\n            if (this.fld.key) {\r\n                this.fieldDef += \" PRIMARY KEY\";\r\n\r\n                var typeName = Container.resolveName(this.fld.dataType);\r\n                if (this.provider.supportedAutoincrementKeys[typeName] === true) {\r\n                    this.buildAutoIncrement();\r\n                }\r\n            }\r\n            else {\r\n                this.buildNotNull();\r\n            }\r\n        };\r\n        this.buildNotNull = function () {\r\n            if (this.fld.required)\r\n                this.fieldDef += \" NOT NULL\";\r\n        };\r\n        this.buildAutoIncrement = function () {\r\n            if (this.fld.computed)\r\n                this.fieldDef += \" AUTOINCREMENT\";\r\n        };\r\n    }\r\n}, {\r\n    isSupported: {\r\n        get: function () { return \"openDatabase\" in $data.__global; },\r\n        set: function () { }\r\n    }\r\n});\r\n\r\nif ($data.storageProviders.sqLite.SqLiteStorageProvider.isSupported) {\r\n    $data.StorageProviderBase.registerProvider(\"webSql\", $data.storageProviders.sqLite.SqLiteStorageProvider);\r\n    $data.StorageProviderBase.registerProvider(\"sqLite\", $data.storageProviders.sqLite.SqLiteStorageProvider);\r\n    $data.webSqlProvider = $data.storageProviders.sqLite.SqLiteStorageProvider;\r\n}\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$C('$data.sqLite.SqlExpressionMonitor', $data.Expressions.ExpressionMonitor, null, {\r\n    constructor: function (monitorDefinition) {\r\n        this.VisitIncludeExpression = function (expression, context) {\r\n            var newSourceExpression = this.Visit(expression.source, context);\r\n            monitorDefinition.isMapped = true;\r\n            var newSelectorExpresion = this.Visit(expression.selector, context);\r\n            monitorDefinition.isMapped = false;\r\n\r\n            if (newSourceExpression !== expression.source || newSelectorExpresion !== expression.selector) {\r\n                return Container.createIncludeExpression(newSourceExpression, newSelectorExpresion);\r\n            }\r\n            return expression;\r\n        };\r\n        this.VisitProjectionExpression = function (expression, context) {\r\n            var source = this.Visit(expression.source, context);\r\n            monitorDefinition.isMapped = true;\r\n            var selector = this.Visit(expression.selector, context);\r\n            monitorDefinition.isMapped = false;\r\n            if (source !== expression.source || selector !== expression.selector) {\r\n                var expr = Container.createProjectionExpression(source, selector, expression.params, expression.instance);\r\n                expr.projectionAs = expression.projectionAs;\r\n                return expr;\r\n            }\r\n            return expression;\r\n        };\r\n    }\r\n\r\n});\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\nimport { SqlStatementBlocks } from './SqLiteCompiler.js';\r\n\r\n$C('$data.sqLite.SqlFilterCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    VisitParametricQueryExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.expression, sqlBuilder);\r\n    },\r\n\r\n    VisitUnaryExpression: function (expression, sqlBuilder) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"></param>\r\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\r\n            sqlBuilder.addText(expression.resolution.mapTo);\r\n            sqlBuilder.addText(SqlStatementBlocks.beginGroup);\r\n            this.Visit(expression.operand, sqlBuilder);\r\n            sqlBuilder.addText(SqlStatementBlocks.endGroup);\r\n    },\r\n\r\n    VisitSimpleBinaryExpression: function (expression, sqlBuilder) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"></param>\r\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\r\n        var self = this;\r\n\r\n        if (expression.nodeType == \"arrayIndex\") {\r\n            this.Visit(expression.left, sqlBuilder);\r\n        } else {\r\n            sqlBuilder.addText(SqlStatementBlocks.beginGroup);\r\n\r\n            //check null filter\r\n            if (expression.left instanceof $data.Expressions.EntityFieldExpression && expression.right instanceof $data.Expressions.ConstantExpression && expression.right.value === null) {\r\n                this.Visit(expression.left, sqlBuilder);\r\n                sqlBuilder.addText(expression.resolution.nullMap);\r\n            } else if (expression.right instanceof $data.Expressions.EntityFieldExpression && expression.left instanceof $data.Expressions.ConstantExpression && expression.left.value === null) {\r\n                this.Visit(expression.right, sqlBuilder);\r\n                sqlBuilder.addText(expression.resolution.nullMap);\r\n            } else {\r\n                this.Visit(expression.left, sqlBuilder);\r\n                sqlBuilder.addText(\" \" + expression.resolution.mapTo + \" \");\r\n\r\n                if (expression.nodeType == \"in\") {\r\n                    //TODO: refactor and generalize\r\n                    Guard.requireType(\"expression.right\", expression.right, $data.Expressions.ConstantExpression);\r\n                    var set = expression.right.value;\r\n                    if (set instanceof Array) {\r\n                        sqlBuilder.addText(SqlStatementBlocks.beginGroup);\r\n                        set.forEach(function (item, i) {\r\n                            if (i > 0) sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\r\n                            self.Visit(item, sqlBuilder);\r\n                        });\r\n                        sqlBuilder.addText(SqlStatementBlocks.endGroup);\r\n                    } else if (set instanceof $data.Queryable) {\r\n                        var subsql = set.toTraceString();\r\n                        sqlBuilder.addText(\"(SELECT d FROM (\" + subsql.sqlText.replace(new RegExp(\"(T[0-9]+(\\.|\\s|))\", \"g\"), \"SQ$1\") + \"))\");\r\n                        subsql.params.forEach(function(p){ sqlBuilder.addParameter(p); });\r\n                        //Guard.raise(\"Not yet... but coming!\");\r\n                    } else {\r\n                        Guard.raise(new Exception(\"Only constant arrays and Queryables can be on the right side of 'in' operator\", \"UnsupportedType\"));\r\n                    };\r\n                } else {\r\n                    this.Visit(expression.right, sqlBuilder);\r\n                }\r\n            }\r\n\r\n            sqlBuilder.addText(SqlStatementBlocks.endGroup);\r\n        }\r\n    },\r\n\r\n    VisitEntitySetExpression: function (expression, sqlBuilder) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.EntitySetExpression\"></param>\r\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\r\n\r\n        var alias = sqlBuilder.getExpressionAlias(expression);\r\n        sqlBuilder.addText(alias);\r\n        sqlBuilder.addText(SqlStatementBlocks.nameSeparator);\r\n    },\r\n    VisitEntityFieldOperationExpression: function (expression, sqlBuilder) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.EntityFieldOperationExpression\"></param>\r\n        /// <param name=\"sqlBuilder\"></param>\r\n\r\n        //this.Visit(expression.operation);\r\n\r\n        Guard.requireType(\"expression.operation\", expression.operation, $data.Expressions.MemberInfoExpression);\r\n        var opDefinition = expression.operation.memberDefinition;\r\n        var opName = opDefinition.mapTo || opDefinition.name;\r\n\r\n        sqlBuilder.addText(opName);\r\n        sqlBuilder.addText(SqlStatementBlocks.beginGroup);\r\n        if (opName === \"like\") {\r\n            var builder = $data.sqLite.SqlBuilder.create([], sqlBuilder.entityContext);\r\n            builder.selectTextPart(\"fragment\");\r\n            this.Visit(expression.parameters[0], builder);\r\n            var fragment = builder.getTextPart(\"fragment\");\r\n            fragment.params.forEach(function (p) {\r\n                var v = p;\r\n                var paramDef = opDefinition.parameters[0];\r\n                var v = paramDef.prefix ? paramDef.prefix + v : v;\r\n                v = paramDef.suffix ? v + paramDef.suffix : v;\r\n                sqlBuilder.addParameter(v);\r\n            });\r\n            sqlBuilder.addText(fragment.text);\r\n            sqlBuilder.addText(\" , \");\r\n            this.Visit(expression.source, sqlBuilder);\r\n        } else {\r\n            this.Visit(expression.source, sqlBuilder);\r\n            expression.parameters.forEach(function (p) {\r\n                sqlBuilder.addText(\" , \");\r\n                this.Visit(p, sqlBuilder);\r\n            }, this);\r\n        };\r\n\r\n        sqlBuilder.addText(SqlStatementBlocks.endGroup);\r\n    },\r\n    VisitMemberInfoExpression: function (expression, sqlBuilder) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.MemberInfoExpression\"></param>\r\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\r\n\r\n        sqlBuilder.addText(expression.memberName);\r\n    },\r\n    VisitQueryParameterExpression: function (expression, sqlBuilder) {\r\n        var value = null;\r\n        if (expression.type == \"array\") {\r\n            value = expression.value[expression.index];\r\n        } else {\r\n            value = expression.value;\r\n        }\r\n        sqlBuilder.addParameter(value);\r\n        sqlBuilder.addText(SqlStatementBlocks.parameter);\r\n    },\r\n\r\n    VisitConstantExpression: function (expression, sqlBuilder) {\r\n        //var typeNameHintFromValue = Container.getTypeName(expression.value);\r\n        var value = sqlBuilder.entityContext.storageProvider.fieldConverter.toDb[Container.resolveName(Container.resolveType(expression.type))](expression.value);;\r\n        sqlBuilder.addParameter(value);\r\n        sqlBuilder.addText(SqlStatementBlocks.parameter);\r\n    },\r\n\r\n    VisitEntityFieldExpression:function(expression, sqlBuilder){\r\n        this.Visit(expression.source, sqlBuilder);\r\n        this.Visit(expression.selector, sqlBuilder);\r\n    },\r\n    VisitComplexTypeExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.source, sqlBuilder);\r\n        this.Visit(expression.selector, sqlBuilder);\r\n        sqlBuilder.addText(\"__\");\r\n    }\r\n});\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\nimport { SqlStatementBlocks } from './SqLiteCompiler.js';\r\n\r\n$C('$data.sqLite.SqlOrderCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (provider) {\r\n        this.provider = provider;\r\n    },\r\n    compile: function (expression, sqlBuilder) {\r\n        this.Visit(expression, sqlBuilder);\r\n    },\r\n    VisitEntitySetExpression: function (expression, sqlBuilder) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.EntitySetExpression\"></param>\r\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\r\n\r\n        var alias = sqlBuilder.getExpressionAlias(expression);\r\n        sqlBuilder.addText(alias);\r\n        sqlBuilder.addText(SqlStatementBlocks.nameSeparator);\r\n    },\r\n    VisitOrderExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.selector, sqlBuilder);\r\n        if (expression.nodeType == $data.Expressions.ExpressionType.OrderByDescending) {\r\n            sqlBuilder.addText(\" DESC\");\r\n        } else {\r\n            sqlBuilder.addText(\" ASC\");\r\n        }\r\n    },\r\n    VisitParametricQueryExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.expression, sqlBuilder);\r\n    },\r\n    VisitEntityFieldExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.source, sqlBuilder);\r\n        this.Visit(expression.selector, sqlBuilder);\r\n    },\r\n    VisitMemberInfoExpression: function (expression, sqlBuilder) {\r\n        sqlBuilder.addText(expression.memberName);\r\n    },\r\n    VisitComplexTypeExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.source, sqlBuilder);\r\n        this.Visit(expression.selector, sqlBuilder);\r\n        sqlBuilder.addText('__');\r\n    }\r\n});\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\nimport { SqlStatementBlocks } from './SqLiteCompiler.js';\r\n\r\n$C('$data.sqLite.SqlPagingCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (provider) {\r\n        this.provider = provider;\r\n    },\r\n    compile: function (expression, context) {\r\n        this.Visit(expression, context);\r\n    },\r\n    VisitPagingExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.amount, sqlBuilder);\r\n    },\r\n    VisitConstantExpression: function (expression, sqlBuilder) {\r\n        sqlBuilder.addParameter(expression.value);\r\n        sqlBuilder.addText(SqlStatementBlocks.parameter);\r\n    }\r\n});\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\nimport { SqlStatementBlocks } from './SqLiteCompiler.js';\r\n\r\n$C('$data.sqLite.SqlProjectionCompiler', $data.Expressions.EntityExpressionVisitor, null,\r\n{\r\n    constructor: function () {\r\n        this.anonymFiledPrefix = \"\";\r\n        this.currentObjectLiteralName = null;\r\n    },\r\n    VisitProjectionExpression: function (expression, sqlBuilder) {\r\n        this.Visit(expression.selector, sqlBuilder);\r\n    },\r\n\r\n    VisitParametricQueryExpression: function (expression, sqlBuilder) {\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression) {\r\n            this.VisitEntitySetExpression(sqlBuilder.sets[0], sqlBuilder);\r\n            sqlBuilder.addText(\"rowid AS \" + this.anonymFiledPrefix + SqlStatementBlocks.rowIdName + \", \");\r\n            this.VisitEntityExpressionAsProjection(expression, sqlBuilder);\r\n        }\r\n        else if (expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            this.VisitEntitySetExpression(sqlBuilder.sets[0], sqlBuilder);\r\n            sqlBuilder.addText(\"rowid AS \" + this.anonymFiledPrefix + SqlStatementBlocks.rowIdName + \", \");\r\n            this.anonymFiledPrefix = sqlBuilder.getExpressionAlias(expression.expression) + '__'\r\n            this.MappedFullEntitySet(expression.expression, sqlBuilder);\r\n        }\r\n        else if (expression.expression instanceof $data.Expressions.ObjectLiteralExpression) {\r\n            this.VisitEntitySetExpression(sqlBuilder.sets[0], sqlBuilder);\r\n            sqlBuilder.addText(\"rowid AS \" + this.anonymFiledPrefix + SqlStatementBlocks.rowIdName + \", \");\r\n            this.Visit(expression.expression, sqlBuilder);\r\n        } else {\r\n            this.VisitEntitySetExpression(sqlBuilder.sets[0], sqlBuilder);\r\n            sqlBuilder.addText(\"rowid\");\r\n            sqlBuilder.addText(SqlStatementBlocks.as);\r\n            sqlBuilder.addText(SqlStatementBlocks.rowIdName);\r\n            sqlBuilder.addText(', ');\r\n            sqlBuilder.addKeyField(SqlStatementBlocks.rowIdName);\r\n            this.Visit(expression.expression, sqlBuilder);\r\n            if (!(expression.expression instanceof $data.Expressions.ComplexTypeExpression)) {\r\n                sqlBuilder.addText(SqlStatementBlocks.as);\r\n                sqlBuilder.addText(SqlStatementBlocks.scalarFieldName);\r\n            }\r\n        }\r\n    },\r\n\r\n    VisitEntityExpressionAsProjection: function (expression, sqlBuilder) {\r\n        var ee = expression.expression;\r\n        var alias = sqlBuilder.getExpressionAlias(ee.source);\r\n\r\n        var localPrefix = this.anonymFiledPrefix + (expression.fieldName ? expression.fieldName : '');\r\n        localPrefix = localPrefix ? localPrefix + '__' : '';\r\n\r\n        ee.storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (memberInfo, index) {\r\n            if (index > 0) {\r\n                sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\r\n            }\r\n\r\n            var fieldName = localPrefix + memberInfo.name;\r\n\r\n            sqlBuilder.addText(alias);\r\n            sqlBuilder.addText(SqlStatementBlocks.nameSeparator);\r\n            sqlBuilder.addText(memberInfo.name);\r\n            sqlBuilder.addText(SqlStatementBlocks.as);\r\n            sqlBuilder.addText(fieldName);\r\n        }, this);\r\n    },\r\n\r\n    VisitEntityFieldOperationExpression: function (expression, sqlBuilder) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.EntityFieldOperationExpression\"></param>\r\n        /// <param name=\"sqlBuilder\"></param>\r\n\r\n        Guard.requireType(\"expression.operation\", expression.operation, $data.Expressions.MemberInfoExpression);\r\n        var opDefinition = expression.operation.memberDefinition;\r\n        var opName = opDefinition.mapTo || opDefinition.name;\r\n\r\n        sqlBuilder.addText(opName);\r\n        sqlBuilder.addText(SqlStatementBlocks.beginGroup);\r\n        if (opName === \"like\") {\r\n            var builder = $data.sqLite.SqlBuilder.create();\r\n            this.Visit(expression.parameters[0], builder);\r\n            builder.params.forEach(function (p) {\r\n                var v = p;\r\n                var paramDef = opDefinition.parameters[0];\r\n                var v = paramDef.prefix ? paramDef.prefix + v : v;\r\n                v = paramDef.suffix ? v + paramDef.suffix : v;\r\n                sqlBuilder.addParameter(v);\r\n            });\r\n            sqlBuilder.addText(builder.sql);\r\n            sqlBuilder.addText(\" , \");\r\n            this.Visit(expression.source, sqlBuilder);\r\n        } else {\r\n            this.Visit(expression.source, sqlBuilder);\r\n            expression.parameters.forEach(function (p) {\r\n                sqlBuilder.addText(\" , \");\r\n                this.Visit(p, sqlBuilder);\r\n            }, this);\r\n        };\r\n\r\n        sqlBuilder.addText(SqlStatementBlocks.endGroup);\r\n    },\r\n\r\n    VisitUnaryExpression: function (expression, sqlBuilder) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"></param>\r\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\r\n        sqlBuilder.addText(expression.resolution.mapTo);\r\n        sqlBuilder.addText(SqlStatementBlocks.beginGroup);\r\n        this.Visit(expression.operand, sqlBuilder);\r\n        sqlBuilder.addText(SqlStatementBlocks.endGroup);\r\n    },\r\n\r\n    VisitSimpleBinaryExpression: function (expression, sqlBuilder) {\r\n        sqlBuilder.addText(SqlStatementBlocks.beginGroup);\r\n        this.Visit(expression.left, sqlBuilder);\r\n        var self = this;\r\n        sqlBuilder.addText(\" \" + expression.resolution.mapTo + \" \");\r\n        if (expression.nodeType == \"in\") {\r\n            //TODO: refactor and generalize\r\n            Guard.requireType(\"expression.right\", expression.right, $data.Expressions.ConstantExpression);\r\n            var set = expression.right.value;\r\n            if (set instanceof Array) {\r\n                sqlBuilder.addText(SqlStatementBlocks.beginGroup);\r\n                set.forEach(function (item, i) {\r\n                    if (i > 0) sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\r\n                    var c = Container.createConstantExpression(item);\r\n                    self.Visit(c, sqlBuilder);\r\n                });\r\n                sqlBuilder.addText(SqlStatementBlocks.endGroup);\r\n            } else if (set instanceof $data.Queryable) {\r\n                Guard.raise(\"not yet... but coming\");\r\n            } else {\r\n                Guard.raise(new Exception(\"Only constant arrays and Queryables can be on the right side of 'in' operator\", \"UnsupportedType\"));\r\n            };\r\n        } else {\r\n            this.Visit(expression.right, sqlBuilder);\r\n        }\r\n        sqlBuilder.addText(SqlStatementBlocks.endGroup);\r\n    },\r\n\r\n    VisitConstantExpression: function (expression, sqlBuilder) {\r\n        var value = expression.value;\r\n        sqlBuilder.addParameter(value);\r\n        sqlBuilder.addText(SqlStatementBlocks.parameter);\r\n    },\r\n\r\n    VisitEntityFieldExpression: function (expression, sqlBuilder) {\r\n        if (expression.source instanceof $data.Expressions.ComplexTypeExpression) {\r\n            var alias = sqlBuilder.getExpressionAlias(expression.source.source.source);\r\n            var storageModel = expression.source.source.storageModel.ComplexTypes[expression.source.selector.memberName];\r\n            var member = storageModel.ReferentialConstraint.filter(function (item) { return item[expression.source.selector.memberName] == expression.selector.memberName; })[0];\r\n            if (!member) { Guard.raise(new Exception('Compiler error! ComplexType does not contain ' + expression.source.selector.memberName + ' property!')); return;}\r\n\r\n            sqlBuilder.addText(alias);\r\n            sqlBuilder.addText(SqlStatementBlocks.nameSeparator);\r\n            sqlBuilder.addText(member[storageModel.From]);\r\n        }\r\n        else {\r\n            this.Visit(expression.source, sqlBuilder);\r\n            this.Visit(expression.selector, sqlBuilder);\r\n        }\r\n\r\n    },\r\n\r\n    VisitEntitySetExpression: function (expression, sqlBuilder) {\r\n        var alias = sqlBuilder.getExpressionAlias(expression);\r\n        sqlBuilder.addText(alias);\r\n        sqlBuilder.addText(SqlStatementBlocks.nameSeparator);\r\n    },\r\n\r\n    VisitComplexTypeExpression: function (expression, sqlBuilder) {\r\n        var alias = sqlBuilder.getExpressionAlias(expression.source.source);\r\n        var storageModel = expression.source.storageModel.ComplexTypes[expression.selector.memberName];\r\n        storageModel.ReferentialConstraint.forEach(function (constrain, index) {\r\n            if (index > 0) {\r\n                sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\r\n            }\r\n            sqlBuilder.addText(alias);\r\n            sqlBuilder.addText(SqlStatementBlocks.nameSeparator);\r\n            sqlBuilder.addText(constrain[storageModel.From]);\r\n            sqlBuilder.addText(SqlStatementBlocks.as);\r\n            sqlBuilder.addText(this.anonymFiledPrefix + constrain[storageModel.To]);\r\n        }, this);\r\n    },\r\n\r\n    VisitMemberInfoExpression: function (expression, sqlBuilder) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.MemberInfoExpression\"></param>\r\n        /// <param name=\"sqlBuilder\" type=\"$data.sqLite.SqlBuilder\"></param>\r\n        sqlBuilder.addText(expression.memberName);\r\n    },\r\n\r\n    VisitObjectLiteralExpression: function (expression, sqlBuilder) {\r\n        var membersNumber = expression.members.length;\r\n        for (var i = 0; i < membersNumber; i++) {\r\n            if (i != 0) {\r\n                sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\r\n            }\r\n            this.Visit(expression.members[i], sqlBuilder);\r\n        }\r\n    },\r\n    MappedFullEntitySet: function (expression, sqlBuilder) {\r\n        var alias = sqlBuilder.getExpressionAlias(expression);\r\n        var properties = expression.storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties();\r\n        properties.forEach(function (prop, index) {\r\n            if (!prop.association) {\r\n                if (index > 0) {\r\n                    sqlBuilder.addText(SqlStatementBlocks.valueSeparator);\r\n                }\r\n                sqlBuilder.addText(alias);\r\n                sqlBuilder.addText(SqlStatementBlocks.nameSeparator);\r\n                sqlBuilder.addText(prop.name);\r\n                sqlBuilder.addText(SqlStatementBlocks.as);\r\n                sqlBuilder.addText(this.anonymFiledPrefix + prop.name);\r\n            }\r\n        }, this);\r\n        //ToDo: complex type\r\n    },\r\n    VisitObjectFieldExpression: function (expression, sqlBuilder) {\r\n\r\n        var tempObjectLiteralName = this.currentObjectLiteralName;\r\n        if (this.currentObjectLiteralName) {\r\n            this.currentObjectLiteralName += '.' + expression.fieldName;\r\n        } else {\r\n            this.currentObjectLiteralName = expression.fieldName;\r\n        }\r\n\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression) {\r\n            this.VisitEntityExpressionAsProjection(expression, sqlBuilder);\r\n        } else {\r\n\r\n            var tmpPrefix = this.anonymFiledPrefix;\r\n            this.anonymFiledPrefix += expression.fieldName + \"__\";\r\n\r\n            if (expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n                this.MappedFullEntitySet(expression.expression, sqlBuilder);\r\n            } else {\r\n                this.Visit(expression.expression, sqlBuilder);\r\n            }\r\n\r\n            this.anonymFiledPrefix = tmpPrefix;\r\n\r\n            if (!(expression.expression instanceof $data.Expressions.ObjectLiteralExpression) && !(expression.expression instanceof $data.Expressions.ComplexTypeExpression) && !(expression.expression instanceof $data.Expressions.EntitySetExpression)) {\r\n                sqlBuilder.addText(SqlStatementBlocks.as);\r\n                sqlBuilder.addText(this.anonymFiledPrefix + expression.fieldName);\r\n            }\r\n        }\r\n        this.currentObjectLiteralName = tempObjectLiteralName;\r\n    }\r\n\r\n}, null);\r\n","import $data from 'jaydata/core';\r\n\r\n//dbCommand\r\nimport DbCommand from '../../DbClient/DbCommand.js';\r\nimport DbConnection from '../../DbClient/DbConnection.js';\r\nimport OpenDbCommand from '../../DbClient/OpenDatabaseClient/OpenDbCommand.js';\r\nimport OpenDbConnection from '../../DbClient/OpenDatabaseClient/OpenDbConnection.js';\r\nimport JayStorageCommand from '../../DbClient/JayStorageClient/JayStorageCommand.js';\r\nimport JayStorageConnection from '../../DbClient/JayStorageClient/JayStorageConnection.js';\r\nimport SqLiteNjCommand from '../../DbClient/SqLiteNjClient/SqLiteNjCommand.js';\r\nimport SqLiteNjConnection from '../../DbClient/SqLiteNjClient/SqLiteNjConnection.js';\r\n\r\n//provider\r\nimport SqLiteConverter from './SqLiteConverter.js';\r\nimport SqLiteStorageProvider from './SqLiteStorageProvider.js';\r\nimport SqLiteCompiler from './SqLiteCompiler.js';\r\nimport SqlPagingCompiler from './SqlPagingCompiler.js';\r\nimport SqlOrderCompiler from './SqlOrderCompiler.js';\r\nimport SqlProjectionCompiler from './SqlProjectionCompiler.js';\r\nimport SqlExpressionMonitor from './SqlExpressionMonitor.js';\r\nimport SqlFilterCompiler from './SqlFilterCompiler.js';\r\nimport sqLite_ModelBinderCompiler from './ModelBinder/sqLite_ModelBinderCompiler.js';\r\n\r\nexport default $data;\r\n"]}